package irigencmd

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/dpb587/rdfkit-go/cmd/cmdflags"
	"github.com/dpb587/rdfkit-go/encoding/jsonld/jsonldtype"
	"github.com/dpb587/rdfkit-go/rdf"
	"github.com/spf13/cobra"
)

func New() *cobra.Command {
	var pkgName = ""
	var base string
	var prefix string
	var outPath string

	fIn := &cmdflags.EncodingInput{
		FallbackOpener: cmdflags.WebRemoteOpener,
		DocumentLoaderJSONLD: jsonldtype.NewCachingDocumentLoader(
			jsonldtype.NewDefaultDocumentLoader(
				http.DefaultClient,
			),
		),
	}

	cmd := &cobra.Command{
		Use:  "irigen",
		Args: cobra.ExactArgs(0),
		RunE: func(cmd *cobra.Command, args []string) error {
			if len(outPath) == 0 {
				return errors.New("output path required")
			}

			bfIn, err := fIn.Open()
			if err != nil {
				return fmt.Errorf("input: %v", err)
			}

			defer bfIn.Close()

			if len(pkgName) == 0 {
				workdir, err := os.Getwd()
				if err != nil {
					return fmt.Errorf("getwd: %v", err)
				}

				if len(outPath) > 0 {
					pkgName = filepath.Base(filepath.Dir(filepath.Join(workdir, outPath)))
				} else {
					pkgName = filepath.Base(workdir)
				}

				if pkgName == "." {
					pkgName = "iri"
				}
			}

			b := &builder{
				statementsBySubject: map[rdf.IRI]*builderSubject{},
			}

			for bfIn.Decoder.Next() {
				b.AddStatement(bfIn.Decoder.GetStatement())
			}

			if err := bfIn.Decoder.Err(); err != nil {
				return fmt.Errorf("read: %s: %v", bfIn.Format, err)
			}

			if len(base) == 0 {
				detectedBase, ok := b.DetectBase()
				if !ok {
					return errors.New("unable to detect base IRI")
				}

				base = detectedBase
			}

			b = b.FilterBase(rdf.IRI(base))

			if len(b.statementsBySubject) == 0 {
				return errors.New("no statements found")
			}

			outBuffer := bytes.NewBuffer(nil)

			fmt.Fprintf(outBuffer, `// Code generated by irigencmd; DO NOT EDIT.
// %x  %s

package %s

import "github.com/dpb587/rdfkit-go/rdf"

`,
				bfIn.HashSum(),
				bfIn.ReadPath,
				pkgName,
			)

			_, err = b.WriteGoComment(outBuffer, rdf.IRI(b.baseTerm), "// ", true)
			if err != nil {
				return fmt.Errorf("write: %v", err)
			}

			_, err = fmt.Fprintf(outBuffer, "const %sBase rdf.IRI = %q\n", prefix, b.base)
			if err != nil {
				return fmt.Errorf("write: %v", err)
			}

			fmt.Fprintf(outBuffer, "\nconst (\n")

			var lastComment bool

			for termIdx, term := range b.ListDefinedTerms() {
				thisComment, err := b.WriteGoComment(outBuffer, term, "\t// ", termIdx == 0)
				if err != nil {
					return fmt.Errorf("write: %v", err)
				} else if lastComment && !thisComment {
					_, err = fmt.Fprintf(outBuffer, "\n")
					if err != nil {
						return fmt.Errorf("write: %v", err)
					}
				}

				lastComment = thisComment

				if strings.HasPrefix(string(term), string(b.base)) {
					_, err = fmt.Fprintf(outBuffer, "\t%[1]s%[2]s = %[1]sBase + %[3]q\n", prefix, b.GetGoIdent(term), strings.TrimPrefix(string(term), string(b.base)))
				} else {
					_, err = fmt.Fprintf(outBuffer, "\t%[1]s%[2]s = %q\n", prefix, b.GetGoIdent(term), term)
				}
				if err != nil {
					return fmt.Errorf("write: %v", err)
				}
			}

			_, err = fmt.Fprint(outBuffer, ")\n")
			if err != nil {
				return fmt.Errorf("write: %v", err)
			}

			formattedContents, err := format.Source(outBuffer.Bytes())
			if err != nil {
				return fmt.Errorf("gofmt: %v", err)
			}

			if outPath == "-" {
				_, err = os.Stdout.Write(formattedContents)
				if err != nil {
					return fmt.Errorf("write output: %v", err)
				}
			} else {
				fh, err := os.OpenFile(outPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
				if err != nil {
					return fmt.Errorf("open output: %v", err)
				}

				defer fh.Close()

				_, err = fh.Write(formattedContents)
				if err != nil {
					return fmt.Errorf("write output: %v", err)
				}
			}

			return nil
		},
	}

	f := cmd.Flags()

	f.StringVarP(&fIn.Path, "in", "i", fIn.Path, "")
	f.StringVar(&fIn.Type, "in-type", fIn.Type, "")
	f.StringVar(&fIn.DefaultBase, "in-default-base", fIn.DefaultBase, "")

	f.StringVar(&base, "base", "", "vocab base IRI")
	f.StringVar(&prefix, "prefix", "", "optional prefix for tokens")
	f.StringVarP(&outPath, "out", "o", outPath, "go output file")

	return cmd
}
