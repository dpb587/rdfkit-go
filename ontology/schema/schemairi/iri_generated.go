// Code generated by irigencmd; DO NOT EDIT.
// b7cbac0b5bb412fe757ce99b403e4c9c142972e821de54a6b5006ed409ab4b81  https://schema.org/version/latest/schemaorg-all-http.ttl

package schemairi

import "github.com/dpb587/rdfkit-go/rdf"

const Base rdf.IRI = "http://schema.org/"

const (
	// A radio channel that uses AM.
	AMRadioChannel_Class = Base + "AMRadioChannel"

	// Reference documentation for application programming interfaces (APIs).
	APIReference_Class = Base + "APIReference"

	// Abdomen clinical examination.
	Abdomen_PhysicalExam = Base + "Abdomen"

	// Web page type: About page.
	AboutPage_Class = Base + "AboutPage"

	// The subject matter of the content.
	About_Property = Base + "about"

	// Indicates whether the book is an abridged edition.
	Abridged_Property = Base + "abridged"

	// An abstract is a short description that summarizes a [[CreativeWork]].
	Abstract_Property = Base + "abstract"

	// The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\n\nTypical unit
	// code(s): SEC for seconds\n\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or
	// seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the [[name]] of the
	// [[QuantitativeValue]], or use [[valueReference]] with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to
	// specify the reference speeds.
	AccelerationTime_Property = Base + "accelerationTime"

	// The act of committing to/adopting an object.\n\nRelated actions:\n\n* [[RejectAction]]: The antonym of
	// AcceptAction.
	AcceptAction_Class = Base + "AcceptAction"

	// The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection
	// mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
	AcceptedAnswer_Property = Base + "acceptedAnswer"

	// The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
	AcceptedOffer_Property = Base + "acceptedOffer"

	// The payment method(s) that are accepted in general by an organization, or for some specific demand or offer.
	AcceptedPaymentMethod_Property = Base + "acceptedPaymentMethod"

	// Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can
	// be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
	AcceptsReservations_Property = Base + "acceptsReservations"

	// Password, PIN, or access code needed for delivery (e.g. from a locker).
	AccessCode_Property = Base + "accessCode"

	// A list of single or combined accessModes that are sufficient to understand all the intellectual content of a
	// resource. Values should be drawn from the [approved
	// vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
	AccessModeSufficient_Property = Base + "accessModeSufficient"

	// The human sensory perceptual system or cognitive faculty through which a person may process or perceive
	// information. Values should be drawn from the [approved
	// vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
	AccessMode_Property = Base + "accessMode"

	// Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the
	// [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
	AccessibilityAPI_Property = Base + "accessibilityAPI"

	// Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from
	// the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
	AccessibilityControl_Property = Base + "accessibilityControl"

	// Content features of the resource, such as accessible media, alternatives and supported enhancements for
	// accessibility. Values should be drawn from the [approved
	// vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
	AccessibilityFeature_Property = Base + "accessibilityFeature"

	// A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0
	// guideline 2.3. Values should be drawn from the [approved
	// vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
	AccessibilityHazard_Property = Base + "accessibilityHazard"

	// A human-readable summary of specific accessibility features or deficiencies, consistent with the other
	// accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will
	// be needed for non-visual users" or "short descriptions are present and no long descriptions are needed".
	AccessibilitySummary_Property = Base + "accessibilitySummary"

	// Category of an [[Accommodation]], following real estate conventions, e.g. RESO (see
	// [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and
	// [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields for suggested values).
	AccommodationCategory_Property = Base + "accommodationCategory"

	// A floorplan of some [[Accommodation]].
	AccommodationFloorPlan_Property = Base + "accommodationFloorPlan"

	// An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting
	// room. Many accommodations are for overnight stays, but this is not a mandatory requirement. For more specific types
	// of accommodations not defined in schema.org, one can use [[additionalType]] with external vocabularies. <br /><br
	// /> See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and
	// other forms of accommodations</a>.
	Accommodation_Class = Base + "Accommodation"

	// The identifier for the account the payment will be applied to.
	AccountId_Property = Base + "accountId"

	// A minimum amount that has to be paid in every month.
	AccountMinimumInflow_Property = Base + "accountMinimumInflow"

	// An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows
	// the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows
	// people to borrow a set amount of money.
	AccountOverdraftLimit_Property = Base + "accountOverdraftLimit"

	// Specifies the Person that is legally accountable for the CreativeWork.
	AccountablePerson_Property = Base + "accountablePerson"

	// Accountancy business.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more
	// [[Service]]\(s).
	AccountingService_Class = Base + "AccountingService"

	// The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing
	// process.
	AchieveAction_Class = Base + "AchieveAction"

	// Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
	AcquireLicensePage_Property = Base + "acquireLicensePage"

	// The organization or person from which the product was acquired.
	AcquiredFrom_Property = Base + "acquiredFrom"

	// The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS
	// stands for Association of Car Rental Industry Systems and Standards.
	AcrissCode_Property = Base + "acrissCode"

	// A set of requirements that must be fulfilled in order to perform an Action.
	ActionAccessSpecification_Class = Base + "ActionAccessSpecification"

	// A set of requirements that must be fulfilled in order to perform an Action. If more than one value is specified,
	// fulfilling one set of requirements will allow the Action to be performed.
	ActionAccessibilityRequirement_Property = Base + "actionAccessibilityRequirement"

	// An application that can complete the request.
	ActionApplication_Property = Base + "actionApplication"

	// A sub property of object. The options subject to this action.
	ActionOption_Property = Base + "actionOption"

	// The high level platform(s) where the Action can be performed for the given URL. To specify a specific application
	// or operating system instance, use actionApplication.
	ActionPlatform_Property = Base + "actionPlatform"

	// Description of the process by which the action was performed.
	ActionProcess_Property = Base + "actionProcess"

	// The status of an Action.
	ActionStatusType_Class = Base + "ActionStatusType"

	// Indicates the current disposition of the Action.
	ActionStatus_Property = Base + "actionStatus"

	// An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a
	// location with the help of an inanimate instrument. The execution of the action may produce a result. Specific
	// action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog
	// post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview
	// document](http://schema.org/docs/actions.html).
	Action_Class = Base + "Action"

	// For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement
	// activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage
	// decisions, reporting and activities after publication.
	ActionableFeedbackPolicy_Property = Base + "actionableFeedbackPolicy"

	// The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
	ActivateAction_Class = Base + "ActivateAction"

	// Represents the activation fee part of the total price for an offered product, for example a cellphone contract.
	ActivationFee_PriceComponentTypeEnumeration = Base + "ActivationFee"

	// An in-progress action (e.g., while watching the movie, or driving to a location).
	ActiveActionStatus_ActionStatusType = Base + "ActiveActionStatus"

	// An active ingredient, typically chemical compounds and/or biologic substances.
	ActiveIngredient_Property = Base + "activeIngredient"

	// Active, but not recruiting new participants.
	ActiveNotRecruiting_MedicalStudyStatus = Base + "ActiveNotRecruiting"

	// Length of time to engage in the activity.
	ActivityDuration_Property = Base + "activityDuration"

	// How often one should engage in the activity.
	ActivityFrequency_Property = Base + "activityFrequency"

	// An actor (individual or a group), e.g. in TV, radio, movie, video games etc., or in an event. Actors can be
	// associated with individual items or with a series, episode, clip.
	Actor_Property = Base + "actor"

	// An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual items or with a
	// series, episode, clip.
	Actors_Property = Base + "actors"

	// The act of editing by adding an object to a collection.
	AddAction_Class = Base + "AddAction"

	// An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and
	// extensions that are available for a surcharge).
	AddOn_Property = Base + "addOn"

	// An additional name for a Person, can be used for a middle name.
	AdditionalName_Property = Base + "additionalName"

	// If responding yes, the number of guests who will attend in addition to the invitee.
	AdditionalNumberOfGuests_Property = Base + "additionalNumberOfGuests"

	// A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another
	// characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that
	// applications designed to use specific schema.org properties (e.g. http://schema.org/width, http://schema.org/color,
	// http://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than
	// using the generic property/value mechanism.
	AdditionalProperty_Property = Base + "additionalProperty"

	// An additional type for the item, typically used for adding more specific types from external vocabularies in
	// microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is
	// a URI-identified RDF class, and in this case corresponds to the use of rdf:type in RDF. Text values can be used
	// sparingly, for cases where useful information can be added without their being an appropriate schema to reference.
	// In the case of text values, the class label should follow the schema.org <a
	// href="http://schema.org/docs/styleguide.html">style guide</a>.
	AdditionalType_Property = Base + "additionalType"

	// Any additional component of the exercise prescription that may need to be articulated to the patient. This may
	// include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over
	// time, etc.
	AdditionalVariable_Property = Base + "additionalVariable"

	// The country. Recommended to be in 2-letter [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1) format,
	// for example "US". For backward compatibility, a 3-letter [ISO 3166-1
	// alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code such as "SGP" or a full country name such
	// as "Singapore" can also be used.
	AddressCountry_Property = Base + "addressCountry"

	// The locality in which the street address is, and which is in the region. For example, Mountain View.
	AddressLocality_Property = Base + "addressLocality"

	// The region in which the locality is, and which is in the country. For example, California or another appropriate
	// first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country).
	AddressRegion_Property = Base + "addressRegion"

	// Physical address of the item.
	Address_Property = Base + "address"

	// A route by which this drug may be administered, e.g. 'oral'.
	AdministrationRoute_Property = Base + "administrationRoute"

	// A geographical region, typically under the jurisdiction of a particular government.
	AdministrativeArea_Class = Base + "AdministrativeArea"

	// An adult entertainment establishment.
	AdultEntertainment_Class = Base + "AdultEntertainment"

	// Enumeration of considerations that make a product relevant or potentially restricted for adults only.
	AdultOrientedEnumeration_Class = Base + "AdultOrientedEnumeration"

	// The amount of time that is required between accepting the offer and the actual usage of the resource or service.
	AdvanceBookingRequirement_Property = Base + "advanceBookingRequirement"

	// A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious
	// (resulting in death, disability, or permanent damage; requiring hospitalization; or otherwise life-threatening or
	// requiring immediate medical attention), tag it as a seriousAdverseOutcome instead.
	AdverseOutcome_Property = Base + "adverseOutcome"

	// An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes
	// [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid
	// content.
	AdvertiserContentArticle_Class = Base + "AdvertiserContentArticle"

	// Physical activity of relatively low intensity that depends primarily on the aerobic energy-generating process;
	// during activity, the aerobic metabolism uses oxygen to adequately meet energy demands during exercise.
	AerobicActivity_PhysicalActivityCategory = Base + "AerobicActivity"

	// Drugs that affect the test's results.
	AffectedBy_Property = Base + "affectedBy"

	// An organization that this person is affiliated with. For example, a school/university, a club, or a team.
	Affiliation_Property = Base + "affiliation"

	// A media object representing the circumstances after performing this direction.
	AfterMedia_Property = Base + "afterMedia"

	// The number of completed interactions for this entity, in a particular role (the 'agent'), in a particular action
	// (indicated in the statistic), and in a particular context (i.e. interactionService).
	AgentInteractionStatistic_Property = Base + "agentInteractionStatistic"

	// The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote a book.
	Agent_Property = Base + "agent"

	// Indicates a prototype of the elements in the list that is used to hold aggregate information (ratings, offers,
	// etc.).
	AggregateElement_Property = Base + "aggregateElement"

	// When a single product is associated with multiple offers (for example, the same pair of shoes is offered by
	// different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate
	// multiple offers that all share the same defined [[businessFunction]] value, or default to
	// http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
	AggregateOffer_Class = Base + "AggregateOffer"

	// The average rating based on multiple ratings or reviews.
	AggregateRating_Class = Base + "AggregateRating"

	// The overall rating, based on a collection of reviews or ratings, of the item.
	AggregateRating_Property = Base + "aggregateRating"

	// The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition,
	// topic or theme) with participants.
	AgreeAction_Class = Base + "AgreeAction"

	// The kind of aircraft (e.g., "Boeing 747").
	Aircraft_Property = Base + "aircraft"

	// An organization that provides flights for passengers.
	Airline_Class = Base + "Airline"

	// An airport.
	Airport_Class = Base + "Airport"

	// Classification of the album by its type of content: soundtrack, live album, studio album, etc.
	AlbumProductionType_Property = Base + "albumProductionType"

	// The kind of release which this album is: single, EP or album.
	AlbumReleaseType_Property = Base + "albumReleaseType"

	// AlbumRelease.
	AlbumRelease_MusicAlbumReleaseType = Base + "AlbumRelease"

	// A release of this album.
	AlbumRelease_Property = Base + "albumRelease"

	// A music album.
	Album_Property = Base + "album"

	// A collection of music albums.
	Albums_Property = Base + "albums"

	// Item contains alcohol or promotes alcohol consumption.
	AlcoholConsideration_AdultOrientedEnumeration = Base + "AlcoholConsideration"

	// Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.
	AlcoholWarning_Property = Base + "alcoholWarning"

	// The algorithm or rules to follow to compute the score.
	Algorithm_Property = Base + "algorithm"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	AlgorithmicMediaDigitalSource_IPTCDigitalSourceEnumeration = Base + "AlgorithmicMediaDigitalSource"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicallyEnhanced">algorithmically
	// enhanced</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a>
	// vocabulary.
	AlgorithmicallyEnhancedDigitalSource_IPTCDigitalSourceEnumeration = Base + "AlgorithmicallyEnhancedDigitalSource"

	// An intangible item that describes an alignment between a learning resource and a node in an educational framework.
	// Should not be used where the nature of the alignment can be described using a simple property, for example to
	// express that a resource [[teaches]] or [[assesses]] a competency.
	AlignmentObject_Class = Base + "AlignmentObject"

	// A category of alignment between the learning resource and the framework node. Recommended values include:
	// 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.
	AlignmentType_Property = Base + "alignmentType"

	// All-wheel Drive is a transmission layout where the engine drives all four wheels.
	AllWheelDriveConfiguration_DriveWheelConfigurationValue = Base + "AllWheelDriveConfiguration"

	// Content about the allergy-related aspects of a health topic.
	AllergiesHealthAspect_HealthAspectEnumeration = Base + "AllergiesHealthAspect"

	// The act of organizing tasks/objects/events by associating resources to it.
	AllocateAction_Class = Base + "AllocateAction"

	// An alias for the item.
	AlternateName_Property = Base + "alternateName"

	// A secondary title of the CreativeWork.
	AlternativeHeadline_Property = Base + "alternativeHeadline"

	// Another gene which is a variation of this one.
	AlternativeOf_Property = Base + "alternativeOf"

	// An organization that the person is an alumni of.
	AlumniOf_Property = Base + "alumniOf"

	// Alumni of an organization.
	Alumni_Property = Base + "alumni"

	// An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a
	// statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	AmenityFeature_Property = Base + "amenityFeature"

	// The quantity of the goods included in the offer.
	AmountOfThisGood_Property = Base + "amountOfThisGood"

	// The amount of money.
	Amount_Property = Base + "amount"

	// A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
	AmpStory_Class = Base + "AmpStory"

	// An amusement park.
	AmusementPark_Class = Base + "AmusementPark"

	// Physical activity that is of high-intensity which utilizes the anaerobic metabolism of the body.
	AnaerobicActivity_PhysicalActivityCategory = Base + "AnaerobicActivity"

	// An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of
	// the author/producer, offering interpretations and conclusions.
	AnalysisNewsArticle_Class = Base + "AnalysisNewsArticle"

	// Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all
	// anatomical structures.
	AnatomicalStructure_Class = Base + "AnatomicalStructure"

	// An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical
	// systems, such as organ systems, are one organizing principle of anatomy, and can include circulatory, digestive,
	// endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary,
	// vestibular, and other systems.
	AnatomicalSystem_Class = Base + "AnatomicalSystem"

	// Represents the broad notion of Android-based operating systems.
	AndroidPlatform_DigitalPlatformEnumeration = Base + "AndroidPlatform"

	// A specific branch of medical science that pertains to study of anesthetics and their application.
	Anesthesia_MedicalSpecialty = Base + "Anesthesia"

	// Animal shelter.
	AnimalShelter_Class = Base + "AnimalShelter"

	// Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the SpecialAnnouncement. For example,
	// a specific testing facility or business with special opening hours. For a larger geographic region like a
	// quarantine of an entire region, use [[spatialCoverage]].
	AnnouncementLocation_Property = Base + "announcementLocation"

	// The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that
	// represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs
	// associated with the transaction.
	AnnualPercentageRate_Property = Base + "annualPercentageRate"

	// The number of answers this question has received.
	AnswerCount_Property = Base + "answerCount"

	// A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad
	// clarification or statement about it.
	AnswerExplanation_Property = Base + "answerExplanation"

	// An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
	Answer_Class = Base + "Answer"

	// The muscle whose action counteracts the specified muscle.
	Antagonist_Property = Base + "antagonist"

	// Residence type: Apartment complex.
	ApartmentComplex_Class = Base + "ApartmentComplex"

	// An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of
	// residential real estate) that occupies only part of a building (source: Wikipedia, the free encyclopedia, see <a
	// href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
	Apartment_Class = Base + "Apartment"

	// Appearance assessment with clinical examination.
	Appearance_PhysicalExam = Base + "Appearance"

	// Indicates an occurrence of a [[Claim]] in some [[CreativeWork]].
	Appearance_Property = Base + "appearance"

	// The act of inserting at the end if an ordered collection.
	AppendAction_Class = Base + "AppendAction"

	// A country where a particular merchant return policy applies to, for example the two-letter ISO 3166-1 alpha-2
	// country code.
	ApplicableCountry_Property = Base + "applicableCountry"

	// The location in which the status applies.
	ApplicableLocation_Property = Base + "applicableLocation"

	// The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not
	// need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
	ApplicantLocationRequirements_Property = Base + "applicantLocationRequirements"

	// Type of software application, e.g. 'Game, Multimedia'.
	ApplicationCategory_Property = Base + "applicationCategory"

	// Contact details for further information relevant to this job posting.
	ApplicationContact_Property = Base + "applicationContact"

	// The date on which the program stops collecting applications for the next enrollment cycle. Flexible application
	// deadlines (for example, a program with rolling admissions) can be described in a textual string, rather than as a
	// DateTime.
	ApplicationDeadline_Property = Base + "applicationDeadline"

	// The date at which the program begins collecting applications for the next enrollment cycle.
	ApplicationStartDate_Property = Base + "applicationStartDate"

	// Subcategory of the application, e.g. 'Arcade Game'.
	ApplicationSubCategory_Property = Base + "applicationSubCategory"

	// The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
	ApplicationSuite_Property = Base + "applicationSuite"

	// An application that can complete the request.
	Application_Property = Base + "application"

	// The delivery method(s) to which the delivery charge or payment charge specification applies.
	AppliesToDeliveryMethod_Property = Base + "appliesToDeliveryMethod"

	// The payment method(s) to which the payment charge specification applies.
	AppliesToPaymentMethod_Property = Base + "appliesToPaymentMethod"

	// The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n*
	// [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
	ApplyAction_Class = Base + "ApplyAction"

	// An indication for a medical therapy that has been formally specified or approved by a regulatory body that
	// regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
	ApprovedIndication_Class = Base + "ApprovedIndication"

	// Aquarium.
	Aquarium_Class = Base + "Aquarium"

	// An intangible type to be applied to any archive content, carrying with it a set of properties required to describe
	// archival items and collections.
	ArchiveComponent_Class = Base + "ArchiveComponent"

	// Collection, [fonds](https://en.wikipedia.org/wiki/Fonds), or item held, kept or maintained by an
	// [[ArchiveOrganization]].
	ArchiveHeld_Property = Base + "archiveHeld"

	// An organization with archival holdings. An organization which keeps and preserves archival material and typically
	// makes it accessible to the public.
	ArchiveOrganization_Class = Base + "ArchiveOrganization"

	// Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the
	// items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist,
	// or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
	ArchivedAt_Property = Base + "archivedAt"

	// The geographic area where a service or offered item is provided.
	AreaServed_Property = Base + "areaServed"

	// The area within which users can expect to reach the broadcast service.
	Area_Property = Base + "area"

	// The airport where the flight terminates.
	ArrivalAirport_Property = Base + "arrivalAirport"

	// The terminal or port from which the boat arrives.
	ArrivalBoatTerminal_Property = Base + "arrivalBoatTerminal"

	// The stop or station from which the bus arrives.
	ArrivalBusStop_Property = Base + "arrivalBusStop"

	// Identifier of the flight's arrival gate.
	ArrivalGate_Property = Base + "arrivalGate"

	// The platform where the train arrives.
	ArrivalPlatform_Property = Base + "arrivalPlatform"

	// The station where the train trip ends.
	ArrivalStation_Property = Base + "arrivalStation"

	// Identifier of the flight's arrival terminal.
	ArrivalTerminal_Property = Base + "arrivalTerminal"

	// The expected arrival time.
	ArrivalTime_Property = Base + "arrivalTime"

	// The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with
	// participants.
	ArriveAction_Class = Base + "ArriveAction"

	// The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20
	// prints, 'artEdition' refers to the total number of copies (in this example "20").
	ArtEdition_Property = Base + "artEdition"

	// An art gallery.
	ArtGallery_Class = Base + "ArtGallery"

	// The material used. (E.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint,
	// Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
	ArtMedium_Property = Base + "artMedium"

	// The branches that comprise the arterial structure.
	ArterialBranch_Property = Base + "arterialBranch"

	// A type of blood vessel that specifically carries blood away from the heart.
	Artery_Class = Base + "Artery"

	// e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
	Artform_Property = Base + "artform"

	// The actual body of the article.
	ArticleBody_Property = Base + "articleBody"

	// Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
	ArticleSection_Property = Base + "articleSection"

	// An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many
	// different types and this is intended to cover them all.\n\nSee also [blog
	// post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
	Article_Class = Base + "Article"

	// The primary artist for a work in a medium other than pencils or digital line art--for example, if the primary
	// artwork is done in watercolors or digital paints.
	Artist_Property = Base + "artist"

	// The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
	ArtworkSurface_Property = Base + "artworkSurface"

	// An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique identifier assigned by
	// Amazon.com and its partners for product identification within the Amazon organization (summary from
	// [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s article). Note also that this is
	// a definition for how to include ASINs in Schema.org data, and not a definition of ASINs in general - see
	// documentation from Amazon for authoritative details. ASINs are most commonly encoded as text strings, but the
	// [asin] property supports URL/URI as potential values too.
	Asin_Property = Base + "asin"

	// The act of posing a question / favor to someone.\n\nRelated actions:\n\n* [[ReplyAction]]: Appears generally as a
	// response to AskAction.
	AskAction_Class = Base + "AskAction"

	// A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights,
	// clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
	AskPublicNewsArticle_Class = Base + "AskPublicNewsArticle"

	// An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes',
	// 'prognosis', 'etiology', 'epidemiology', etc.
	Aspect_Property = Base + "aspect"

	// Associated product/technology version. E.g., .NET Framework 4.5.
	AssemblyVersion_Property = Base + "assemblyVersion"

	// Library file name, e.g., mscorlib.dll, system.web.dll.
	Assembly_Property = Base + "assembly"

	// The act of forming one's opinion, reaction or sentiment.
	AssessAction_Class = Base + "AssessAction"

	// The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	Assesses_Property = Base + "assesses"

	// The act of allocating an action/event/task to some destination (someone or something).
	AssignAction_Class = Base + "AssignAction"

	// The anatomy of the underlying organ system or structures associated with this entity.
	AssociatedAnatomy_Property = Base + "associatedAnatomy"

	// A NewsArticle associated with the Media Object.
	AssociatedArticle_Property = Base + "associatedArticle"

	// An associated [[ClaimReview]], related by specific common content, topic or claim. The expectation is that this
	// property would be most typically used in cases where a single activity is conducting both claim reviews and media
	// reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while
	// [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedClaimReview_Property = Base + "associatedClaimReview"

	// Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an
	// evidence supporting the association, please use PropertyValue.
	AssociatedDisease_Property = Base + "associatedDisease"

	// An associated [[MediaReview]], related by specific common content, topic or claim. The expectation is that this
	// property would be most typically used in cases where a single activity is conducting both claim reviews and media
	// reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while
	// [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedMediaReview_Property = Base + "associatedMediaReview"

	// A media object that encodes this CreativeWork. This property is a synonym for encoding.
	AssociatedMedia_Property = Base + "associatedMedia"

	// If applicable, a description of the pathophysiology associated with the anatomical system, including potential
	// abnormal changes in the mechanical, physical, and biochemical functions of the system.
	AssociatedPathophysiology_Property = Base + "associatedPathophysiology"

	// An associated [[Review]].
	AssociatedReview_Property = Base + "associatedReview"

	// A person that acts as performing member of a sports team; a player as opposed to a coach.
	Athlete_Property = Base + "athlete"

	// A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
	Atlas_Class = Base + "Atlas"

	// A person or organization attending the event.
	Attendee_Property = Base + "attendee"

	// A person attending the event.
	Attendees_Property = Base + "attendees"

	// Professional service: Attorney. \n\nThis type is deprecated - [[LegalService]] is more inclusive and less
	// ambiguous.
	Attorney_Class = Base + "Attorney"

	// The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
	AudienceType_Property = Base + "audienceType"

	// Intended audience for an item, i.e. the group for whom the item was created.
	Audience_Class = Base + "Audience"

	// An intended audience, i.e. a group for whom something was created.
	Audience_Property = Base + "audience"

	// A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the
	// purposes of this type, considered identical. If they have different embedded metadata the files will differ.
	// Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual
	// content, do not affect this notion of identity.
	AudioObjectSnapshot_Class = Base + "AudioObjectSnapshot"

	// An audio file.
	AudioObject_Class = Base + "AudioObject"

	// An embedded audio object.
	Audio_Property = Base + "audio"

	// Book format: Audiobook. This is an enumerated value for use with the bookFormat property. There is also a type
	// 'Audiobook' in the bib extension which includes Audiobook specific properties.
	AudiobookFormat_BookFormatType = Base + "AudiobookFormat"

	// An audiobook.
	Audiobook_Class = Base + "Audiobook"

	// Date when a certification was last audited. See also
	// [gs1:certificationAuditDate](https://www.gs1.org/voc/certificationAuditDate).
	AuditDate_Property = Base + "auditDate"

	// The Organization responsible for authenticating the user's subscription. For example, many media apps require a
	// cable/satellite provider to authenticate your subscription before playing media.
	Authenticator_Property = Base + "authenticator"

	// The author of this content or rating. Please note that author is special in that HTML 5 provides a special
	// mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
	Author_Property = Base + "author"

	// Indicates that the publisher gives some special status to the publication of the document. ("The Queens Printer"
	// version of a UK Act of Parliament, or the PDF version of a Directive published by the EU Office of Publications).
	// Something "Authoritative" is considered to be also [[OfficialLegalValue]]".
	AuthoritativeLegalValue_LegalValueLevel = Base + "AuthoritativeLegalValue"

	// The act of granting permission to an object.
	AuthorizeAction_Class = Base + "AuthorizeAction"

	// Auto body shop.
	AutoBodyShop_Class = Base + "AutoBodyShop"

	// An car dealership.
	AutoDealer_Class = Base + "AutoDealer"

	// An auto parts store.
	AutoPartsStore_Class = Base + "AutoPartsStore"

	// A car rental business.
	AutoRental_Class = Base + "AutoRental"

	// Car repair business.
	AutoRepair_Class = Base + "AutoRepair"

	// A car wash business.
	AutoWash_Class = Base + "AutoWash"

	// ATM/cash machine.
	AutomatedTeller_Class = Base + "AutomatedTeller"

	// Car repair, sales, or parts.
	AutomotiveBusiness_Class = Base + "AutomotiveBusiness"

	// The end of the availability of the product or service included in the offer.
	AvailabilityEnds_Property = Base + "availabilityEnds"

	// The beginning of the availability of the product or service included in the offer.
	AvailabilityStarts_Property = Base + "availabilityStarts"

	// The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
	Availability_Property = Base + "availability"

	// The place(s) from which the offer can be obtained (e.g. store locations).
	AvailableAtOrFrom_Property = Base + "availableAtOrFrom"

	// A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
	AvailableChannel_Property = Base + "availableChannel"

	// The delivery method(s) available for this offer.
	AvailableDeliveryMethod_Property = Base + "availableDeliveryMethod"

	// When the item is available for pickup from the store, locker, etc.
	AvailableFrom_Property = Base + "availableFrom"

	// The location in which the strength is available.
	AvailableIn_Property = Base + "availableIn"

	// A language someone may use with or at the item, service or place. Please use one of the language codes from the
	// [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]].
	AvailableLanguage_Property = Base + "availableLanguage"

	// Device required to run the application. Used in cases where a specific make/model is required to run the
	// application.
	AvailableOnDevice_Property = Base + "availableOnDevice"

	// A medical service available from this provider.
	AvailableService_Property = Base + "availableService"

	// An available dosage strength for the drug.
	AvailableStrength_Property = Base + "availableStrength"

	// A diagnostic test or procedure offered by this lab.
	AvailableTest_Property = Base + "availableTest"

	// After this date, the item will no longer be available for pickup.
	AvailableThrough_Property = Base + "availableThrough"

	// An award won by or for this item.
	Award_Property = Base + "award"

	// Awards won by or for this item.
	Awards_Property = Base + "awards"

	// The away team in a sports event.
	AwayTeam_Property = Base + "awayTeam"

	// A system of medicine that originated in India over thousands of years and that focuses on integrating and balancing
	// the body, mind, and spirit.
	Ayurvedic_MedicineSystem = Base + "Ayurvedic"

	// Indicates that the item is available on back order.
	BackOrder_ItemAvailability = Base + "BackOrder"

	// A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka "explainer" or
	// "backgrounder"). For example, an in-depth article or frequently-asked-questions
	// ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other
	// kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in
	// particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education
	// perspective.
	BackgroundNewsArticle_Class = Base + "BackgroundNewsArticle"

	// For an [[Article]], typically a [[NewsArticle]], the backstory property provides a textual summary giving a brief
	// explanation of why and how an article was created. In a journalistic setting this could include information about
	// reporting process, methods, interviews, data sources, etc.
	Backstory_Property = Base + "backstory"

	// Pathogenic bacteria that cause bacterial infection.
	Bacteria_InfectiousAgentClass = Base + "Bacteria"

	// A bakery.
	Bakery_Class = Base + "Bakery"

	// Physical activity that is engaged to help maintain posture and balance.
	Balance_PhysicalActivityCategory = Base + "Balance"

	// The type of a bank account.
	BankAccountType_Property = Base + "bankAccountType"

	// A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be
	// paid interest.
	BankAccount_Class = Base + "BankAccount"

	// Bank or credit union.
	BankOrCreditUnion_Class = Base + "BankOrCreditUnion"

	// A bar or pub.
	BarOrPub_Class = Base + "BarOrPub"

	// An image of a visual machine-readable code such as a barcode or QR code.
	Barcode_Class = Base + "Barcode"

	// The base salary of the job or of an employee in an EmployeeRole.
	BaseSalary_Property = Base + "baseSalary"

	// BasicIncome: this is a benefit for basic income.
	BasicIncome_GovernmentBenefitsType = Base + "BasicIncome"

	// A sub property of recipient. The recipient blind copied on a message.
	BccRecipient_Property = Base + "bccRecipient"

	// Beach.
	Beach_Class = Base + "Beach"

	// Beauty salon.
	BeautySalon_Class = Base + "BeautySalon"

	// Bed and breakfast. <br /><br /> See also the <a href="/docs/hotels.html">dedicated document on the use of
	// schema.org for marking up hotels and other forms of accommodations</a>.
	BedAndBreakfast_Class = Base + "BedAndBreakfast"

	// An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel
	// room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also
	// [[BedType]] (under development).
	BedDetails_Class = Base + "BedDetails"

	// A type of bed. This is used for indicating the bed or beds available in an accommodation.
	BedType_Class = Base + "BedType"

	// The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you
	// use bed directly with a text. If you want to indicate the quantity of a certain kind of bed, use an instance of
	// BedDetails. For more detailed information, use the amenityFeature property.
	Bed_Property = Base + "bed"

	// A media object representing the circumstances before performing this direction.
	BeforeMedia_Property = Base + "beforeMedia"

	// The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated
	// actions:\n\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
	BefriendAction_Class = Base + "BefriendAction"

	// A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s
	// bank account or releasing funds for the beneficiary.
	BeneficiaryBank_Property = Base + "beneficiaryBank"

	// Content about the benefits and advantages of usage or utilization of topic.
	BenefitsHealthAspect_HealthAspectEnumeration = Base + "BenefitsHealthAspect"

	// The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan
	// variation.
	BenefitsSummaryUrl_Property = Base + "benefitsSummaryUrl"

	// Description of benefits associated with the job.
	Benefits_Property = Base + "benefits"

	// The highest value allowed in this rating system.
	BestRating_Property = Base + "bestRating"

	// A bike store.
	BikeStore_Class = Base + "BikeStore"

	// The billing address for the order.
	BillingAddress_Property = Base + "billingAddress"

	// Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the
	// contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case
	// the unit of measurement, for example month, is specified by the unitCode property).
	BillingDuration_Property = Base + "billingDuration"

	// This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The
	// unit of measurement is specified by the unitCode property.
	BillingIncrement_Property = Base + "billingIncrement"

	// The time interval used to compute the invoice.
	BillingPeriod_Property = Base + "billingPeriod"

	// Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for
	// example, to model a price increase after the first year of a subscription. The unit of measurement is specified by
	// the unitCode property.
	BillingStart_Property = Base + "billingStart"

	// Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
	BioChemEntity_Class = Base + "BioChemEntity"

	// A BioChemEntity that is known to interact with this item.
	BioChemInteraction_Property = Base + "bioChemInteraction"

	// A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.
	BioChemSimilarity_Property = Base + "bioChemSimilarity"

	// A role played by the BioChemEntity within a biological context.
	BiologicalRole_Property = Base + "biologicalRole"

	// The biomechanical properties of the bone.
	BiomechnicalClass_Property = Base + "biomechnicalClass"

	// Date of birth.
	BirthDate_Property = Base + "birthDate"

	// The place where the person was born.
	BirthPlace_Property = Base + "birthPlace"

	// The bitrate of the media object.
	Bitrate_Property = Base + "bitrate"

	// A posting that is part of this blog.
	BlogPost_Property = Base + "blogPost"

	// A blog post.
	BlogPosting_Class = Base + "BlogPosting"

	// Indicates a post that is part of a [[Blog]]. Note that historically, what we term a "Blog" was once known as a
	// "weblog", and that what we term a "BlogPosting" is now often colloquially referred to as a "blog".
	BlogPosts_Property = Base + "blogPosts"

	// A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts
	// ([[BlogPosting]]s) in a [[Blog]] are often colloquially referred to by the same term.
	Blog_Class = Base + "Blog"

	// The blood vessel that carries blood from the heart to the muscle.
	BloodSupply_Property = Base + "bloodSupply"

	// A medical test performed on a sample of a patient's blood.
	BloodTest_Class = Base + "BloodTest"

	// The airline-specific indicator of boarding order / preference.
	BoardingGroup_Property = Base + "boardingGroup"

	// A type of boarding policy used by an airline.
	BoardingPolicyType_Class = Base + "BoardingPolicyType"

	// The type of boarding policy used by the airline (e.g. zone-based or group-based).
	BoardingPolicy_Property = Base + "boardingPolicy"

	// A reservation for boat travel. Note: This type is for information about actual reservations, e.g. in confirmation
	// emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
	BoatReservation_Class = Base + "BoatReservation"

	// A terminal for boats, ships, and other water vessels.
	BoatTerminal_Class = Base + "BoatTerminal"

	// A trip on a commercial ferry line.
	BoatTrip_Class = Base + "BoatTrip"

	// Location in the body of the anatomical structure.
	BodyLocation_Property = Base + "bodyLocation"

	// Arm length (measured between arms/shoulder line intersection and the prominent wrist bone). Used, for example, to
	// fit shirts.
	BodyMeasurementArm_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementArm"

	// Maximum girth of bust. Used, for example, to fit women's suits.
	BodyMeasurementBust_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementBust"

	// Maximum girth of chest. Used, for example, to fit men's suits.
	BodyMeasurementChest_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementChest"

	// Foot length (measured between end of the most prominent toe and the most prominent part of the heel). Used, for
	// example, to measure socks.
	BodyMeasurementFoot_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementFoot"

	// Maximum hand girth (measured over the knuckles of the open right hand excluding thumb, fingers together). Used, for
	// example, to fit gloves.
	BodyMeasurementHand_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementHand"

	// Maximum girth of head above the ears. Used, for example, to fit hats.
	BodyMeasurementHead_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementHead"

	// Body height (measured between crown of head and soles of feet). Used, for example, to fit jackets.
	BodyMeasurementHeight_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementHeight"

	// Girth of hips (measured around the buttocks). Used, for example, to fit skirts.
	BodyMeasurementHips_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementHips"

	// Inside leg (measured between crotch and soles of feet). Used, for example, to fit pants.
	BodyMeasurementInsideLeg_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementInsideLeg"

	// Girth of neck. Used, for example, to fit shirts.
	BodyMeasurementNeck_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementNeck"

	// Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
	BodyMeasurementTypeEnumeration_Class = Base + "BodyMeasurementTypeEnumeration"

	// Girth of body just below the bust. Used, for example, to fit women's swimwear.
	BodyMeasurementUnderbust_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementUnderbust"

	// Girth of natural waistline (between hip bones and lower ribs). Used, for example, to fit pants.
	BodyMeasurementWaist_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementWaist"

	// Body weight. Used, for example, to measure pantyhose.
	BodyMeasurementWeight_BodyMeasurementTypeEnumeration = Base + "BodyMeasurementWeight"

	// A body of water, such as a sea, ocean, or lake.
	BodyOfWater_Class = Base + "BodyOfWater"

	// Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
	BodyType_Property = Base + "bodyType"

	// Rigid connective tissue that comprises up the skeletal structure of the human body.
	Bone_Class = Base + "Bone"

	// The edition of the book.
	BookEdition_Property = Base + "bookEdition"

	// The publication format of the book.
	BookFormatType_Class = Base + "BookFormatType"

	// The format of the book.
	BookFormat_Property = Base + "bookFormat"

	// A series of books. Included books can be indicated with the hasPart property.
	BookSeries_Class = Base + "BookSeries"

	// A bookstore.
	BookStore_Class = Base + "BookStore"

	// A book.
	Book_Class = Base + "Book"

	// 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
	BookingAgent_Property = Base + "bookingAgent"

	// The date and time the reservation was booked.
	BookingTime_Property = Base + "bookingTime"

	// An agent bookmarks/flags/labels/tags/marks an object.
	BookmarkAction_Class = Base + "BookmarkAction"

	// Boolean: True or False.
	Boolean_Class = Base + "Boolean"

	// The act of obtaining an object under an agreement to return it at a later date. Reciprocal of
	// LendAction.\n\nRelated actions:\n\n* [[LendAction]]: Reciprocal of BorrowAction.
	BorrowAction_Class = Base + "BorrowAction"

	// A sub property of participant. The person that borrows the object being lent.
	Borrower_Property = Base + "borrower"

	// A bowling alley.
	BowlingAlley_Class = Base + "BowlingAlley"

	// A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second
	// point is the upper corner. A box is expressed as two points separated by a space character.
	Box_Property = Base + "box"

	// Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of
	// sensation and intellectual and nervous activity.
	BrainStructure_Class = Base + "BrainStructure"

	// A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically
	// assigned by the parentOrganization and used in structured URLs.\n\nFor example, in the URL
	// http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
	BranchCode_Property = Base + "branchCode"

	// The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical)
	// [[branch]].
	BranchOf_Property = Base + "branchOf"

	// The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].
	Branch_Property = Base + "branch"

	// A brand is a name used by an organization or business person for labeling a product, product group, or similar.
	Brand_Class = Base + "Brand"

	// The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business
	// person.
	Brand_Property = Base + "brand"

	// A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their
	// URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct
	// the order of the items in a BreadcrumbList. The convention is that a breadcrumb list has an [[itemListOrder]] of
	// [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the
	// "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position'
	// are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first
	// item in the list.
	BreadcrumbList_Class = Base + "BreadcrumbList"

	// A set of links that can help a user understand and navigate a website hierarchy.
	Breadcrumb_Property = Base + "breadcrumb"

	// Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.
	BreastfeedingWarning_Property = Base + "breastfeedingWarning"

	// Brewery.
	Brewery_Class = Base + "Brewery"

	// A bridge.
	Bridge_Class = Base + "Bridge"

	// The media network(s) whose content is broadcast on this station.
	BroadcastAffiliateOf_Property = Base + "broadcastAffiliateOf"

	// The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a
	// number.
	BroadcastChannelId_Property = Base + "broadcastChannelId"

	// A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
	BroadcastChannel_Class = Base + "BroadcastChannel"

	// The name displayed in the channel guide. For many US affiliates, it is the network name.
	BroadcastDisplayName_Property = Base + "broadcastDisplayName"

	// An over the air or online broadcast event.
	BroadcastEvent_Class = Base + "BroadcastEvent"

	// The frequency in MHz and the modulation used for a particular BroadcastService.
	BroadcastFrequencySpecification_Class = Base + "BroadcastFrequencySpecification"

	// The frequency in MHz for a particular broadcast.
	BroadcastFrequencyValue_Property = Base + "broadcastFrequencyValue"

	// The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g. 87-99. In addition a shortcut
	// idiom is supported for frequencies of AM and FM radio channels, e.g. "87 FM".
	BroadcastFrequency_Property = Base + "broadcastFrequency"

	// The event being broadcast such as a sporting event or awards ceremony.
	BroadcastOfEvent_Property = Base + "broadcastOfEvent"

	// BroadcastRelease.
	BroadcastRelease_MusicAlbumReleaseType = Base + "BroadcastRelease"

	// The type of service required to have access to the channel (e.g. Standard or Premium).
	BroadcastServiceTier_Property = Base + "broadcastServiceTier"

	// A delivery service through which content is provided via broadcast over the air or online.
	BroadcastService_Class = Base + "BroadcastService"

	// The modulation (e.g. FM, AM, etc) used by a particular broadcast service.
	BroadcastSignalModulation_Property = Base + "broadcastSignalModulation"

	// The subchannel used for the broadcast.
	BroadcastSubChannel_Property = Base + "broadcastSubChannel"

	// The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its
	// broadcasts.
	BroadcastTimezone_Property = Base + "broadcastTimezone"

	// The organization owning or operating the broadcast service.
	Broadcaster_Property = Base + "broadcaster"

	// An entity that arranges for an exchange between a buyer and a seller. In most cases a broker never acquires or
	// releases ownership of a product or service involved in an exchange. If it is not clear whether an entity is a
	// broker, seller, or buyer, the latter two terms are preferred.
	Broker_Property = Base + "broker"

	// An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage
	// firm.
	BrokerageAccount_Class = Base + "BrokerageAccount"

	// Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
	BrowserRequirements_Property = Base + "browserRequirements"

	// A Buddhist temple.
	BuddhistTemple_Class = Base + "BuddhistTemple"

	// The name of the bus (e.g. Bolt Express).
	BusName_Property = Base + "busName"

	// The unique identifier for the bus.
	BusNumber_Property = Base + "busNumber"

	// A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury buses, usually
	// in service for long distance travel.
	BusOrCoach_Class = Base + "BusOrCoach"

	// A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in
	// confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use
	// [[Offer]].
	BusReservation_Class = Base + "BusReservation"

	// A bus station.
	BusStation_Class = Base + "BusStation"

	// A bus stop.
	BusStop_Class = Base + "BusStop"

	// A trip on a commercial bus line.
	BusTrip_Class = Base + "BusTrip"

	// A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
	BusinessAudience_Class = Base + "BusinessAudience"

	// Days of the week when the merchant typically operates, indicated via opening hours markup.
	BusinessDays_Property = Base + "businessDays"

	// A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the
	// position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used
	// values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n*
	// http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller
	BusinessEntityType_Class = Base + "BusinessEntityType"

	// Event type: Business event.
	BusinessEvent_Class = Base + "BusinessEvent"

	// The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the
	// organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair,
	// manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications
	// of access rights are also instances of this class.\n\nCommonly used values:\n\n*
	// http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n*
	// http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n*
	// http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n*
	// http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy
	BusinessFunction_Class = Base + "BusinessFunction"

	// The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle
	// (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	BusinessFunction_Property = Base + "businessFunction"

	// BusinessSupport: this is a benefit for supporting businesses.
	BusinessSupport_GovernmentBenefitsType = Base + "BusinessSupport"

	// The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product,
	// or service from a seller for a price. Reciprocal of SellAction.
	BuyAction_Class = Base + "BuyAction"

	// A sub property of participant. The participant/person/organization that bought the object.
	Buyer_Property = Base + "buyer"

	// The artist that performed this album or recording.
	ByArtist_Property = Base + "byArtist"

	// Payment in advance by bank transfer, equivalent to
	// <code>http://purl.org/goodrelations/v1#ByBankTransferInAdvance</code>.
	ByBankTransferInAdvance_PaymentMethodType = Base + "ByBankTransferInAdvance"

	// Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified using either
	// [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax for byDay recurrence rules.
	ByDay_Property = Base + "byDay"

	// Payment by invoice, typically after the goods were delivered, equivalent to
	// <code>http://purl.org/goodrelations/v1#ByInvoice</code>.
	ByInvoice_PaymentMethodType = Base + "ByInvoice"

	// Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified as an [[Integer]] between
	// 1-31.
	ByMonthDay_Property = Base + "byMonthDay"

	// Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For
	// clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays
	// of a month.
	ByMonthWeek_Property = Base + "byMonthWeek"

	// Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified as an [[Integer]] between
	// 1-12. January is 1.
	ByMonth_Property = Base + "byMonth"

	// A CDCPMDRecord is a data structure representing a record in a CDC tabular data format used for hospital data
	// reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
	// definitions used as the source here.
	CDCPMDRecord_Class = Base + "CDCPMDRecord"

	// CDFormat.
	CDFormat_MusicReleaseFormatType = Base + "CDFormat"

	// Cash on Delivery (COD) payment, equivalent to <code>http://purl.org/goodrelations/v1#COD</code>.
	COD_PaymentMethodType = Base + "COD"

	// X-ray computed tomography imaging.
	CT_MedicalImagingTechnique = Base + "CT"

	// A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
	CableOrSatelliteService_Class = Base + "CableOrSatelliteService"

	// A cafe or coffee shop.
	CafeOrCoffeeShop_Class = Base + "CafeOrCoffeeShop"

	// A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify
	// people, radio and TV stations, or vehicles.
	CallSign_Property = Base + "callSign"

	// The number of calories.
	Calories_Property = Base + "calories"

	// A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically
	// containing individual [[CampingPitch]] locations. \n\n In British English a campsite is an area, usually divided
	// into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British
	// English use of the word is synonymous with the American English expression campground. In American English the term
	// campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a
	// camper; a campground may contain many campsites (source: Wikipedia, see
	// [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n See also the dedicated
	// [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
	Campground_Class = Base + "Campground"

	// A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger
	// camping site, or [[Campground]].\n\n In British English a campsite, or campground, is an area, usually divided into
	// a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English
	// use of the word is synonymous with the American English expression campground. In American English the term
	// campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a
	// camper; a campground may contain many campsites. (Source: Wikipedia, see
	// [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite).)\n\n See also the dedicated
	// [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
	CampingPitch_Class = Base + "CampingPitch"

	// A canal, like the Panama Canal.
	Canal_Class = Base + "Canal"

	// The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n*
	// [[ConfirmAction]]: The antonym of CancelAction.
	CancelAction_Class = Base + "CancelAction"

	// A sub property of object. The candidate subject of this action.
	Candidate_Property = Base + "candidate"

	// The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and
	// indicate the [[encodingFormat]].
	Caption_Property = Base + "caption"

	// A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
	CarUsageType_Class = Base + "CarUsageType"

	// A car is a wheeled, self-powered motor vehicle used for transportation.
	Car_Class = Base + "Car"

	// The number of grams of carbohydrates.
	CarbohydrateContent_Property = Base + "carbohydrateContent"

	// Cardiovascular system assessment with clinical examination.
	CardiovascularExam_PhysicalExam = Base + "CardiovascularExam"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of heart and
	// vasculature.
	Cardiovascular_MedicalSpecialty = Base + "Cardiovascular"

	// The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\n\nTypical unit
	// code(s): LTR for liters, FTQ for cubic foot/feet\n\nNote: You can use [[minValue]] and [[maxValue]] to indicate
	// ranges.
	CargoVolume_Property = Base + "cargoVolume"

	// Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific
	// carrier network).
	CarrierRequirements_Property = Base + "carrierRequirements"

	// 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
	Carrier_Property = Base + "carrier"

	// A case series (also known as a clinical series) is a medical research study that tracks patients with a known
	// exposure given similar treatment or examines their medical records for exposure and outcome. A case series can be
	// retrospective or prospective and usually involves a smaller number of patients than the more powerful case-control
	// studies or randomized controlled trials. Case series may be consecutive or non-consecutive, depending on whether
	// all cases presenting to the reporting authors over a period of time were included, or only a selection.
	CaseSeries_MedicalObservationalStudyDesign = Base + "CaseSeries"

	// A cardholder benefit that pays the cardholder a small percentage of their net expenditures.
	CashBack_Property = Base + "cashBack"

	// Payment using cash, on premises, equivalent to <code>http://purl.org/goodrelations/v1#Cash</code>.
	Cash_PaymentMethodType = Base + "Cash"

	// A casino.
	Casino_Class = Base + "Casino"

	// CassetteFormat.
	CassetteFormat_MusicReleaseFormatType = Base + "CassetteFormat"

	// The catalog number for the release.
	CatalogNumber_Property = Base + "catalogNumber"

	// A data catalog which contains this dataset.
	Catalog_Property = Base + "catalog"

	// A set of Category Code values.
	CategoryCodeSet_Class = Base + "CategoryCodeSet"

	// A Category Code.
	CategoryCode_Class = Base + "CategoryCode"

	// A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	Category_Property = Base + "category"

	// A Catholic church.
	CatholicChurch_Class = Base + "CatholicChurch"

	// The condition, complication, symptom, sign, etc. caused.
	CauseOf_Property = Base + "causeOf"

	// Information about the causes and main actions that gave rise to the topic.
	CausesHealthAspect_HealthAspectEnumeration = Base + "CausesHealthAspect"

	// A sub property of recipient. The recipient copied on a message.
	CcRecipient_Property = Base + "ccRecipient"

	// A graveyard.
	Cemetery_Class = Base + "Cemetery"

	// Specifies that a certification is active.
	CertificationActive_CertificationStatusEnumeration = Base + "CertificationActive"

	// Identifier of a certification instance (as registered with an independent certification body). Typically this
	// identifier can be used to consult and verify the certification instance. See also
	// [gs1:certificationIdentification](https://www.gs1.org/voc/certificationIdentification).
	CertificationIdentification_Property = Base + "certificationIdentification"

	// Specifies that a certification is inactive (no longer in effect).
	CertificationInactive_CertificationStatusEnumeration = Base + "CertificationInactive"

	// Rating of a certification instance (as defined by an independent certification body). Typically this rating can be
	// used to rate the level to which the requirements of the certification instance are fulfilled. See also
	// [gs1:certificationValue](https://www.gs1.org/voc/certificationValue).
	CertificationRating_Property = Base + "certificationRating"

	// Enumerates the different statuses of a Certification (Active and Inactive).
	CertificationStatusEnumeration_Class = Base + "CertificationStatusEnumeration"

	// Indicates the current status of a certification: active or inactive. See also
	// [gs1:certificationStatus](https://www.gs1.org/voc/certificationStatus).
	CertificationStatus_Property = Base + "certificationStatus"

	// A Certification is an official and authoritative statement about a subject, for example a product, service, person,
	// or organization. A certification is typically issued by an indendent certification body, for example a professional
	// organization or government. It formally attests certain characteristics about the subject, for example
	// Organizations can be ISO certified, Food products can be certified Organic or Vegan, a Person can be a certified
	// professional, a Place can be certified for food processing. There are certifications for many domains: regulatory,
	// organizational, recycling, food, efficiency, educational, ecological, etc. A certification is a form of credential,
	// as are accreditations and licenses. Mapped from the
	// [gs1:CertificationDetails](https://www.gs1.org/voc/CertificationDetails) class in the GS1 Web Vocabulary.
	Certification_Class = Base + "Certification"

	// One of the sections into which a book is divided. A chapter usually has a section number or a name.
	Chapter_Class = Base + "Chapter"

	// A piece of data that represents a particular aspect of a fictional character (skill, power, character points,
	// advantage, disadvantage).
	CharacterAttribute_Property = Base + "characterAttribute"

	// The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
	CharacterName_Property = Base + "characterName"

	// Fictional person connected with a creative work.
	Character_Property = Base + "character"

	// CharitableIncorporatedOrganization: Non-profit type referring to a Charitable Incorporated Organization (UK).
	CharitableIncorporatedOrganization_UKNonprofitType = Base + "CharitableIncorporatedOrganization"

	// Cheat codes to the game.
	CheatCode_Property = Base + "cheatCode"

	// An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or
	// state.
	CheckAction_Class = Base + "CheckAction"

	// The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for
	// a previously reserved service (e.g. flight check-in) or at a place (e.g. hotel), possibly resulting in a result
	// (boarding pass, etc).\n\nRelated actions:\n\n* [[CheckOutAction]]: The antonym of CheckInAction.\n*
	// [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a
	// previously reserved service.\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is
	// informing/confirming the *start* of a previously reserved service rather than its validity/existence.
	CheckInAction_Class = Base + "CheckInAction"

	// Payment in advance by sending a check, equivalent to <code>http://purl.org/goodrelations/v1#CheckInAdvance</code>.
	CheckInAdvance_PaymentMethodType = Base + "CheckInAdvance"

	// The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved
	// service (e.g. flight check-in) or place (e.g. hotel).\n\nRelated actions:\n\n* [[CheckInAction]]: The antonym of
	// CheckOutAction.\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is
	// informing/confirming the end of a previously reserved service.\n* [[CancelAction]]: Unlike CancelAction,
	// CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
	CheckOutAction_Class = Base + "CheckOutAction"

	// The earliest someone may check into a lodging establishment.
	CheckinTime_Property = Base + "checkinTime"

	// A URL template (RFC 6570) for a checkout page for an offer. This approach allows merchants to specify a URL for
	// online checkout of the offered product, by interpolating parameters such as the logged in user ID, product ID,
	// quantity, discount code etc. Parameter naming and standardization are not specified here.
	CheckoutPageURLTemplate_Property = Base + "checkoutPageURLTemplate"

	// Web page type: Checkout page.
	CheckoutPage_Class = Base + "CheckoutPage"

	// The latest someone may check out of a lodging establishment.
	CheckoutTime_Property = Base + "checkoutTime"

	// The chemical composition describes the identity and relative ratio of the chemical elements that make up the
	// substance.
	ChemicalComposition_Property = Base + "chemicalComposition"

	// A role played by the BioChemEntity within a chemical context.
	ChemicalRole_Property = Base + "chemicalRole"

	// A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same
	// type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
	ChemicalSubstance_Class = Base + "ChemicalSubstance"

	// A Childcare center.
	ChildCare_Class = Base + "ChildCare"

	// Maximal age of the child.
	ChildMaxAge_Property = Base + "childMaxAge"

	// Minimal age of the child.
	ChildMinAge_Property = Base + "childMinAge"

	// Closest child taxa of the taxon in question.
	ChildTaxon_Property = Base + "childTaxon"

	// A child of the person.
	Children_Property = Base + "children"

	// Event type: Children's event.
	ChildrensEvent_Class = Base + "ChildrensEvent"

	// A system of medicine focused on the relationship between the body's structure, mainly the spine, and its
	// functioning.
	Chiropractic_MedicineSystem = Base + "Chiropractic"

	// The number of milligrams of cholesterol.
	CholesterolContent_Property = Base + "cholesterolContent"

	// The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
	ChooseAction_Class = Base + "ChooseAction"

	// A church.
	Church_Class = Base + "Church"

	// A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is
	// expressed as a pair followed by a radius in meters.
	Circle_Property = Base + "circle"

	// A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
	Citation_Property = Base + "citation"

	// A city hall.
	CityHall_Class = Base + "CityHall"

	// A city or town.
	City_Class = Base + "City"

	// A public structure, such as a town hall or concert hall.
	CivicStructure_Class = Base + "CivicStructure"

	// For a [[Claim]] interpreted from [[MediaObject]] content, the [[interpretedAsClaim]] property can be used to
	// indicate a claim contained, implied or refined from the content of a [[MediaObject]].
	ClaimInterpreter_Property = Base + "claimInterpreter"

	// A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
	ClaimReview_Class = Base + "ClaimReview"

	// A short summary of the specific claims reviewed in a ClaimReview.
	ClaimReviewed_Property = Base + "claimReviewed"

	// A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a
	// [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known
	// claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a
	// [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In
	// practice, many claims are better understood in the context in which they appear or the interpretations provided by
	// claim reviews. Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a
	// [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]]. At this time, Schema.org does not define
	// any types of relationship between claims. This is a natural area for future exploration.
	Claim_Class = Base + "Claim"

	// A class, also often called a 'Type'; equivalent to rdfs:Class.
	Class_Class = Base + "Class"

	// Represents the cleaning fee part of the total price for an offered product, for example a vacation rental.
	CleaningFee_PriceComponentTypeEnumeration = Base + "CleaningFee"

	// Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and
	// biological effects (pharmacodynamics, pD).
	ClincalPharmacology_Property = Base + "clincalPharmacology"

	// Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and
	// biological effects (pharmacodynamics, pD).
	ClinicalPharmacology_Property = Base + "clinicalPharmacology"

	// Medical clinicians, including practicing physicians and other medical professionals involved in clinical practice.
	Clinician_MedicalAudienceType = Base + "Clinician"

	// Position of the clip within an ordered group of clips.
	ClipNumber_Property = Base + "clipNumber"

	// A short TV or radio program or a segment/part of a program.
	Clip_Class = Base + "Clip"

	// The closing hour of the place or service on the given day(s) of the week.
	Closes_Property = Base + "closes"

	// A clothing store.
	ClothingStore_Class = Base + "ClothingStore"

	// Play mode: CoOp. Co-operative games, where you play on the same team with friends.
	CoOp_GamePlayMode = Base + "CoOp"

	// A person that acts in a coaching role for a sports team.
	Coach_Property = Base + "coach"

	// Link to the repository where the un-compiled, human readable code and related code is located (SVN, GitHub,
	// CodePlex).
	CodeRepository_Property = Base + "codeRepository"

	// What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	CodeSampleType_Property = Base + "codeSampleType"

	// A short textual code that uniquely identifies the value.
	CodeValue_Property = Base + "codeValue"

	// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts,
	// templates.
	Code_Class = Base + "Code"

	// A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH,
	// SNOMED-CT, RxNorm, etc.
	Code_Property = Base + "code"

	// The coding system, e.g. 'ICD-10'.
	CodingSystem_Property = Base + "codingSystem"

	// Also known as a panel study. A cohort study is a form of longitudinal study used in medicine and social science. It
	// is one type of study design and should be compared with a cross-sectional study. A cohort is a group of people who
	// share a common characteristic or experience within a defined period (e.g., are born, leave school, lose their job,
	// are exposed to a drug or a vaccine, etc.). The comparison group may be the general population from which the cohort
	// is drawn, or it may be another cohort of persons thought to have had little or no exposure to the substance under
	// investigation, but otherwise similar. Alternatively, subgroups within the cohort may be compared with each other.
	CohortStudy_MedicalObservationalStudyDesign = Base + "CohortStudy"

	// A colleague of the person.
	Colleague_Property = Base + "colleague"

	// A colleague of the person.
	Colleagues_Property = Base + "colleagues"

	// Web page type: Collection page.
	CollectionPage_Class = Base + "CollectionPage"

	// The number of items in the [[Collection]].
	CollectionSize_Property = Base + "collectionSize"

	// A collection of items, e.g. creative works or products.
	Collection_Class = Base + "Collection"

	// A sub property of object. The collection target of the action.
	Collection_Property = Base + "collection"

	// A college, university, or other third-level educational institution.
	CollegeOrUniversity_Class = Base + "CollegeOrUniversity"

	// A color swatch image, visualizing the color of a [[Product]]. Should match the textual description specified in the
	// [[color]] property. This can be a URL or a fully described ImageObject.
	ColorSwatch_Property = Base + "colorSwatch"

	// The color of the product.
	Color_Property = Base + "color"

	// The individual who adds color to inked drawings.
	Colorist_Property = Base + "colorist"

	// A comedy club.
	ComedyClub_Class = Base + "ComedyClub"

	// Event type: Comedy event.
	ComedyEvent_Class = Base + "ComedyEvent"

	// The artwork on the cover of a comic.
	ComicCoverArt_Class = Base + "ComicCoverArt"

	// Individual comic issues are serially published as part of a larger series. For the sake of consistency, even
	// one-shot issues belong to a series comprised of a single issue. All comic issues can be uniquely identified by: the
	// combination of the name and volume number of the series to which the issue belongs; the issue number; and the
	// variant description of the issue (if any).
	ComicIssue_Class = Base + "ComicIssue"

	// A sequential publication of comic stories under a unifying title, for example "The Amazing Spider-Man" or "Groo the
	// Wanderer".
	ComicSeries_Class = Base + "ComicSeries"

	// The term "story" is any indivisible, re-printable unit of a comic, including the interior stories, covers, and
	// backmatter. Most comics have at least two stories: a cover (ComicCoverArt) and an interior story.
	ComicStory_Class = Base + "ComicStory"

	// The act of generating a comment about a subject.
	CommentAction_Class = Base + "CommentAction"

	// The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable
	// to works published in Web sites with commenting system; additional comments may exist elsewhere.
	CommentCount_Property = Base + "commentCount"

	// Permission to add comments to the document.
	CommentPermission_DigitalDocumentPermissionType = Base + "CommentPermission"

	// The text of the UserComment.
	CommentText_Property = Base + "commentText"

	// The time at which the UserComment was made.
	CommentTime_Property = Base + "commentTime"

	// A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]]
	// property, and its topic via [[about]], properties shared with all CreativeWorks.
	Comment_Class = Base + "Comment"

	// Comments, typically from users.
	Comment_Property = Base + "comment"

	// The act of conveying information to another person via a communication medium (instrument) such as speech, email,
	// or telephone conversation.
	CommunicateAction_Class = Base + "CommunicateAction"

	// A field of public health focusing on improving health characteristics of a defined population in relation with
	// their geographical or environment areas.
	CommunityHealth_MedicalSpecialty = Base + "CommunityHealth"

	// The official registration number of a business including the organization that issued it such as Company House or
	// Chamber of Commerce.
	CompanyRegistration_Property = Base + "companyRegistration"

	// Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to
	// do something such as earn an Educational Occupational Credential or understand a LearningResource.
	CompetencyRequired_Property = Base + "competencyRequired"

	// A competitor in a sports event.
	Competitor_Property = Base + "competitor"

	// CompilationAlbum.
	CompilationAlbum_MusicAlbumProductionType = Base + "CompilationAlbum"

	// A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in
	// the feed. This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC
	// 5005](https://tools.ietf.org/html/rfc5005), for example (and as defined for Atom), when using data from a feed that
	// represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer
	// entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be
	// safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current
	// items.
	CompleteDataFeed_Class = Base + "CompleteDataFeed"

	// An action that has already taken place.
	CompletedActionStatus_ActionStatusType = Base + "CompletedActionStatus"

	// Completed.
	Completed_MedicalStudyStatus = Base + "Completed"

	// The person or organization who wrote a composition, or who is the composer of a work performed at some event.
	Composer_Property = Base + "composer"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeCapture">composite capture</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	CompositeCaptureDigitalSource_IPTCDigitalSourceEnumeration = Base + "CompositeCaptureDigitalSource"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	CompositeDigitalSource_IPTCDigitalSourceEnumeration = Base + "CompositeDigitalSource"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeSynthetic">composite
	// synthetic</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a>
	// vocabulary.
	CompositeSyntheticDigitalSource_IPTCDigitalSourceEnumeration = Base + "CompositeSyntheticDigitalSource"

	// Content coded as '<a
	// href="https://cv.iptc.org/newscodes/digitalsourcetype/compositeWithTrainedAlgorithmicMedia">composite with trained
	// algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source
	// type</a> vocabulary.
	CompositeWithTrainedAlgorithmicMediaDigitalSource_IPTCDigitalSourceEnumeration = Base + "CompositeWithTrainedAlgorithmicMediaDigitalSource"

	// A compound price specification is one that bundles multiple prices that all apply in combination for different
	// dimensions of consumption. Use the name property of the attached unit price specification for indicating the
	// dimension of a price component (e.g. "electricity" or "final cleaning").
	CompoundPriceSpecification_Class = Base + "CompoundPriceSpecification"

	// Specifying something physically contained by something else. Typically used here for the underlying anatomical
	// structures, such as organs, that comprise the anatomical system.
	ComprisedOf_Property = Base + "comprisedOf"

	// This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer
	// representations. Natural languages are best represented with the [[Language]] type.
	ComputerLanguage_Class = Base + "ComputerLanguage"

	// A computer store.
	ComputerStore_Class = Base + "ComputerStore"

	// Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items
	// such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a
	// general Web access control mechanism. It is expressed only in natural language.\n\nFor example "Available by
	// appointment from the Reading Room" or "Accessible only from logged-in accounts ".
	ConditionsOfAccess_Property = Base + "conditionsOfAccess"

	// The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n*
	// [[CancelAction]]: The antonym of ConfirmAction.
	ConfirmAction_Class = Base + "ConfirmAction"

	// A number that confirms the given order or payment has been received.
	ConfirmationNumber_Property = Base + "confirmationNumber"

	// Other anatomical structures to which this structure is connected.
	ConnectedTo_Property = Base + "connectedTo"

	// A Consortium is a membership [[Organization]] whose members are typically Organizations.
	Consortium_Class = Base + "Consortium"

	// The ConstraintNode type is provided to support usecases in which a node in a structured data graph is described
	// with properties which appear to describe a single entity, but are being used in a situation where they serve a more
	// abstract purpose. A [[ConstraintNode]] can be described using [[constraintProperty]] and [[numConstraints]]. These
	// constraint properties can serve a variety of purposes, and their values may sometimes be understood to indicate
	// sets of possible values rather than single, exact and specific values.
	ConstraintNode_Class = Base + "ConstraintNode"

	// Indicates a property used as a constraint. For example, in the definition of a [[StatisticalVariable]]. The value
	// is a property, either from within Schema.org or from other compatible (e.g. RDF) systems such as DataCommons.org or
	// Wikidata.org.
	ConstraintProperty_Property = Base + "constraintProperty"

	// The act of ingesting information/resources/food.
	ConsumeAction_Class = Base + "ConsumeAction"

	// An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
	ContactOption_Property = Base + "contactOption"

	// Web page type: Contact page.
	ContactPage_Class = Base + "ContactPage"

	// Enumerated options related to a ContactPoint.
	ContactPointOption_Class = Base + "ContactPointOption"

	// A contact point&#x2014;for example, a Customer Complaints department.
	ContactPoint_Class = Base + "ContactPoint"

	// A contact point for a person or organization.
	ContactPoint_Property = Base + "contactPoint"

	// A contact point for a person or organization.
	ContactPoints_Property = Base + "contactPoints"

	// A person or organization can have different contact points, for different purposes. For example, a sales contact
	// point, a PR contact point and so on. This property is used to specify the kind of contact point.
	ContactType_Property = Base + "contactType"

	// A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC
	// technology.
	ContactlessPayment_Property = Base + "contactlessPayment"

	// Content about contagion mechanisms and contagiousness information over the topic.
	ContagiousnessHealthAspect_HealthAspectEnumeration = Base + "ContagiousnessHealthAspect"

	// The basic containment relation between a place and one that contains it.
	ContainedInPlace_Property = Base + "containedInPlace"

	// The basic containment relation between a place and one that contains it.
	ContainedIn_Property = Base + "containedIn"

	// The basic containment relation between a place and another that it contains.
	ContainsPlace_Property = Base + "containsPlace"

	// A season that is part of the media series.
	ContainsSeason_Property = Base + "containsSeason"

	// The location depicted or described in the content. For example, the location in a photograph or painting.
	ContentLocation_Property = Base + "contentLocation"

	// Official rating of a piece of content&#x2014;for example, 'MPAA PG-13'.
	ContentRating_Property = Base + "contentRating"

	// The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a
	// particular moment within an Event.
	ContentReferenceTime_Property = Base + "contentReferenceTime"

	// File size in (mega/kilo)bytes.
	ContentSize_Property = Base + "contentSize"

	// The supported content type(s) for an EntryPoint response.
	ContentType_Property = Base + "contentType"

	// Actual bytes of the media object, for example the image file or video file.
	ContentUrl_Property = Base + "contentUrl"

	// One of the continents (for example, Europe or Africa).
	Continent_Class = Base + "Continent"

	// A contraindication for this therapy.
	Contraindication_Property = Base + "contraindication"

	// A secondary contributor to the CreativeWork or Event.
	Contributor_Property = Base + "contributor"

	// An agent controls a device or application.
	ControlAction_Class = Base + "ControlAction"

	// A convenience store.
	ConvenienceStore_Class = Base + "ConvenienceStore"

	// One or more messages between organizations or people on a particular topic. Individual messages can be linked to
	// the conversation with isPartOf or hasPart properties.
	Conversation_Class = Base + "Conversation"

	// The act of producing/preparing food.
	CookAction_Class = Base + "CookAction"

	// The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	CookTime_Property = Base + "cookTime"

	// The method of cooking, such as Frying, Steaming, ...
	CookingMethod_Property = Base + "cookingMethod"

	// An organization that is a joint project of multiple organizations or persons.
	Cooperative_Class = Base + "Cooperative"

	// The party holding the legal copyright to the CreativeWork.
	CopyrightHolder_Property = Base + "copyrightHolder"

	// Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the
	// owner of the copyright for the Work.
	CopyrightNotice_Property = Base + "copyrightNotice"

	// The year during which the claimed copyright for the CreativeWork was first asserted.
	CopyrightYear_Property = Base + "copyrightYear"

	// Organization: A business corporation.
	Corporation_Class = Base + "Corporation"

	// A [[comment]] that corrects [[CreativeWork]].
	CorrectionComment_Class = Base + "CorrectionComment"

	// Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
	Correction_Property = Base + "correction"

	// For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s)
	// disclosure and correction policy for errors.
	CorrectionsPolicy_Property = Base + "correctionsPolicy"

	// The category of cost, such as wholesale, retail, reimbursement cap, etc.
	CostCategory_Property = Base + "costCategory"

	// The currency (in 3-letter) of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
	CostCurrency_Property = Base + "costCurrency"

	// Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
	CostOrigin_Property = Base + "costOrigin"

	// The cost per unit of the drug.
	CostPerUnit_Property = Base + "costPerUnit"

	// Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2
	// country code.
	CountriesNotSupported_Property = Base + "countriesNotSupported"

	// Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country
	// code.
	CountriesSupported_Property = Base + "countriesSupported"

	// The place where the product was assembled.
	CountryOfAssembly_Property = Base + "countryOfAssembly"

	// The place where the item (typically [[Product]]) was last processed and tested before importation.
	CountryOfLastProcessing_Property = Base + "countryOfLastProcessing"

	// The country of origin of something, including products as well as creative works such as movie and TV content. In
	// the case of TV and movie, this would be the country of the principle offices of the production company or
	// individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general
	// guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the case of
	// products, the country of origin of the product. The exact interpretation of this may vary by context and product
	// type, and cannot be fully enumerated here.
	CountryOfOrigin_Property = Base + "countryOfOrigin"

	// A country.
	Country_Class = Base + "Country"

	// The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).
	CourseCode_Property = Base + "courseCode"

	// An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or
	// location or through different media or modes of study or to a specific section of students.
	CourseInstance_Class = Base + "CourseInstance"

	// The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online",
	// "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term
	// from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous).
	CourseMode_Property = Base + "courseMode"

	// Requirements for taking the Course. May be completion of another [[Course]] or a textual description like
	// "permission of instructor". Requirements may be a pre-requisite competency, referenced using [[AlignmentObject]].
	CoursePrerequisites_Property = Base + "coursePrerequisites"

	// Represents the length and pace of a course, expressed as a [[Schedule]].
	CourseSchedule_Property = Base + "courseSchedule"

	// The amount of work expected of students taking the course, often provided as a figure per week or per month, and
	// may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study
	// per week".
	CourseWorkload_Property = Base + "courseWorkload"

	// A description of an educational course which may be offered as distinct instances which take place at different
	// times or take place at different locations, or be offered through different media or modes of study. An educational
	// course is a sequence of one or more educational events and/or creative works which aims to build knowledge,
	// competence or ability of learners.
	Course_Class = Base + "Course"

	// A sub property of location. The course where this action was taken.
	Course_Property = Base + "course"

	// A courthouse.
	Courthouse_Class = Base + "Courthouse"

	// The artwork on the outer surface of a CreativeWork.
	CoverArt_Class = Base + "CoverArt"

	// The time when the live blog will stop covering the Event. Note that coverage may continue after the Event
	// concludes.
	CoverageEndTime_Property = Base + "coverageEndTime"

	// The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start
	// time. The LiveBlogPosting may also be created before coverage begins.
	CoverageStartTime_Property = Base + "coverageStartTime"

	// A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus disease is available. If
	// the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other non-medical
	// organization, multiple types can be listed. This makes it easier to re-use existing schema.org information about
	// that place, e.g. contact info, address, opening hours. Note that in an emergency, such information may not always
	// be reliable.
	CovidTestingFacility_Class = Base + "CovidTestingFacility"

	// The act of deliberately creating/producing/generating/building a result out of the agent.
	CreateAction_Class = Base + "CreateAction"

	// A media season, e.g. TV, radio, video game etc.
	CreativeWorkSeason_Class = Base + "CreativeWorkSeason"

	// A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind.
	// CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a
	// general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials
	// (written e.g. books and periodicals, or media such as TV, radio and games).\n\nSpecific subtypes are available for
	// describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]].
	// In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts.
	// The general CreativeWorkSeries type serves largely just to organize these more specific and practical
	// subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the
	// containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply
	// properties of the series parts to the series as a whole wherever they seem appropriate.
	CreativeWorkSeries_Class = Base + "CreativeWorkSeries"

	// The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft,
	// Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
	CreativeWorkStatus_Property = Base + "creativeWorkStatus"

	// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
	CreativeWork_Class = Base + "CreativeWork"

	// The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
	Creator_Property = Base + "creator"

	// The category or type of credential being described, for example "degree”, “certificate”, “badge”, or more specific
	// term.
	CredentialCategory_Property = Base + "credentialCategory"

	// A card payment method of a particular brand or name. Used to mark up a particular payment method and/or the
	// financial product/service that supplies the card account.\n\nCommonly used values:\n\n*
	// http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n*
	// http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n*
	// http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA
	CreditCard_Class = Base + "CreditCard"

	// Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
	CreditText_Property = Base + "creditText"

	// The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to
	// "Stefani Germanotta Band", but by Lady Gaga.
	CreditedTo_Property = Base + "creditedTo"

	// A crematorium.
	Crematorium_Class = Base + "Crematorium"

	// A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its
	// reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other
	// independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler,
	// casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type.
	// Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic
	// reviews that originate from third-party sources.
	CriticReview_Class = Base + "CriticReview"

	// Studies carried out on pre-existing data (usually from 'snapshot' surveys), such as that collected by the Census
	// Bureau. Sometimes called Prevalence Studies.
	CrossSectional_MedicalObservationalStudyDesign = Base + "CrossSectional"

	// Text representing a CSS selector.
	CssSelectorType_Class = Base + "CssSelectorType"

	// A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches
	// within a page can constitute a single conceptual "Web page element".
	CssSelector_Property = Base + "cssSelector"

	// The currency accepted.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),
	// e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g.
	// "BTC"; well known names for [Local Exchange Trading
	// Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca
	// HOUR".
	CurrenciesAccepted_Property = Base + "currenciesAccepted"

	// A service to convert funds from one currency to another currency.
	CurrencyConversionService_Class = Base + "CurrencyConversionService"

	// The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency
	// format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker
	// symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names
	// for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other
	// currency types, e.g. "Ithaca HOUR".
	Currency_Property = Base + "currency"

	// The current price of a currency.
	CurrentExchangeRate_Property = Base + "currentExchangeRate"

	// The type of return fees if the product is returned due to customer remorse.
	CustomerRemorseReturnFees_Property = Base + "customerRemorseReturnFees"

	// The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due
	// to customer remorse.
	CustomerRemorseReturnLabelSource_Property = Base + "customerRemorseReturnLabelSource"

	// The amount of shipping costs if a product is returned due to customer remorse. Applicable when property
	// [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].
	CustomerRemorseReturnShippingFeesAmount_Property = Base + "customerRemorseReturnShippingFeesAmount"

	// Party placing the order or paying the invoice.
	Customer_Property = Base + "customer"

	// Order cutoff time allows merchants to describe the time after which they will no longer process orders received on
	// that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property
	// is expected to be most typically used via the [[ShippingRateSettings]] publication pattern. The time is indicated
	// using the ISO-8601 Time format, e.g. "23:30:00-05:00" would represent 6:30 pm Eastern Standard Time (EST) which is
	// 5 hours behind Coordinated Universal Time (UTC).
	CutoffTime_Property = Base + "cutoffTime"

	// collectiondate - Date for which patient counts are reported.
	CvdCollectionDate_Property = Base + "cvdCollectionDate"

	// Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]] to identify the
	// facility. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdFacilityCounty_Property = Base + "cvdFacilityCounty"

	// Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]] to indicate the county.
	// To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdFacilityId_Property = Base + "cvdFacilityId"

	// numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
	CvdNumBedsOcc_Property = Base + "cvdNumBedsOcc"

	// numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used
	// for inpatients.
	CvdNumBeds_Property = Base + "cvdNumBeds"

	// numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow
	// location.
	CvdNumC19Died_Property = Base + "cvdNumC19Died"

	// numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or
	// confirmed COVID-19 14 or more days after hospitalization.
	CvdNumC19HOPats_Property = Base + "cvdNumC19HOPats"

	// numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or
	// confirmed COVID-19.
	CvdNumC19HospPats_Property = Base + "cvdNumC19HospPats"

	// numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have
	// suspected or confirmed COVID-19 and are on a mechanical ventilator.
	CvdNumC19MechVentPats_Property = Base + "cvdNumC19MechVentPats"

	// numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED
	// or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
	CvdNumC19OFMechVentPats_Property = Base + "cvdNumC19OFMechVentPats"

	// numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow
	// location awaiting an inpatient bed.
	CvdNumC19OverflowPats_Property = Base + "cvdNumC19OverflowPats"

	// numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
	CvdNumICUBedsOcc_Property = Base + "cvdNumICUBedsOcc"

	// numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
	CvdNumICUBeds_Property = Base + "cvdNumICUBeds"

	// numtotbeds - ALL HOSPITAL BEDS: Total number of all inpatient and outpatient beds, including all staffed, ICU,
	// licensed, and overflow (surge) beds used for inpatients or outpatients.
	CvdNumTotBeds_Property = Base + "cvdNumTotBeds"

	// numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
	CvdNumVentUse_Property = Base + "cvdNumVentUse"

	// numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
	CvdNumVent_Property = Base + "cvdNumVent"

	// An alternative, closely-related condition typically considered later in the differential diagnosis process along
	// with the signs that are used to distinguish it.
	DDxElement_Class = Base + "DDxElement"

	// DJMixAlbum.
	DJMixAlbum_MusicAlbumProductionType = Base + "DJMixAlbum"

	// DVDFormat.
	DVDFormat_MusicReleaseFormatType = Base + "DVDFormat"

	// Indicates that the item is damaged.
	DamagedCondition_OfferItemCondition = Base + "DamagedCondition"

	// Event type: A social dance.
	DanceEvent_Class = Base + "DanceEvent"

	// A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
	DanceGroup_Class = Base + "DanceGroup"

	// The item is dangerous and requires careful handling and/or special training of the user. See also the [UN Model
	// Classification](https://unece.org/DAM/trans/danger/publi/unrec/rev17/English/02EREv17_Part2.pdf) defining the 9
	// classes of dangerous goods such as explosives, gases, flammables, and more.
	DangerousGoodConsideration_AdultOrientedEnumeration = Base + "DangerousGoodConsideration"

	// A collection of datasets.
	DataCatalog_Class = Base + "DataCatalog"

	// All or part of a [[Dataset]] in downloadable form.
	DataDownload_Class = Base + "DataDownload"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/dataDrivenMedia">data driven media</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	DataDrivenMediaDigitalSource_IPTCDigitalSourceEnumeration = Base + "DataDrivenMediaDigitalSource"

	// An item within a data feed. Data feeds may have many elements.
	DataFeedElement_Property = Base + "dataFeedElement"

	// A single item within a larger data feed.
	DataFeedItem_Class = Base + "DataFeedItem"

	// A single feed providing structured information about one or more entities or topics.
	DataFeed_Class = Base + "DataFeed"

	// The basic data types such as Integers, Strings, etc.
	DataType_Class = Base + "DataType"

	// The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time
	// interval format).
	DatasetTimeInterval_Property = Base + "datasetTimeInterval"

	// A body of structured information describing some topic(s) of interest.
	Dataset_Class = Base + "Dataset"

	// A dataset contained in this catalog.
	Dataset_Property = Base + "dataset"

	// The date on which the CreativeWork was created or the item was added to a DataFeed.
	DateCreated_Property = Base + "dateCreated"

	// The datetime the item was removed from the DataFeed.
	DateDeleted_Property = Base + "dateDeleted"

	// The date the ticket was issued.
	DateIssued_Property = Base + "dateIssued"

	// The date on which the CreativeWork was most recently modified or when the item's entry was modified within a
	// DataFeed.
	DateModified_Property = Base + "dateModified"

	// Publication date of an online listing.
	DatePosted_Property = Base + "datePosted"

	// Date of first publication or broadcast. For example the date a [[CreativeWork]] was broadcast or a
	// [[Certification]] was issued.
	DatePublished_Property = Base + "datePublished"

	// The date/time at which the message has been read by the recipient if a single recipient exists.
	DateRead_Property = Base + "dateRead"

	// The date/time the message was received if a single recipient exists.
	DateReceived_Property = Base + "dateReceived"

	// The date/time at which the message was sent.
	DateSent_Property = Base + "dateSent"

	// A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO
	// 8601).
	DateTime_Class = Base + "DateTime"

	// The date of the first registration of the vehicle with the respective public authorities.
	DateVehicleFirstRegistered_Property = Base + "dateVehicleFirstRegistered"

	// A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	Date_Class = Base + "Date"

	// A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could
	// represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by
	// [[MonetaryAmount]], use of that type is recommended.
	DatedMoneySpecification_Class = Base + "DatedMoneySpecification"

	// A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that
	// describes where and when the story was written or filed though the date is often omitted. Sometimes only a
	// placename is provided. Structured representations of dateline-related information can also be expressed more
	// explicitly using [[locationCreated]] (which represents where a work was created, e.g. where a news report was
	// written). For location depicted or described in the content, use [[contentLocation]]. Dateline summaries are
	// oriented more towards human readers than towards automated processing, and can vary substantially. Some examples:
	// "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington",
	// "Beijing/Moscow", "QUEZON CITY, Philippines".
	Dateline_Property = Base + "dateline"

	// The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.
	// Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]],
	// [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]);
	// these have now been integrated directly into schema.org.
	DayOfWeek_Class = Base + "DayOfWeek"

	// The day of the week for which these opening hours are valid.
	DayOfWeek_Property = Base + "dayOfWeek"

	// A day spa.
	DaySpa_Class = Base + "DaySpa"

	// The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
	DeactivateAction_Class = Base + "DeactivateAction"

	// Date of death.
	DeathDate_Property = Base + "deathDate"

	// The place where the person died.
	DeathPlace_Property = Base + "deathPlace"

	// Content coded 'missing context' in a [[MediaReview]], considered in the context of how it was published or shared.
	// For a [[VideoObject]] to be 'missing context': Presenting unaltered video in an inaccurate manner that
	// misrepresents the footage. For example, using incorrect dates or locations, altering the transcript or sharing
	// brief clips from a longer video to mislead viewers. (A video rated 'original' can also be missing context.) For an
	// [[ImageObject]] to be 'missing context': Presenting unaltered images in an inaccurate manner to misrepresent the
	// image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a
	// different time or place. (An image rated 'original' can also be missing context.) For an [[ImageObject]] with
	// embedded text to be 'missing context': An unaltered image presented in an inaccurate manner to misrepresent the
	// image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a
	// different time or place. (An 'original' image with inaccurate text would generally fall in this category.) For an
	// [[AudioObject]] to be 'missing context': Unaltered audio presented in an inaccurate manner that misrepresents it.
	// For example, using incorrect dates or locations, or sharing brief clips from a longer recording to mislead viewers.
	// (Audio rated “original” can also be missing context.)
	DecontextualizedContent_MediaManipulationRatingEnumeration = Base + "DecontextualizedContent"

	// The default value of the input. For properties that expect a literal, the default is a literal value, for
	// properties that expect an object, it's an ID reference to one of the current values.
	DefaultValue_Property = Base + "defaultValue"

	// A defence establishment, such as an army or navy base.
	DefenceEstablishment_Class = Base + "DefenceEstablishment"

	// A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or
	// natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.
	// Examples: a delivery destination when shopping. Region where regional pricing is configured. Requirement 1:
	// Country: US States: "NY", "CA" Requirement 2: Country: US PostalCode Set: { [94000-94585], [97000, 97999], [13000,
	// 13599]} { [12345, 12345], [78945, 78945], } Region = state, canton, prefecture, autonomous community...
	DefinedRegion_Class = Base + "DefinedRegion"

	// A set of defined terms, for example a set of categories or a classification scheme, a glossary, dictionary or
	// enumeration.
	DefinedTermSet_Class = Base + "DefinedTermSet"

	// A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject
	// classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term
	// being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the
	// definition of the term.
	DefinedTerm_Class = Base + "DefinedTerm"

	// Indicates a document for which the text is conclusively what the law says and is legally binding. (e.g. The
	// digitally signed version of an Official Journal.) Something "Definitive" is considered to be also
	// [[AuthoritativeLegalValue]].
	DefinitiveLegalValue_LegalValueLevel = Base + "DefinitiveLegalValue"

	// The act of editing a recipient by removing one of its objects.
	DeleteAction_Class = Base + "DeleteAction"

	// Destination address.
	DeliveryAddress_Property = Base + "deliveryAddress"

	// The price for the delivery of an offer using a particular delivery method.
	DeliveryChargeSpecification_Class = Base + "DeliveryChargeSpecification"

	// An event involving the delivery of an item.
	DeliveryEvent_Class = Base + "DeliveryEvent"

	// The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for
	// pickup, in case the delivery method is on site pickup.
	DeliveryLeadTime_Property = Base + "deliveryLeadTime"

	// A delivery method is a standardized procedure for transferring the product or service to the destination of
	// fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by
	// the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used
	// values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n*
	// http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n*
	// http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n*
	// http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n*
	// http://purl.org/goodrelations/v1#UPS
	DeliveryMethod_Class = Base + "DeliveryMethod"

	// A sub property of instrument. The method of delivery.
	DeliveryMethod_Property = Base + "deliveryMethod"

	// New entry added as the package passes through each leg of its journey (from shipment to final delivery).
	DeliveryStatus_Property = Base + "deliveryStatus"

	// A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for
	// publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an
	// [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their
	// different values for [[transitTimeLabel]].
	DeliveryTimeSettings_Class = Base + "DeliveryTimeSettings"

	// The total delay between the receipt of the order and the goods reaching the final customer.
	DeliveryTime_Property = Base + "deliveryTime"

	// A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an
	// organization or person to seek a certain type of goods or services. For describing demand using this type, the very
	// same properties used for Offer apply.
	Demand_Class = Base + "Demand"

	// DemoAlbum.
	DemoAlbum_MusicAlbumProductionType = Base + "DemoAlbum"

	// Indicates demo game availability, i.e. a somehow limited demonstration of the full game.
	DemoGameAvailability_GameAvailabilityEnumeration = Base + "DemoGameAvailability"

	// A dentist.
	Dentist_Class = Base + "Dentist"

	// A branch of medicine that is involved in the dental care.
	Dentistry_MedicalSpecialty = Base + "Dentistry"

	// The act of departing from a place. An agent departs from a fromLocation for a destination, optionally with
	// participants.
	DepartAction_Class = Base + "DepartAction"

	// A department store.
	DepartmentStore_Class = Base + "DepartmentStore"

	// A relationship between an organization and a department of that organization, also described as an organization
	// (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
	Department_Property = Base + "department"

	// The airport where the flight originates.
	DepartureAirport_Property = Base + "departureAirport"

	// The terminal or port from which the boat departs.
	DepartureBoatTerminal_Property = Base + "departureBoatTerminal"

	// The stop or station from which the bus departs.
	DepartureBusStop_Property = Base + "departureBusStop"

	// Identifier of the flight's departure gate.
	DepartureGate_Property = Base + "departureGate"

	// The platform from which the train departs.
	DeparturePlatform_Property = Base + "departurePlatform"

	// The station from which the train departs.
	DepartureStation_Property = Base + "departureStation"

	// Identifier of the flight's departure terminal.
	DepartureTerminal_Property = Base + "departureTerminal"

	// The expected departure time.
	DepartureTime_Property = Base + "departureTime"

	// Prerequisites needed to fulfill steps in article.
	Dependencies_Property = Base + "dependencies"

	// A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
	DepositAccount_Class = Base + "DepositAccount"

	// The depth of the item.
	Depth_Property = Base + "depth"

	// Something relating to or practicing dermatology.
	Dermatologic_MedicalSpecialty = Base + "Dermatologic"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of skin.
	Dermatology_MedicalSpecialty = Base + "Dermatology"

	// A description of the item.
	Description_Property = Base + "description"

	// Represents the broad notion of 'desktop' browsers as a Web Platform.
	DesktopWebPlatform_DigitalPlatformEnumeration = Base + "DesktopWebPlatform"

	// Device required to run the application. Used in cases where a specific make/model is required to run the
	// application.
	Device_Property = Base + "device"

	// A diet appropriate for people with diabetes.
	DiabeticDiet_RestrictedDiet = Base + "DiabeticDiet"

	// One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis
	// process.
	Diagnosis_Property = Base + "diagnosis"

	// A medical laboratory that offers on-site or off-site diagnostic services.
	DiagnosticLab_Class = Base + "DiagnosticLab"

	// A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
	DiagnosticProcedure_Class = Base + "DiagnosticProcedure"

	// A medical device used for diagnostic purposes.
	Diagnostic_MedicalDevicePurpose = Base + "Diagnostic"

	// An image containing a diagram that illustrates the structure and/or its component substructures and/or connections
	// with other structures.
	Diagram_Property = Base + "diagram"

	// Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid,
	// what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved
	// dietary guidelines.
	DietFeatures_Property = Base + "dietFeatures"

	// Dietetics and nutrition as a medical specialty.
	DietNutrition_MedicalSpecialty = Base + "DietNutrition"

	// A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
	Diet_Class = Base + "Diet"

	// A sub property of instrument. The diet used in this action.
	Diet_Property = Base + "diet"

	// A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients
	// may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ
	// tissues, glandulars and metabolites.
	DietarySupplement_Class = Base + "DietarySupplement"

	// One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis
	// typically considered later in the cognitive process whereby this medical condition is distinguished from others
	// most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or
	// diagnoses in a patient.
	DifferentialDiagnosis_Property = Base + "differentialDiagnosis"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/digitalArt">digital art</a>' using the
	// IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	DigitalArtDigitalSource_IPTCDigitalSourceEnumeration = Base + "DigitalArtDigitalSource"

	// DigitalAudioTapeFormat.
	DigitalAudioTapeFormat_MusicReleaseFormatType = Base + "DigitalAudioTapeFormat"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/digitalCapture">digital capture</a></a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	DigitalCaptureDigitalSource_IPTCDigitalSourceEnumeration = Base + "DigitalCaptureDigitalSource"

	// A type of permission which can be granted for accessing a digital document.
	DigitalDocumentPermissionType_Class = Base + "DigitalDocumentPermissionType"

	// A permission for a particular person or group to access a particular file.
	DigitalDocumentPermission_Class = Base + "DigitalDocumentPermission"

	// An electronic file or document.
	DigitalDocument_Class = Base + "DigitalDocument"

	// DigitalFormat.
	DigitalFormat_MusicReleaseFormatType = Base + "DigitalFormat"

	// Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]. It is not supposed
	// to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These
	// codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be
	// suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
	DigitalPlatformEnumeration_Class = Base + "DigitalPlatformEnumeration"

	// Indicates an IPTCDigitalSourceEnumeration code indicating the nature of the digital source(s) for some
	// [[CreativeWork]].
	DigitalSourceType_Property = Base + "digitalSourceType"

	// Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via
	// the posting website. A job posting is considered to have directApply of [[True]] if an application process for the
	// specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might
	// nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path
	// to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
	DirectApply_Property = Base + "directApply"

	// Payment in advance by direct debit from the bank, equivalent to
	// <code>http://purl.org/goodrelations/v1#DirectDebit</code>.
	DirectDebit_PaymentMethodType = Base + "DirectDebit"

	// A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors can be associated with
	// individual items or with a series, episode, clip.
	Director_Property = Base + "director"

	// A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated with individual items or
	// with a series, episode, clip.
	Directors_Property = Base + "directors"

	// DisabilitySupport: this is a benefit for disability support.
	DisabilitySupport_GovernmentBenefitsType = Base + "DisabilitySupport"

	// The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a
	// proposition, topic or theme) with participants.
	DisagreeAction_Class = Base + "DisagreeAction"

	// A sub property of description. A short description of the item used to disambiguate from other, similar items.
	// Information from other properties (in particular, name) may be necessary for the description to be useful for
	// disambiguation.
	DisambiguatingDescription_Property = Base + "disambiguatingDescription"

	// Indicates that the item has been discontinued.
	Discontinued_ItemAvailability = Base + "Discontinued"

	// Code used to redeem a discount.
	DiscountCode_Property = Base + "discountCode"

	// The currency of the discount.\n\nUse standard formats: [ISO 4217 currency
	// format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker
	// symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names
	// for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other
	// currency types, e.g. "Ithaca HOUR".
	DiscountCurrency_Property = Base + "discountCurrency"

	// Any discount applied (to an Order).
	Discount_Property = Base + "discount"

	// The act of discovering/finding an object.
	DiscoverAction_Class = Base + "DiscoverAction"

	// Specifies the CreativeWork associated with the UserComment.
	Discusses_Property = Base + "discusses"

	// A posting to a discussion forum.
	DiscussionForumPosting_Class = Base + "DiscussionForumPosting"

	// A link to the page containing the comments of the CreativeWork.
	DiscussionUrl_Property = Base + "discussionUrl"

	// Information about disease prevention.
	DiseasePreventionInfo_Property = Base + "diseasePreventionInfo"

	// Statistical information about the spread of a disease, either as [[WebContent]], or described directly as a
	// [[Dataset]], or the specific [[Observation]]s in the dataset. When a [[WebContent]] URL is provided, the page
	// indicated might also contain more such markup.
	DiseaseSpreadStatistics_Property = Base + "diseaseSpreadStatistics"

	// The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or
	// theme) with participants.
	DislikeAction_Class = Base + "DislikeAction"

	// The date that this organization was dissolved.
	DissolutionDate_Property = Base + "dissolutionDate"

	// Represents the distance fee (e.g., price per km or mile) part of the total price for an offered product, for
	// example a car rental.
	DistanceFee_PriceComponentTypeEnumeration = Base + "DistanceFee"

	// Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7
	// ft'.
	Distance_Class = Base + "Distance"

	// The distance travelled, e.g. exercising or travelling.
	Distance_Property = Base + "distance"

	// A distillery.
	Distillery_Class = Base + "Distillery"

	// One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential
	// diagnosis.
	DistinguishingSign_Property = Base + "distinguishingSign"

	// A downloadable form of this dataset, at a specific location, in a specific format. This property can be repeated if
	// different variations are available. There is no expectation that different downloadable distributions must contain
	// exactly equivalent information (see also [DCAT](https://www.w3.org/TR/vocab-dcat-3/#Class:Distribution) on this
	// point). Different distributions might include or exclude different subsets of the entire dataset, for example.
	Distribution_Property = Base + "distribution"

	// Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a
	// [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources,
	// typically providing staffing data.
	DiversityPolicy_Property = Base + "diversityPolicy"

	// For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity
	// issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
	DiversityStaffingReport_Property = Base + "diversityStaffingReport"

	// Further documentation describing the Web API in more detail.
	Documentation_Property = Base + "documentation"

	// Indicates when shipping to a particular [[shippingDestination]] is not available.
	DoesNotShip_Property = Base + "doesNotShip"

	// Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
	DomainIncludes_Property = Base + "domainIncludes"

	// Whether borrower is a resident of the jurisdiction where the property is located.
	DomiciledMortgage_Property = Base + "domiciledMortgage"

	// The act of providing goods, services, or money without compensation, often for philanthropic reasons.
	DonateAction_Class = Base + "DonateAction"

	// The time admission will commence.
	DoorTime_Property = Base + "doorTime"

	// A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.
	DosageForm_Property = Base + "dosageForm"

	// A specific dosing schedule for a drug or supplement.
	DoseSchedule_Class = Base + "DoseSchedule"

	// A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the
	// type used.
	DoseSchedule_Property = Base + "doseSchedule"

	// The unit of the dose, e.g. 'mg'.
	DoseUnit_Property = Base + "doseUnit"

	// The value of the dose, e.g. 500.
	DoseValue_Property = Base + "doseValue"

	// A trial design in which neither the researcher nor the patient knows the details of the treatment the patient was
	// randomly assigned to.
	DoubleBlindedTrial_MedicalTrialDesign = Base + "DoubleBlindedTrial"

	// a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically
	// represents only a percentage of the full purchase price.
	DownPayment_Property = Base + "downPayment"

	// The act of downloading an object.
	DownloadAction_Class = Base + "DownloadAction"

	// If the file can be downloaded, URL to download the binary.
	DownloadUrl_Property = Base + "downloadUrl"

	// Represents the downpayment (up-front payment) price component of the total price for an offered product that has
	// additional installment payments.
	Downpayment_PriceComponentTypeEnumeration = Base + "Downpayment"

	// The number of downvotes this question, answer or comment has received from the community.
	DownvoteCount_Property = Base + "downvoteCount"

	// The vasculature that the vein drains into.
	DrainsTo_Property = Base + "drainsTo"

	// The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as
	// instruments.
	DrawAction_Class = Base + "DrawAction"

	// A picture or diagram made with a pencil, pen, or crayon rather than paint.
	Drawing_Class = Base + "Drawing"

	// The act of swallowing liquids.
	DrinkAction_Class = Base + "DrinkAction"

	// A value indicating which roadwheels will receive torque.
	DriveWheelConfigurationValue_Class = Base + "DriveWheelConfigurationValue"

	// The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the
	// drivetrain.
	DriveWheelConfiguration_Property = Base + "driveWheelConfiguration"

	// Indicates the usage of the vehicle for driving school.
	DrivingSchoolVehicleUsage_CarUsageType = Base + "DrivingSchoolVehicleUsage"

	// Where a rental car can be dropped off.
	DropoffLocation_Property = Base + "dropoffLocation"

	// When a rental car can be dropped off.
	DropoffTime_Property = Base + "dropoffTime"

	// A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of
	// action, common physiological effects, etc.
	DrugClass_Class = Base + "DrugClass"

	// The class of drug this belongs to (e.g., statins).
	DrugClass_Property = Base + "drugClass"

	// Enumerated categories of medical drug costs.
	DrugCostCategory_Class = Base + "DrugCostCategory"

	// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug
	// for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of
	// a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid
	// for, so while this type captures some of the variables, costs should be used with caution by consumers of this
	// schema's markup.
	DrugCost_Class = Base + "DrugCost"

	// The legal availability status of a medical drug.
	DrugLegalStatus_Class = Base + "DrugLegalStatus"

	// Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as
	// directed by the mother during pregnancy.
	DrugPregnancyCategory_Class = Base + "DrugPregnancyCategory"

	// Indicates whether this drug is available by prescription or over-the-counter.
	DrugPrescriptionStatus_Class = Base + "DrugPrescriptionStatus"

	// A specific strength in which a medical drug is available in a specific country.
	DrugStrength_Class = Base + "DrugStrength"

	// The unit in which the drug is measured, e.g. '5 mg tablet'.
	DrugUnit_Property = Base + "drugUnit"

	// A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here
	// the term drug is used interchangeably with the term medicine although clinical knowledge makes a clear difference
	// between them.
	Drug_Class = Base + "Drug"

	// Specifying a drug or medicine used in a medication procedure.
	Drug_Property = Base + "drug"

	// A dry-cleaning business.
	DryCleaningOrLaundry_Class = Base + "DryCleaningOrLaundry"

	// The Dun & Bradstreet DUNS number for identifying an organization or business person.
	Duns_Property = Base + "duns"

	// A therapy that duplicates or overlaps this one.
	DuplicateTherapy_Property = Base + "duplicateTherapy"

	// The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
	DurationOfWarranty_Property = Base + "durationOfWarranty"

	// Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
	Duration_Class = Base + "Duration"

	// The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 duration
	// format](http://en.wikipedia.org/wiki/ISO_8601).
	Duration_Property = Base + "duration"

	// A media object representing the circumstances while performing this direction.
	DuringMedia_Property = Base + "duringMedia"

	// Book format: Ebook.
	EBook_BookFormatType = Base + "EBook"

	// EPRelease.
	EPRelease_MusicAlbumReleaseType = Base + "EPRelease"

	// Represents EU Energy Efficiency Class A+ as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryA1Plus_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryA1Plus"

	// Represents EU Energy Efficiency Class A++ as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryA2Plus_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryA2Plus"

	// Represents EU Energy Efficiency Class A+++ as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryA3Plus_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryA3Plus"

	// Represents EU Energy Efficiency Class A as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryA_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryA"

	// Represents EU Energy Efficiency Class B as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryB_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryB"

	// Represents EU Energy Efficiency Class C as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryC_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryC"

	// Represents EU Energy Efficiency Class D as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryD_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryD"

	// Represents EU Energy Efficiency Class E as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryE_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryE"

	// Represents EU Energy Efficiency Class F as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryF_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryF"

	// Represents EU Energy Efficiency Class G as defined in EU energy labeling regulations.
	EUEnergyEfficiencyCategoryG_EUEnergyEfficiencyEnumeration = Base + "EUEnergyEfficiencyCategoryG"

	// Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
	EUEnergyEfficiencyEnumeration_Class = Base + "EUEnergyEfficiencyEnumeration"

	// Ear function assessment with clinical examination.
	Ear_PhysicalExam = Base + "Ear"

	// The amount to be paid as a penalty in the event of early payment of the loan.
	EarlyPrepaymentPenalty_Property = Base + "earlyPrepaymentPenalty"

	// The act of swallowing solid objects.
	EatAction_Class = Base + "EatAction"

	// An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit /
	// edition for a work of film or television. For example, the motion picture known as "Ghostbusters" whose
	// [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J" has several edits, e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I"
	// and "10.5240/8A35-3BEE-6497-5D12-9E4F-3". Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for
	// both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description),
	// or alongside [[editEIDR]] for a more edit-specific description.
	EditEIDR_Property = Base + "editEIDR"

	// Content coded 'edited or cropped content' in a [[MediaReview]], considered in the context of how it was published
	// or shared. For a [[VideoObject]] to be 'edited or cropped content': The video has been edited or rearranged. This
	// category applies to time edits, including editing multiple videos together to alter the story being told or editing
	// out large portions from a video. For an [[ImageObject]] to be 'edited or cropped content': Presenting a part of an
	// image from a larger whole to mislead the viewer. For an [[ImageObject]] with embedded text to be 'edited or cropped
	// content': Presenting a part of an image from a larger whole to mislead the viewer. For an [[AudioObject]] to be
	// 'edited or cropped content': The audio has been edited or rearranged. This category applies to time edits,
	// including editing multiple audio clips together to alter the story being told or editing out large portions from
	// the recording.
	EditedOrCroppedContent_MediaManipulationRatingEnumeration = Base + "EditedOrCroppedContent"

	// Specifies the Person who edited the CreativeWork.
	Editor_Property = Base + "editor"

	// For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question
	// being given. Example: "Multiple choice", "Open ended", "Flashcard".
	EduQuestionType_Property = Base + "eduQuestionType"

	// Event type: Education event.
	EducationEvent_Class = Base + "EducationEvent"

	// Educational background needed for the position or Occupation.
	EducationRequirements_Property = Base + "educationRequirements"

	// An alignment to an established educational framework. This property should not be used where the nature of the
	// alignment can be described using a simple property, for example to express that a resource [[teaches]] or
	// [[assesses]] a competency.
	EducationalAlignment_Property = Base + "educationalAlignment"

	// An EducationalAudience.
	EducationalAudience_Class = Base + "EducationalAudience"

	// A description of the qualification, award, certificate, diploma or other educational credential awarded as a
	// consequence of successful completion of this course or program.
	EducationalCredentialAwarded_Property = Base + "educationalCredentialAwarded"

	// The framework to which the resource being described is aligned.
	EducationalFramework_Property = Base + "educationalFramework"

	// The level in terms of progression through an educational or training context. Examples of educational levels
	// include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	EducationalLevel_Property = Base + "educationalLevel"

	// An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc.,
	// that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
	EducationalOccupationalCredential_Class = Base + "EducationalOccupationalCredential"

	// A program offered by an institution which determines the learning progress to achieve an outcome, usually a
	// credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses)
	// that together constitute a program with a clear start, end, set of requirements, and transition to a new
	// occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
	EducationalOccupationalProgram_Class = Base + "EducationalOccupationalProgram"

	// An educational organization.
	EducationalOrganization_Class = Base + "EducationalOrganization"

	// Similar to courseMode, the medium or means of delivery of the program as a whole. The value may either be a text
	// label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL
	// reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
	EducationalProgramMode_Property = Base + "educationalProgramMode"

	// An educationalRole of an EducationalAudience.
	EducationalRole_Property = Base + "educationalRole"

	// The purpose of a work in the context of education; for example, 'assignment', 'group work'.
	EducationalUse_Property = Base + "educationalUse"

	// Content about the effectiveness-related aspects of a health topic.
	EffectivenessHealthAspect_HealthAspectEnumeration = Base + "EffectivenessHealthAspect"

	// An electrician.
	Electrician_Class = Base + "Electrician"

	// An electronics store.
	ElectronicsStore_Class = Base + "ElectronicsStore"

	// An elementary school.
	ElementarySchool_Class = Base + "ElementarySchool"

	// The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the
	// form 'NUMBER UNIT\_OF\_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a
	// value in meters.
	Elevation_Property = Base + "elevation"

	// The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
	EligibilityToWorkRequirement_Property = Base + "eligibilityToWorkRequirement"

	// The type(s) of customers for which the given offer is valid.
	EligibleCustomerType_Property = Base + "eligibleCustomerType"

	// The duration for which the given offer is valid.
	EligibleDuration_Property = Base + "eligibleDuration"

	// The interval and unit of measurement of ordering quantities for which the offer or price specification is valid.
	// This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleQuantity_Property = Base + "eligibleQuantity"

	// The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s)
	// for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].
	EligibleRegion_Property = Base + "eligibleRegion"

	// The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for
	// indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the
	// acceptance of credit cards to purchases to a certain minimal amount.
	EligibleTransactionVolume_Property = Base + "eligibleTransactionVolume"

	// The supplier of the incentivized item/service for which the incentive is valid for such as a utility company,
	// merchant, or contractor.
	EligibleWithSupplier_Property = Base + "eligibleWithSupplier"

	// An email message.
	EmailMessage_Class = Base + "EmailMessage"

	// Email address.
	Email_Property = Base + "email"

	// An embassy.
	Embassy_Class = Base + "Embassy"

	// A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an
	// ```embed``` tag and should not be the same as the content of the ```loc``` tag.
	EmbedUrl_Property = Base + "embedUrl"

	// Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	EmbeddedTextCaption_Property = Base + "embeddedTextCaption"

	// An emergency service, such as a fire station or ER.
	EmergencyService_Class = Base + "EmergencyService"

	// A specific branch of medical science that deals with the evaluation and initial treatment of medical conditions
	// caused by trauma or sudden illness.
	Emergency_MedicalSpecialty = Base + "Emergency"

	// The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property
	// of that value, since there is no UN/CEFACT Common Code for "g/km".
	EmissionsCO2_Property = Base + "emissionsCO2"

	// A subclass of OrganizationRole used to describe employee relationships.
	EmployeeRole_Class = Base + "EmployeeRole"

	// Someone working for this organization.
	Employee_Property = Base + "employee"

	// People working for this organization.
	Employees_Property = Base + "employees"

	// An aggregate rating of an Organization related to its role as an employer.
	EmployerAggregateRating_Class = Base + "EmployerAggregateRating"

	// A description of the employer, career opportunities and work environment for this position.
	EmployerOverview_Property = Base + "employerOverview"

	// An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or
	// former employee of that organization.
	EmployerReview_Class = Base + "EmployerReview"

	// An employment agency.
	EmploymentAgency_Class = Base + "EmploymentAgency"

	// Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
	EmploymentType_Property = Base + "employmentType"

	// Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be
	// performed.
	EmploymentUnit_Property = Base + "employmentUnit"

	// Another BioChemEntity encoded by this one.
	EncodesBioChemEntity_Property = Base + "encodesBioChemEntity"

	// The CreativeWork encoded by this media object.
	EncodesCreativeWork_Property = Base + "encodesCreativeWork"

	// Media type typically expressed using a MIME format (see [IANA
	// site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN
	// reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)), e.g. application/zip for
	// a SoftwareApplication binary, audio/mpeg for .mp3 etc. In cases where a [[CreativeWork]] has several media type
	// representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]]
	// information. Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL,
	// e.g. defining Web page or a Wikipedia/Wikidata entry.
	EncodingFormat_Property = Base + "encodingFormat"

	// The supported encoding type(s) for an EntryPoint request.
	EncodingType_Property = Base + "encodingType"

	// A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
	Encoding_Property = Base + "encoding"

	// A media object that encodes this CreativeWork.
	Encodings_Property = Base + "encodings"

	// The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	EndDate_Property = Base + "endDate"

	// The end time of the clip expressed as the number of seconds from the beginning of the work.
	EndOffset_Property = Base + "endOffset"

	// The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is
	// expected to end. For actions that span a period of time, when the action was performed. E.g. John wrote a book from
	// January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a
	// larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates
	// with times. This situation may be clarified in future revisions.
	EndTime_Property = Base + "endTime"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of endocrine glands and
	// their secretions.
	Endocrine_MedicalSpecialty = Base + "Endocrine"

	// An agent approves/certifies/likes/supports/sanctions an object.
	EndorseAction_Class = Base + "EndorseAction"

	// A sub property of participant. The person/organization being supported.
	Endorsee_Property = Base + "endorsee"

	// An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's
	// pick" blog, a "Like" or "+1" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in
	// which the [[object]] of the action is rated positively by some [[agent]]. As is common elsewhere in schema.org, it
	// is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]]. An
	// [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an
	// explicit type for indicating a positive, endorsement rating is particularly useful in the absence of numeric scales
	// as it helps consumers understand that the rating is broadly positive.
	EndorsementRating_Class = Base + "EndorsementRating"

	// People or organizations that endorse the plan.
	Endorsers_Property = Base + "endorsers"

	// EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy.
	// The information that can be provided is based on international regulations such as for example [EU directive
	// 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling
	// rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer)
	// under the Energy Policy and Conservation Act (EPCA) in the US.
	EnergyConsumptionDetails_Class = Base + "EnergyConsumptionDetails"

	// Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of
	// several international energy efficiency standards.
	EnergyEfficiencyEnumeration_Class = Base + "EnergyEfficiencyEnumeration"

	// Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a
	// product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is
	// scaled from D to A+++.
	EnergyEfficiencyScaleMax_Property = Base + "energyEfficiencyScaleMax"

	// Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a
	// product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is
	// scaled from D to A+++.
	EnergyEfficiencyScaleMin_Property = Base + "energyEfficiencyScaleMin"

	// Represents EnergyStar certification.
	EnergyStarCertified_EnergyStarEnergyEfficiencyEnumeration = Base + "EnergyStarCertified"

	// Used to indicate whether a product is EnergyStar certified.
	EnergyStarEnergyEfficiencyEnumeration_Class = Base + "EnergyStarEnergyEfficiencyEnumeration"

	// Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
	Energy_Class = Base + "Energy"

	// The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement.
	// \n\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\n* Note 1: You can link to
	// information about how the given value has been determined using the [[valueReference]] property.\n* Note 2: You can
	// use [[minValue]] and [[maxValue]] to indicate ranges.
	EngineDisplacement_Property = Base + "engineDisplacement"

	// The power of the vehicle's engine. Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric
	// horsepower (PS, with 1 PS = 735,49875 W)\n\n* Note 1: There are many different ways of measuring an engine's power.
	// For an overview, see
	// [http://en.wikipedia.org/wiki/Horsepower#Engine\_power\_test\_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\n*
	// Note 2: You can link to information about how the given value has been determined using the [[valueReference]]
	// property.\n* Note 3: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	EnginePower_Property = Base + "enginePower"

	// Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine
	// specification entities.
	EngineSpecification_Class = Base + "EngineSpecification"

	// The type of engine or engines powering the vehicle.
	EngineType_Property = Base + "engineType"

	// Enrolling participants by invitation only.
	EnrollingByInvitation_MedicalStudyStatus = Base + "EnrollingByInvitation"

	// A business providing entertainment.
	EntertainmentBusiness_Class = Base + "EntertainmentBusiness"

	// A sub property of location. The entertainment business where the action occurred.
	EntertainmentBusiness_Property = Base + "entertainmentBusiness"

	// An entry point, within some Web-based protocol.
	EntryPoint_Class = Base + "EntryPoint"

	// Lists or enumerations—for example, a list of cuisines or music genres, etc.
	Enumeration_Class = Base + "Enumeration"

	// The characteristics of associated patients, such as age, gender, race etc.
	Epidemiology_Property = Base + "epidemiology"

	// Position of the episode within an ordered group of episodes.
	EpisodeNumber_Property = Base + "episodeNumber"

	// A media episode (e.g. TV, radio, video game) which can be part of a series or season.
	Episode_Class = Base + "Episode"

	// An episode of a TV, radio or game media within a series or season.
	Episode_Property = Base + "episode"

	// An episode of a TV/radio series or season.
	Episodes_Property = Base + "episodes"

	// This ordering relation for qualitative values indicates that the subject is equal to the object.
	Equal_Property = Base + "equal"

	// For failed actions, more information on the cause of the failure.
	Error_Property = Base + "error"

	// The estimated cost of the supply or supplies consumed when performing instructions.
	EstimatedCost_Property = Base + "estimatedCost"

	// The estimated time the flight will take.
	EstimatedFlightDuration_Property = Base + "estimatedFlightDuration"

	// An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to
	// industry, job title, and location. Estimated salaries are often computed by outside organizations rather than the
	// hiring organization, who may not have committed to the estimated value.
	EstimatedSalary_Property = Base + "estimatedSalary"

	// The condition, complication, or symptom whose risk is being estimated.
	EstimatesRiskOf_Property = Base + "estimatesRiskOf"

	// Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices,
	// or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an
	// ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior
	// expected by the organization.
	EthicsPolicy_Property = Base + "ethicsPolicy"

	// An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to
	// whether it is online or offline.
	EventAttendanceModeEnumeration_Class = Base + "EventAttendanceModeEnumeration"

	// The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
	EventAttendanceMode_Property = Base + "eventAttendanceMode"

	// The event has been cancelled. If the event has multiple startDate values, all are assumed to be cancelled. Either
	// startDate or previousStartDate may be used to specify the event's cancelled date(s).
	EventCancelled_EventStatusType = Base + "EventCancelled"

	// Indicates that the event was changed to allow online participation. See [[eventAttendanceMode]] for specifics of
	// whether it is now fully or partially online.
	EventMovedOnline_EventStatusType = Base + "EventMovedOnline"

	// The event has been postponed and no new date has been set. The event's previousStartDate should be set.
	EventPostponed_EventStatusType = Base + "EventPostponed"

	// The event has been rescheduled. The event's previousStartDate should be set to the old date and the startDate
	// should be set to the event's new date. (If the event has been rescheduled multiple times, the previousStartDate
	// property may be repeated.)
	EventRescheduled_EventStatusType = Base + "EventRescheduled"

	// A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about
	// actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For
	// offers of tickets, use [[Offer]].
	EventReservation_Class = Base + "EventReservation"

	// Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for
	// a series of repeating events rather than data on the individual events themselves. For example, a website or
	// application might prefer to publish a schedule for a weekly gym class rather than provide data on every event. A
	// schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that is
	// associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These
	// are instead defined within the associated [[Schedule]], this avoids any ambiguity for clients using the data. The
	// property might have repeated values to specify different schedules, e.g. for different months or seasons.
	EventSchedule_Property = Base + "eventSchedule"

	// The event is taking place or has taken place on the startDate as scheduled. Use of this value is optional, as it is
	// assumed by default.
	EventScheduled_EventStatusType = Base + "EventScheduled"

	// A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property. An
	// EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is
	// a series, which is repeated regularly. The "2012 London Olympics" can be presented both as an [[Event]] in the
	// series "Olympic Games", and as an [[EventSeries]] that included a number of sporting competitions as Events. The
	// nature of the association between the events in an [[EventSeries]] can vary, but typical examples could include a
	// thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location,
	// attendee group and/or organizers. EventSeries has been defined as a kind of Event to make it easy for publishers to
	// use it in an Event context without worrying about which kinds of series are really event-like enough to call an
	// Event. In general an EventSeries may seem more Event-like when the period of time is compact and when aspects such
	// as location are fixed, but it may also sometimes prove useful to describe a longer-term series as an Event.
	EventSeries_Class = Base + "EventSeries"

	// EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
	EventStatusType_Class = Base + "EventStatusType"

	// An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
	EventStatus_Property = Base + "eventStatus"

	// An event venue.
	EventVenue_Class = Base + "EventVenue"

	// An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information
	// may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
	Event_Class = Base + "Event"

	// Upcoming or past event associated with this place, organization, or action.
	Event_Property = Base + "event"

	// Upcoming or past events associated with this place or organization.
	Events_Property = Base + "events"

	// Data derived from multiple randomized clinical trials or meta-analyses.
	EvidenceLevelA_MedicalEvidenceLevel = Base + "EvidenceLevelA"

	// Data derived from a single randomized trial, or nonrandomized studies.
	EvidenceLevelB_MedicalEvidenceLevel = Base + "EvidenceLevelB"

	// Only consensus opinion of experts, case studies, or standard-of-care.
	EvidenceLevelC_MedicalEvidenceLevel = Base + "EvidenceLevelC"

	// Strength of evidence of the data used to formulate the guideline (enumerated).
	EvidenceLevel_Property = Base + "evidenceLevel"

	// Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.
	EvidenceOrigin_Property = Base + "evidenceOrigin"

	// An example [[MeasurementMethodEnum]] (to remove when real enums are added).
	ExampleMeasurementMethodEnum_MeasurementMethodEnum = Base + "ExampleMeasurementMethodEnum"

	// A creative work that this work is an example/instance/realization/derivation of.
	ExampleOfWork_Property = Base + "exampleOfWork"

	// Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take place. The property allows
	// exceptions to a [[Schedule]] to be specified. If an exception is specified as a [[DateTime]] then only the event
	// that would have started at that specific date and time should be excluded from the schedule. If an exception is
	// specified as a [[Date]] then any event that is scheduled for that 24 hour period should be excluded from the
	// schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.
	ExceptDate_Property = Base + "exceptDate"

	// A structured value representing exchange rate.
	ExchangeRateSpecification_Class = Base + "ExchangeRateSpecification"

	// The difference between the price at which a broker or other intermediary buys and sells foreign currency.
	ExchangeRateSpread_Property = Base + "exchangeRateSpread"

	// Specifies that a refund can be done as an exchange for the same product.
	ExchangeRefund_RefundTypeEnumeration = Base + "ExchangeRefund"

	// Library file name, e.g., mscorlib.dll, system.web.dll.
	ExecutableLibraryName_Property = Base + "executableLibraryName"

	// The act of participating in exertive activity for the purposes of improving health and fitness.
	ExerciseAction_Class = Base + "ExerciseAction"

	// A sub property of location. The course where this action was taken.
	ExerciseCourse_Property = Base + "exerciseCourse"

	// A gym.
	ExerciseGym_Class = Base + "ExerciseGym"

	// Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as
	// well as activity prescribed by a clinician.
	ExercisePlan_Class = Base + "ExercisePlan"

	// A sub property of instrument. The exercise plan used on this action.
	ExercisePlan_Property = Base + "exercisePlan"

	// A sub property of instrument. The diet used in this action.
	ExerciseRelatedDiet_Property = Base + "exerciseRelatedDiet"

	// Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation,
	// etc.
	ExerciseType_Property = Base + "exerciseType"

	// Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
	ExhibitionEvent_Class = Base + "ExhibitionEvent"

	// exif data for this object.
	ExifData_Property = Base + "exifData"

	// The earliest date the package may arrive.
	ExpectedArrivalFrom_Property = Base + "expectedArrivalFrom"

	// The latest date the package may arrive.
	ExpectedArrivalUntil_Property = Base + "expectedArrivalUntil"

	// The likely outcome in either the short term or long term of the medical condition.
	ExpectedPrognosis_Property = Base + "expectedPrognosis"

	// An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a
	// movie before being able to watch it.
	ExpectsAcceptanceOf_Property = Base + "expectsAcceptanceOf"

	// Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]])
	// in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates
	// that satisfying one of these requirements is sufficient.
	ExperienceInPlaceOfEducation_Property = Base + "experienceInPlaceOfEducation"

	// Description of skills and experience needed for the position or Occupation.
	ExperienceRequirements_Property = Base + "experienceRequirements"

	// Medical expert advice related to the plan.
	ExpertConsiderations_Property = Base + "expertConsiderations"

	// Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]]
	// whose availability or relevance is time-limited, a [[ClaimReview]] fact check whose publisher wants to indicate
	// that it may no longer be relevant (or helpful to highlight) after some date, or a [[Certification]] the validity
	// has expired.
	Expires_Property = Base + "expires"

	// Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example
	// brain, digestive system.
	ExpressedIn_Property = Base + "expressedIn"

	// An address extension such as an apartment number, C/O or alternative name.
	ExtendedAddress_Property = Base + "extendedAddress"

	// Eye or ophthalmological function assessment with clinical examination.
	Eye_PhysicalExam = Base + "Eye"

	// A [[FAQPage]] is a [[WebPage]] presenting one or more "[Frequently asked
	// questions](https://en.wikipedia.org/wiki/FAQ)" (see also [[QAPage]]).
	FAQPage_Class = Base + "FAQPage"

	// A designation by the US FDA signifying that adequate and well-controlled studies have failed to demonstrate a risk
	// to the fetus in the first trimester of pregnancy (and there is no evidence of risk in later trimesters).
	FDAcategoryA_DrugPregnancyCategory = Base + "FDAcategoryA"

	// A designation by the US FDA signifying that animal reproduction studies have failed to demonstrate a risk to the
	// fetus and there are no adequate and well-controlled studies in pregnant women.
	FDAcategoryB_DrugPregnancyCategory = Base + "FDAcategoryB"

	// A designation by the US FDA signifying that animal reproduction studies have shown an adverse effect on the fetus
	// and there are no adequate and well-controlled studies in humans, but potential benefits may warrant use of the drug
	// in pregnant women despite potential risks.
	FDAcategoryC_DrugPregnancyCategory = Base + "FDAcategoryC"

	// A designation by the US FDA signifying that there is positive evidence of human fetal risk based on adverse
	// reaction data from investigational or marketing experience or studies in humans, but potential benefits may warrant
	// use of the drug in pregnant women despite potential risks.
	FDAcategoryD_DrugPregnancyCategory = Base + "FDAcategoryD"

	// A designation by the US FDA signifying that studies in animals or humans have demonstrated fetal abnormalities
	// and/or there is positive evidence of human fetal risk based on adverse reaction data from investigational or
	// marketing experience, and the risks involved in use of the drug in pregnant women clearly outweigh potential
	// benefits.
	FDAcategoryX_DrugPregnancyCategory = Base + "FDAcategoryX"

	// A designation that the drug in question has not been assigned a pregnancy category designation by the US FDA.
	FDAnotEvaluated_DrugPregnancyCategory = Base + "FDAnotEvaluated"

	// A radio channel that uses FM.
	FMRadioChannel_Class = Base + "FMRadioChannel"

	// An action that failed to complete. The action's error property and the HTTP return code contain more information
	// about the failure.
	FailedActionStatus_ActionStatusType = Base + "FailedActionStatus"

	// The boolean value false.
	False_Boolean = Base + "False"

	// Family name. In the U.S., the last name of a Person.
	FamilyName_Property = Base + "familyName"

	// A fast-food restaurant.
	FastFoodRestaurant_Class = Base + "FastFoodRestaurant"

	// The number of grams of fat.
	FatContent_Property = Base + "fatContent"

	// The fax number.
	FaxNumber_Property = Base + "faxNumber"

	// Features or modules provided by this application (and possibly required by other applications).
	FeatureList_Property = Base + "featureList"

	// Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial
	// service organization.
	FeesAndCommissionsSpecification_Property = Base + "feesAndCommissionsSpecification"

	// The female gender.
	Female_GenderType = Base + "Female"

	// Event type: Festival.
	Festival_Class = Base + "Festival"

	// The number of grams of fiber.
	FiberContent_Property = Base + "fiberContent"

	// Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml))
	// of the content, e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several
	// media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat
	// information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g.
	// defining Web page or a Wikipedia entry.
	FileFormat_Property = Base + "fileFormat"

	// Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
	FileSize_Property = Base + "fileSize"

	// The act of capturing sound and moving images on film, video, or digitally.
	FilmAction_Class = Base + "FilmAction"

	// A financial aid type or program which students may use to pay for tuition or fees associated with the program.
	FinancialAidEligible_Property = Base + "financialAidEligible"

	// <p>Represents financial incentives for goods/services offered by an organization (or individual).</p> <p>Typically
	// contains the [[name]] of the incentive, the [[incentivizedItem]], the [[incentiveAmount]], the [[incentiveStatus]],
	// [[incentiveType]], the [[provider]] of the incentive, and [[eligibleWithSupplier]].</p> <p>Optionally contains
	// criteria on whether the incentive is limited based on [[purchaseType]], [[purchasePriceLimit]], [[incomeLimit]],
	// and the [[qualifiedExpense]].
	FinancialIncentive_Class = Base + "FinancialIncentive"

	// A product provided to consumers and businesses by financial institutions such as banks, insurance companies,
	// brokerage firms, consumer finance companies, and investment companies which comprise the financial services
	// industry.
	FinancialProduct_Class = Base + "FinancialProduct"

	// Financial services business.
	FinancialService_Class = Base + "FinancialService"

	// The act of finding an object.\n\nRelated actions:\n\n* [[SearchAction]]: FindAction is generally lead by a
	// SearchAction, but not necessarily.
	FindAction_Class = Base + "FindAction"

	// A fire station. With firemen.
	FireStation_Class = Base + "FireStation"

	// Indicates the first known occurrence of a [[Claim]] in some [[CreativeWork]].
	FirstAppearance_Property = Base + "firstAppearance"

	// The date and place the work was first performed.
	FirstPerformance_Property = Base + "firstPerformance"

	// Physical activity that is engaged in to improve joint and muscle flexibility.
	Flexibility_PhysicalActivityCategory = Base + "Flexibility"

	// The distance of the flight.
	FlightDistance_Property = Base + "flightDistance"

	// The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110,
	// where the IATA code for United is 'UA', the flightNumber is 'UA110'.
	FlightNumber_Property = Base + "flightNumber"

	// A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation
	// emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
	FlightReservation_Class = Base + "FlightReservation"

	// An airline flight.
	Flight_Class = Base + "Flight"

	// Data type: Floating number.
	Float_Class = Base + "Float"

	// The floor level for an [[Accommodation]] in a multi-storey building. Since counting systems [vary
	// internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system
	// should be used where possible.
	FloorLevel_Property = Base + "floorLevel"

	// A floor limit is the amount of money above which credit card transactions must be authorized.
	FloorLimit_Property = Base + "floorLimit"

	// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of
	// common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some
	// [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]]. A FloorPlan is always in the
	// context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial
	// aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be
	// indicated using [[image]].
	FloorPlan_Class = Base + "FloorPlan"

	// The size of the accommodation, e.g. in square meter or squarefoot. Typical unit code(s): MTK for square meter, FTK
	// for square foot, or YDK for square yard.
	FloorSize_Property = Base + "floorSize"

	// A florist.
	Florist_Class = Base + "Florist"

	// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get
	// updates polled from.\n\nRelated actions:\n\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that
	// the connection is *not* necessarily reciprocal.\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction
	// implies that the follower acts as an active agent constantly/actively polling for updates.\n* [[RegisterAction]]:
	// Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the
	// object.\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates
	// from the object.\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all
	// aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't
	// follow it).
	FollowAction_Class = Base + "FollowAction"

	// A sub property of object. The person or organization being followed.
	Followee_Property = Base + "followee"

	// The most generic uni-directional social relation.
	Follows_Property = Base + "follows"

	// Typical or recommended followup care after the procedure is performed.
	Followup_Property = Base + "followup"

	// A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations,
	// e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
	FoodEstablishmentReservation_Class = Base + "FoodEstablishmentReservation"

	// A food-related business.
	FoodEstablishment_Class = Base + "FoodEstablishment"

	// A sub property of location. The specific food establishment where the action occurred.
	FoodEstablishment_Property = Base + "foodEstablishment"

	// Event type: Food event.
	FoodEvent_Class = Base + "FoodEvent"

	// A sub property of location. The specific food event where the action occurred.
	FoodEvent_Property = Base + "foodEvent"

	// A food service, like breakfast, lunch, or dinner.
	FoodService_Class = Base + "FoodService"

	// Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.
	FoodWarning_Property = Base + "foodWarning"

	// A person or organization who founded this organization.
	Founder_Property = Base + "founder"

	// A person who founded this organization.
	Founders_Property = Base + "founders"

	// The date that this organization was founded.
	FoundingDate_Property = Base + "foundingDate"

	// The place where the Organization was founded.
	FoundingLocation_Property = Base + "foundingLocation"

	// Four-wheel drive is a transmission layout where the engine primarily drives two wheels with a part-time four-wheel
	// drive capability.
	FourWheelDriveConfiguration_DriveWheelConfigurationValue = Base + "FourWheelDriveConfiguration"

	// Specifies that product returns are free of charge for the customer.
	FreeReturn_ReturnFeesEnumeration = Base + "FreeReturn"

	// A monetary value above (or at) which the shipping rate becomes free. Intended to be used via an
	// [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].
	FreeShippingThreshold_Property = Base + "freeShippingThreshold"

	// A flag to signal that the item, event, or place is accessible for free.
	Free_Property = Base + "free"

	// How often the dose is taken, e.g. 'daily'.
	Frequency_Property = Base + "frequency"

	// The day of the week between Thursday and Saturday.
	Friday_DayOfWeek = Base + "Friday"

	// A sub property of location. The original location of the object or the agent before the action.
	FromLocation_Property = Base + "fromLocation"

	// Front-wheel drive is a transmission layout where the engine drives the front wheels.
	FrontWheelDriveConfiguration_DriveWheelConfigurationValue = Base + "FrontWheelDriveConfiguration"

	// The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for
	// storage, this should indicate the total of all storage of the same type.\n\nTypical unit code(s): LTR for liters,
	// GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
	FuelCapacity_Property = Base + "fuelCapacity"

	// The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g.
	// liters per 100 km).\n\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km. Use
	// [[unitText]] to indicate the unit of measurement, e.g. L/100 km.\n* Note 2: There are two ways of indicating the
	// fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon).
	// They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80
	// km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel consumption
	// to another value.
	FuelConsumption_Property = Base + "fuelConsumption"

	// The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter
	// (km/L).\n\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter.
	// Use [[unitText]] to indicate the unit of measurement, e.g. mpg or km/L.\n* Note 2: There are two ways of indicating
	// the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per
	// gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed
	// ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel
	// economy to another value.
	FuelEfficiency_Property = Base + "fuelEfficiency"

	// The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this
	// property can be attached directly to the vehicle.
	FuelType_Property = Base + "fuelType"

	// Fulfillment to a collection point location.
	FulfillmentTypeCollectionPoint_FulfillmentTypeEnumeration = Base + "FulfillmentTypeCollectionPoint"

	// Fulfillment to a customer selected address.
	FulfillmentTypeDelivery_FulfillmentTypeEnumeration = Base + "FulfillmentTypeDelivery"

	// A type of product fulfillment.
	FulfillmentTypeEnumeration_Class = Base + "FulfillmentTypeEnumeration"

	// Fulfillment through pick-up drop-off locations.
	FulfillmentTypePickupDropoff_FulfillmentTypeEnumeration = Base + "FulfillmentTypePickupDropoff"

	// Fulfillment through pick-up in a store.
	FulfillmentTypePickupInStore_FulfillmentTypeEnumeration = Base + "FulfillmentTypePickupInStore"

	// Fulfillment to a customer selected address after scheduling with the customer.
	FulfillmentTypeScheduledDelivery_FulfillmentTypeEnumeration = Base + "FulfillmentTypeScheduledDelivery"

	// Type of fulfillment applicable to the [[ShippingService]].
	FulfillmentType_Property = Base + "fulfillmentType"

	// Indicates full game availability.
	FullGameAvailability_GameAvailabilityEnumeration = Base + "FullGameAvailability"

	// Specifies that a refund can be done in the full amount the customer paid for the product.
	FullRefund_RefundTypeEnumeration = Base + "FullRefund"

	// The degree of mobility the joint allows.
	FunctionalClass_Property = Base + "functionalClass"

	// Indicates something directly or indirectly funded or sponsored through a [[Grant]]. See also
	// [[ownershipFundingInfo]].
	FundedItem_Property = Base + "fundedItem"

	// A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funder_Property = Base + "funder"

	// A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages the granting process
	// (via [[Grant]]s, typically [[MonetaryGrant]]s). A funding agency is not always required for grant funding, e.g.
	// philanthropic giving, corporate sponsorship etc. Examples of funding agencies include ERC, REA, NIH, Bill and
	// Melinda Gates Foundation, ...
	FundingAgency_Class = Base + "FundingAgency"

	// A FundingScheme combines organizational, project and policy aspects of grant-based funding that sets guidelines,
	// principles and mechanisms to support other kinds of projects and activities. Funding is typically organized via
	// [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon
	// 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector
	// funding, the management and administration of grant awards is often handled by other, dedicated, organizations -
	// [[FundingAgency]]s such as ERC, REA, ...
	FundingScheme_Class = Base + "FundingScheme"

	// A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also
	// [[ownershipFundingInfo]].
	Funding_Property = Base + "funding"

	// Pathogenic fungus.
	Fungus_InfectiousAgentClass = Base + "Fungus"

	// A furniture store.
	FurnitureStore_Class = Base + "FurnitureStore"

	// For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind of game availability
	// offered.
	GameAvailabilityEnumeration_Class = Base + "GameAvailabilityEnumeration"

	// Indicates the availability type of the game content associated with this action, such as whether it is a full
	// version or a demo.
	GameAvailabilityType_Property = Base + "gameAvailabilityType"

	// The edition of a video game.
	GameEdition_Property = Base + "gameEdition"

	// An item is an object within the game world that can be collected by a player or, occasionally, a non-player
	// character.
	GameItem_Property = Base + "gameItem"

	// Real or fictional location of the game (or part of game).
	GameLocation_Property = Base + "gameLocation"

	// The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video
	// games</a>.
	GamePlatform_Property = Base + "gamePlatform"

	// Indicates whether this game is multi-player, co-op or single-player.
	GamePlayMode_Class = Base + "GamePlayMode"

	// Status of a game server.
	GameServerStatus_Class = Base + "GameServerStatus"

	// Server that provides game interaction in a multiplayer game.
	GameServer_Class = Base + "GameServer"

	// The server on which it is possible to play the game.
	GameServer_Property = Base + "gameServer"

	// Links to tips, tactics, etc.
	GameTip_Property = Base + "gameTip"

	// The Game type represents things which are games. These are typically rule-governed recreational activities, e.g.
	// role-playing games in which players assume the role of characters in a fictional setting.
	Game_Class = Base + "Game"

	// Video game which is played on this server.
	Game_Property = Base + "game"

	// A garden store.
	GardenStore_Class = Base + "GardenStore"

	// A gas station.
	GasStation_Class = Base + "GasStation"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of digestive system.
	Gastroenterologic_MedicalSpecialty = Base + "Gastroenterologic"

	// Residence type: Gated community.
	GatedResidenceCommunity_Class = Base + "GatedResidenceCommunity"

	// An enumeration of genders.
	GenderType_Class = Base + "GenderType"

	// Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While
	// http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who
	// are not a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of
	// sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender
	// [[SportsTeam]] can be indicated with a text value of "Mixed".
	Gender_Property = Base + "gender"

	// A discrete unit of inheritance which affects one or more biological traits (Source:
	// [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box
	// protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
	Gene_Class = Base + "Gene"

	// A general contractor.
	GeneralContractor_Class = Base + "GeneralContractor"

	// Represents the generic notion of the Web Platform. More specific codes include [[MobileWebPlatform]] and
	// [[DesktopWebPlatform]], as an incomplete list.
	GenericWebPlatform_DigitalPlatformEnumeration = Base + "GenericWebPlatform"

	// A specific branch of medical science that pertains to hereditary transmission and the variation of inherited
	// characteristics and disorders.
	Genetic_MedicalSpecialty = Base + "Genetic"

	// Genitourinary system function assessment with clinical examination.
	Genitourinary_PhysicalExam = Base + "Genitourinary"

	// Genre of the creative work, broadcast channel or group.
	Genre_Property = Base + "genre"

	// A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape it provides the simple
	// textual property 'circle', but also allows the combination of postalCode alongside geoRadius. The center of the
	// circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.
	GeoCircle_Class = Base + "GeoCircle"

	// Represents a relationship between two geometries (or the places they represent), relating a containing geometry to
	// a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the
	// interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoContains_Property = Base + "geoContains"

	// The geographic coordinates of a place or event.
	GeoCoordinates_Class = Base + "GeoCoordinates"

	// Represents a relationship between two geometries (or the places they represent), relating a geometry to another
	// that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCoveredBy_Property = Base + "geoCoveredBy"

	// Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a
	// covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in
	// [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCovers_Property = Base + "geoCovers"

	// Represents a relationship between two geometries (or the places they represent), relating a geometry to another
	// that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the
	// intersection is less than that of at least one of them". As defined in
	// [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCrosses_Property = Base + "geoCrosses"

	// Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint:
	// "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined
	// in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
	GeoDisjoint_Property = Base + "geoDisjoint"

	// Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as
	// defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their
	// interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other"
	// (a symmetric relationship).
	GeoEquals_Property = Base + "geoEquals"

	// Represents spatial relations in which two geometries (or the places they represent) have at least one point in
	// common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoIntersects_Property = Base + "geoIntersects"

	// Indicates the GeoCoordinates at the centre of a GeoShape, e.g. GeoCircle.
	GeoMidpoint_Property = Base + "geoMidpoint"

	// Represents a relationship between two geometries (or the places they represent), relating a geometry to another
	// that geospatially overlaps it, i.e. they have some but not all points in common. As defined in
	// [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoOverlaps_Property = Base + "geoOverlaps"

	// Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
	GeoRadius_Property = Base + "geoRadius"

	// The geographic shape of a place. A GeoShape can be described using several properties whose values are based on
	// latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace
	// should be used when writing a list of several such points.
	GeoShape_Class = Base + "GeoShape"

	// Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one
	// boundary point in common, but no interior points." (A symmetric relationship, as defined in
	// [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
	GeoTouches_Property = Base + "geoTouches"

	// Represents a relationship between two geometries (or the places they represent), relating a geometry to one that
	// contains it, i.e. it is inside (i.e. within) its interior. As defined in
	// [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoWithin_Property = Base + "geoWithin"

	// The geo coordinates of the place.
	Geo_Property = Base + "geo"

	// The geographic area associated with the audience.
	GeographicArea_Property = Base + "geographicArea"

	// (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best
	// practices.
	GeospatialGeometry_Class = Base + "GeospatialGeometry"

	// A specific branch of medical science that is concerned with the diagnosis and treatment of diseases, debilities and
	// provision of care to the aged.
	Geriatric_MedicalSpecialty = Base + "Geriatric"

	// Content that discusses practical and policy aspects for getting access to specific kinds of healthcare (e.g.
	// distribution mechanisms for vaccines).
	GettingAccessHealthAspect_HealthAspectEnumeration = Base + "GettingAccessHealthAspect"

	// Information about getting tested (for a [[MedicalCondition]]), e.g. in the context of a pandemic.
	GettingTestedInfo_Property = Base + "gettingTestedInfo"

	// The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n*
	// [[TakeAction]]: Reciprocal of GiveAction.\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership
	// is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
	GiveAction_Class = Base + "GiveAction"

	// Given name. In the U.S., the first name of a Person.
	GivenName_Property = Base + "givenName"

	// The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location
	// Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify
	// parties and physical locations.
	GlobalLocationNumber_Property = Base + "globalLocationNumber"

	// A diet exclusive of gluten.
	GlutenFreeDiet_RestrictedDiet = Base + "GlutenFreeDiet"

	// A golf course.
	GolfCourse_Class = Base + "GolfCourse"

	// governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.
	GovernmentBenefitsInfo_Property = Base + "governmentBenefitsInfo"

	// GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that
	// this structure may not capture all benefits offered.
	GovernmentBenefitsType_Class = Base + "GovernmentBenefitsType"

	// A government building.
	GovernmentBuilding_Class = Base + "GovernmentBuilding"

	// A government office&#x2014;for example, an IRS or DMV office.
	GovernmentOffice_Class = Base + "GovernmentOffice"

	// A governmental organization or agency.
	GovernmentOrganization_Class = Base + "GovernmentOrganization"

	// A permit issued by a government agency.
	GovernmentPermit_Class = Base + "GovernmentPermit"

	// A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
	GovernmentService_Class = Base + "GovernmentService"

	// The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to
	// pay) is deemed to have occurred.
	GracePeriod_Property = Base + "gracePeriod"

	// A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some
	// [[MonetaryAmount]] to an [[Organization]] or [[Person]], sometimes not necessarily via a dedicated or long-lived
	// [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the
	// [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g.
	// office space). Grants support activities directed towards some agreed collective goals, often but not always
	// organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is
	// also common for a project to be associated with a single grant. The amount of a [[Grant]] is represented using
	// [[amount]] as a [[MonetaryAmount]].
	Grant_Class = Base + "Grant"

	// The person, organization, contact point, or audience that has been granted this permission.
	Grantee_Property = Base + "grantee"

	// Book format: GraphicNovel. May represent a bound collection of ComicIssue instances.
	GraphicNovel_BookFormatType = Base + "GraphicNovel"

	// This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
	GreaterOrEqual_Property = Base + "greaterOrEqual"

	// This ordering relation for qualitative values indicates that the subject is greater than the object.
	Greater_Property = Base + "greater"

	// A grocery store.
	GroceryStore_Class = Base + "GroceryStore"

	// The airline boards by groups based on check-in time, priority, etc.
	GroupBoardingPolicy_BoardingPolicyType = Base + "GroupBoardingPolicy"

	// The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1
	// Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade
	// items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin12_Property = Base + "gtin12"

	// The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN
	// codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding
	// zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13_Property = Base + "gtin13"

	// The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN
	// Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14_Property = Base + "gtin14"

	// The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or
	// 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8_Property = Base + "gtin8"

	// A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items,
	// including products and services, using numeric identification codes. A correct [[gtin]] value should be a valid
	// GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link"
	// URL based on such a string. The numeric component should also have a [valid GS1 check
	// digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also
	// [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and
	// [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin
	// values is not required or encouraged. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]],
	// [[gtin13]], and [[gtin14]] properties. The GS1 [digital link
	// specifications](https://www.gs1.org/standards/Digital-Link/) expresses GTINs as URLs (URIs, IRIs, etc.). Digital
	// Links should be populated into the [[hasGS1DigitalLink]] attribute. Note also that this is a definition for how to
	// include GTINs in Schema.org data, and not a definition of GTINs in general - see the GS1 documentation for
	// authoritative details.
	Gtin_Property = Base + "gtin"

	// [[Guide]] is a page or article that recommends specific products or services, or aspects of a thing for a user to
	// consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to
	// consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may
	// represent a Ranked List and recommend specific products or services with ranking.
	Guide_Class = Base + "Guide"

	// Date on which this guideline's recommendation was made.
	GuidelineDate_Property = Base + "guidelineDate"

	// The medical conditions, treatments, etc. that are the subject of the guideline.
	GuidelineSubject_Property = Base + "guidelineSubject"

	// A medical guideline related to this entity.
	Guideline_Property = Base + "guideline"

	// A specific branch of medical science that pertains to the health care of women, particularly in the diagnosis and
	// treatment of disorders affecting the female reproductive system.
	Gynecologic_MedicalSpecialty = Base + "Gynecologic"

	// A business that provides Heating, Ventilation and Air Conditioning services.
	HVACBusiness_Class = Base + "HVACBusiness"

	// A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
	Hackathon_Class = Base + "Hackathon"

	// A hair salon.
	HairSalon_Class = Base + "HairSalon"

	// A diet conforming to Islamic dietary practices.
	HalalDiet_RestrictedDiet = Base + "HalalDiet"

	// The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for
	// pickup, in case the delivery method is on site pickup. In the context of [[ShippingDeliveryTime]], Typical
	// properties: minValue, maxValue, unitCode (d for DAY). This is by common convention assumed to mean business days
	// (if a unitCode is used, coded as "d"), i.e. only counting days when the business normally operates. In the context
	// of [[ShippingService]], use the [[ServicePeriod]] format, that contains the same information in a structured form,
	// with cut-off time, business days and duration.
	HandlingTime_Property = Base + "handlingTime"

	// Book format: Hardcover.
	Hardcover_BookFormatType = Base + "Hardcover"

	// A hardware store.
	HardwareStore_Class = Base + "HardwareStore"

	// Used to tag an item to be intended or suitable for consumption or use by adults only.
	HasAdultConsideration_Property = Base + "hasAdultConsideration"

	// Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.
	HasBioChemEntityPart_Property = Base + "hasBioChemEntityPart"

	// A symbolic representation of a BioChemEntity. For example, a nucleotide sequence of a Gene or an amino acid
	// sequence of a Protein.
	HasBioPolymerSequence_Property = Base + "hasBioPolymerSequence"

	// A broadcast channel of a broadcast service.
	HasBroadcastChannel_Property = Base + "hasBroadcastChannel"

	// A Category code contained in this code set.
	HasCategoryCode_Property = Base + "hasCategoryCode"

	// Certification information about a product, organization, service, place, or person.
	HasCertification_Property = Base + "hasCertification"

	// An offering of the course at a specific time and place or through specific media or mode of study or to a specific
	// section of students.
	HasCourseInstance_Property = Base + "hasCourseInstance"

	// A course or class that is one of the learning opportunities that constitute an educational / occupational program.
	// No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether
	// the course will be available to everyone on the program.
	HasCourse_Property = Base + "hasCourse"

	// A credential awarded to the Person or Organization.
	HasCredential_Property = Base + "hasCredential"

	// A Defined Term contained in this term set.
	HasDefinedTerm_Property = Base + "hasDefinedTerm"

	// Method used for delivery or shipping.
	HasDeliveryMethod_Property = Base + "hasDeliveryMethod"

	// A permission related to the access to this document (e.g. permission to read or write an electronic document). For
	// a public document, specify a grantee with an Audience with audienceType equal to "public".
	HasDigitalDocumentPermission_Property = Base + "hasDigitalDocumentPermission"

	// Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be
	// used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help
	// with social distancing from other potentially-infected users.
	HasDriveThroughService_Property = Base + "hasDriveThroughService"

	// Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an
	// international energy efficiency standard.
	HasEnergyConsumptionDetails_Property = Base + "hasEnergyConsumptionDetails"

	// Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no
	// certification) for a product according to an international energy efficiency standard.
	HasEnergyEfficiencyCategory_Property = Base + "hasEnergyEfficiencyCategory"

	// The <a href="https://www.gs1.org/standards/gs1-digital-link">GS1 digital link</a> associated with the object. This
	// URL should conform to the particular requirements of digital links. The link should only contain the Application
	// Identifiers (AIs) that are relevant for the entity being annotated, for instance a [[Product]] or an
	// [[Organization]], and for the correct granularity. In particular, for products:<ul><li>A Digital Link that contains
	// a serial number (AI <code>21</code>) should only be present on instances of [[IndividualProduct]]</li><li>A Digital
	// Link that contains a lot number (AI <code>10</code>) should be annotated as [[SomeProduct]] if only products from
	// that lot are sold, or [[IndividualProduct]] if there is only a specific product.</li><li>A Digital Link that
	// contains a global model number (AI <code>8013</code>) should be attached to a [[Product]] or a
	// [[ProductModel]].</li></ul> Other item types should be adapted similarly.
	HasGS1DigitalLink_Property = Base + "hasGS1DigitalLink"

	// Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]. For example, that the
	// content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.
	HasHealthAspect_Property = Base + "hasHealthAspect"

	// A URL to a map of the place.
	HasMap_Property = Base + "hasMap"

	// A measurement of an item, For example, the inseam of pants, the wheel size of a bicycle, the gauge of a screw, or
	// the carbon footprint measured for certification by an authority. Usually an exact measurement, but can also be a
	// range of measurements for adjustable products, for example belts and ski bindings.
	HasMeasurement_Property = Base + "hasMeasurement"

	// MemberProgram offered by an Organization, for example an eCommerce merchant or an airline.
	HasMemberProgram_Property = Base + "hasMemberProgram"

	// A food or drink item contained in a menu or menu section.
	HasMenuItem_Property = Base + "hasMenuItem"

	// A subgrouping of the menu (by dishes, course, serving time period, etc.).
	HasMenuSection_Property = Base + "hasMenuSection"

	// Either the actual menu as a structured representation, as text, or a URL of the menu.
	HasMenu_Property = Base + "hasMenu"

	// Specifies a MerchantReturnPolicy that may be applicable.
	HasMerchantReturnPolicy_Property = Base + "hasMerchantReturnPolicy"

	// Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.
	HasMolecularFunction_Property = Base + "hasMolecularFunction"

	// The Person's occupation. For past professions, use Role for expressing dates.
	HasOccupation_Property = Base + "hasOccupation"

	// Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HasOfferCatalog_Property = Base + "hasOfferCatalog"

	// Points-of-Sales operated by the organization or person.
	HasPOS_Property = Base + "hasPOS"

	// Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
	HasPart_Property = Base + "hasPart"

	// Indicates a ProductReturnPolicy that may be applicable.
	HasProductReturnPolicy_Property = Base + "hasProductReturnPolicy"

	// A common representation such as a protein sequence or chemical structure for this entity. For images use
	// schema.org/image.
	HasRepresentation_Property = Base + "hasRepresentation"

	// Specification of a shipping service offered by the organization.
	HasShippingService_Property = Base + "hasShippingService"

	// A member benefit for a particular tier of a loyalty program.
	HasTierBenefit_Property = Base + "hasTierBenefit"

	// A requirement for a user to join a membership tier, for example: a CreditCard if the tier requires sign up for a
	// credit card, A UnitPriceSpecification if the user is required to pay a (periodic) fee, or a MonetaryAmount if the
	// user needs to spend a minimum amount to join the tier. If a tier is free to join then this property does not need
	// to be specified.
	HasTierRequirement_Property = Base + "hasTierRequirement"

	// The tiers of a member program.
	HasTiers_Property = Base + "hasTiers"

	// Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).
	HasVariant_Property = Base + "hasVariant"

	// Head assessment with clinical examination.
	Head_PhysicalExam = Base + "Head"

	// Headline of the article.
	Headline_Property = Base + "headline"

	// Health and beauty.
	HealthAndBeautyBusiness_Class = Base + "HealthAndBeautyBusiness"

	// HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using
	// [[hasHealthAspect]] and [[HealthTopicContent]].
	HealthAspectEnumeration_Class = Base + "HealthAspectEnumeration"

	// HealthCare: this is a benefit for health care.
	HealthCare_GovernmentBenefitsType = Base + "HealthCare"

	// A health club.
	HealthClub_Class = Base + "HealthClub"

	// Specifying the health condition(s) of a patient, medical study, or other target audience.
	HealthCondition_Property = Base + "healthCondition"

	// A US-style health insurance plan, including PPOs, EPOs, and HMOs.
	HealthInsurancePlan_Class = Base + "HealthInsurancePlan"

	// Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanCoinsuranceOption_Property = Base + "healthPlanCoinsuranceOption"

	// The rate of coinsurance expressed as a number between 0.0 and 1.0.
	HealthPlanCoinsuranceRate_Property = Base + "healthPlanCoinsuranceRate"

	// Whether the copay is before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanCopayOption_Property = Base + "healthPlanCopayOption"

	// The copay amount.
	HealthPlanCopay_Property = Base + "healthPlanCopay"

	// A description of costs to the patient under a given network or formulary.
	HealthPlanCostSharingSpecification_Class = Base + "HealthPlanCostSharingSpecification"

	// The costs to the patient for services under this network or formulary.
	HealthPlanCostSharing_Property = Base + "healthPlanCostSharing"

	// TODO.
	HealthPlanDrugOption_Property = Base + "healthPlanDrugOption"

	// The tier(s) of drugs offered by this formulary or insurance plan.
	HealthPlanDrugTier_Property = Base + "healthPlanDrugTier"

	// For a given health insurance plan, the specification for costs and coverage of prescription drugs.
	HealthPlanFormulary_Class = Base + "HealthPlanFormulary"

	// The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)
	HealthPlanId_Property = Base + "healthPlanId"

	// The URL that goes directly to the plan brochure for the specific standard plan or plan variation.
	HealthPlanMarketingUrl_Property = Base + "healthPlanMarketingUrl"

	// Name or unique ID of network. (Networks are often reused across different insurance plans.)
	HealthPlanNetworkId_Property = Base + "healthPlanNetworkId"

	// The tier(s) for this network.
	HealthPlanNetworkTier_Property = Base + "healthPlanNetworkTier"

	// A US-style health insurance plan network.
	HealthPlanNetwork_Class = Base + "HealthPlanNetwork"

	// The category or type of pharmacy associated with this cost sharing.
	HealthPlanPharmacyCategory_Property = Base + "healthPlanPharmacyCategory"

	// [[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its
	// symptoms or treatments. Such content may be comprised of several parts or sections and use different types of
	// media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] /
	// [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and
	// [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.
	HealthTopicContent_Class = Base + "HealthTopicContent"

	// Item is a pharmaceutical (e.g., a prescription or OTC drug) or a restricted medical device.
	HealthcareConsideration_AdultOrientedEnumeration = Base + "HealthcareConsideration"

	// Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of [[Dataset]].
	HealthcareReportingData_Property = Base + "healthcareReportingData"

	// Uses devices to support users with hearing impairments.
	HearingImpairedSupported_ContactPointOption = Base + "HearingImpairedSupported"

	// The height of the item.
	Height_Property = Base + "height"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of blood and blood
	// producing organs.
	Hematologic_MedicalSpecialty = Base + "Hematologic"

	// The highest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT
	// ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode
	// 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability
	// separator.
	HighPrice_Property = Base + "highPrice"

	// A high school.
	HighSchool_Class = Base + "HighSchool"

	// A diet conforming to Hindu dietary practices, in particular, beef-free.
	HinduDiet_RestrictedDiet = Base + "HinduDiet"

	// A Hindu temple.
	HinduTemple_Class = Base + "HinduTemple"

	// Organization or Person offering the job position.
	HiringOrganization_Property = Base + "hiringOrganization"

	// A store that sells materials useful or necessary for various hobbies.
	HobbyShop_Class = Base + "HobbyShop"

	// [[ArchiveOrganization]] that holds, keeps or maintains the [[ArchiveComponent]].
	HoldingArchive_Property = Base + "holdingArchive"

	// A construction business.\n\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around
	// homes and buildings.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more
	// [[Service]]\(s).
	HomeAndConstructionBusiness_Class = Base + "HomeAndConstructionBusiness"

	// A home goods store.
	HomeGoodsStore_Class = Base + "HomeGoodsStore"

	// A contact location for a person's residence.
	HomeLocation_Property = Base + "homeLocation"

	// The home team in a sports event.
	HomeTeam_Property = Base + "homeTeam"

	// A system of medicine based on the principle that a disease can be cured by a substance that produces similar
	// symptoms in healthy people.
	Homeopathic_MedicineSystem = Base + "Homeopathic"

	// An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
	HonorificPrefix_Property = Base + "honorificPrefix"

	// An honorific suffix following a Person's name such as M.D./PhD/MSCSW.
	HonorificSuffix_Property = Base + "honorificSuffix"

	// A hospital with which the physician or office is affiliated.
	HospitalAffiliation_Property = Base + "hospitalAffiliation"

	// A hospital.
	Hospital_Class = Base + "Hospital"

	// A hostel - cheap accommodation, often in shared dormitories. <br /><br /> See also the <a
	// href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of
	// accommodations</a>.
	Hostel_Class = Base + "Hostel"

	// The Organization (airline, travelers' club, retailer, etc.) the membership is made with or which offers the
	// MemberProgram.
	HostingOrganization_Property = Base + "hostingOrganization"

	// A hotel room is a single room in a hotel. <br /><br /> See also the <a href="/docs/hotels.html">dedicated document
	// on the use of schema.org for marking up hotels and other forms of accommodations</a>.
	HotelRoom_Class = Base + "HotelRoom"

	// A hotel is an establishment that provides lodging paid on a short-term basis (source: Wikipedia, the free
	// encyclopedia, see http://en.wikipedia.org/wiki/Hotel). <br /><br /> See also the <a
	// href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of
	// accommodations</a>.
	Hotel_Class = Base + "Hotel"

	// The hours during which this service or contact is available.
	HoursAvailable_Property = Base + "hoursAvailable"

	// A house painting service.
	HousePainter_Class = Base + "HousePainter"

	// A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures
	// (source: Wikipedia, the free encyclopedia, see <a
	// href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
	House_Class = Base + "House"

	// Content that discusses and explains how a particular health-related topic works, e.g. in terms of mechanisms and
	// underlying science.
	HowItWorksHealthAspect_HealthAspectEnumeration = Base + "HowItWorksHealthAspect"

	// Information about how or where to find a topic. Also may contain location data that can be used for where to look
	// for help if the topic is observed.
	HowOrWhereHealthAspect_HealthAspectEnumeration = Base + "HowOrWhereHealthAspect"

	// How the procedure is performed.
	HowPerformed_Property = Base + "howPerformed"

	// A direction indicating a single action to do in the instructions for how to achieve a result.
	HowToDirection_Class = Base + "HowToDirection"

	// An item used as either a tool or supply when performing the instructions for how to achieve a result.
	HowToItem_Class = Base + "HowToItem"

	// A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a
	// pie recipe).
	HowToSection_Class = Base + "HowToSection"

	// A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip
	// items.
	HowToStep_Class = Base + "HowToStep"

	// A supply consumed when performing the instructions for how to achieve a result.
	HowToSupply_Class = Base + "HowToSupply"

	// An explanation in the instructions for how to achieve a result. It provides supplementary information about a
	// technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but
	// doesn't specify what should be done (see HowToDirection).
	HowToTip_Class = Base + "HowToTip"

	// A tool used (but not consumed) when performing instructions for how to achieve a result.
	HowToTool_Class = Base + "HowToTool"

	// Instructions that explain how to achieve a result by performing a sequence of steps.
	HowTo_Class = Base + "HowTo"

	// An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are
	// capitalized strings as used in HTTP.
	HttpMethod_Property = Base + "httpMethod"

	// A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media
	// objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]].
	// Each section of interest within that content can be described with a [[HyperTocEntry]], with associated
	// [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on
	// the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using
	// [[associatedMedia]] on each [[HyperTocEntry]].
	HyperTocEntry_Class = Base + "HyperTocEntry"

	// A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]],
	// [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed
	// [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be
	// used on individual [[HyperTocEntry]] items.
	HyperToc_Class = Base + "HyperToc"

	// Represents the broad notion of iOS-based operating systems.
	IOSPlatform_DigitalPlatformEnumeration = Base + "IOSPlatform"

	// <a href="https://www.iptc.org/">IPTC</a> "Digital Source" codes for use with the [[digitalSourceType]] property,
	// providing information about the source for a digital media object. In general these codes are not declared here to
	// be mutually exclusive, although some combinations would be contradictory if applied simultaneously, or might be
	// considered mutually incompatible by upstream maintainers of the definitions. See the IPTC <a
	// href="https://www.iptc.org/std/photometadata/documentation/userguide/">documentation</a> for <a
	// href="https://cv.iptc.org/newscodes/digitalsourcetype/">detailed definitions</a> of all terms.
	IPTCDigitalSourceEnumeration_Class = Base + "IPTCDigitalSourceEnumeration"

	// IATA identifier for an airline or airport.
	IataCode_Property = Base + "iataCode"

	// ICAO identifier for an airport.
	IcaoCode_Property = Base + "icaoCode"

	// An ice cream shop.
	IceCreamShop_Class = Base + "IceCreamShop"

	// The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes,
	// UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as
	// URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
	Identifier_Property = Base + "identifier"

	// A physical examination that can identify this sign.
	IdentifyingExam_Property = Base + "identifyingExam"

	// A diagnostic test that can identify this sign.
	IdentifyingTest_Property = Base + "identifyingTest"

	// The act of intentionally disregarding the object. An agent ignores an object.
	IgnoreAction_Class = Base + "IgnoreAction"

	// The illustrator of the book.
	Illustrator_Property = Base + "illustrator"

	// Web page type: Image gallery page.
	ImageGallery_Class = Base + "ImageGallery"

	// A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the
	// purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files
	// will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their
	// actual content, do not affect this notion of identity.
	ImageObjectSnapshot_Class = Base + "ImageObjectSnapshot"

	// An image file.
	ImageObject_Class = Base + "ImageObject"

	// An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
	Image_Property = Base + "image"

	// Imaging technique used.
	ImagingTechnique_Property = Base + "imagingTechnique"

	// Any medical imaging modality typically used for diagnostic purposes.
	ImagingTest_Class = Base + "ImagingTest"

	// The album to which this recording belongs.
	InAlbum_Property = Base + "inAlbum"

	// The CableOrSatelliteService offering the channel.
	InBroadcastLineup_Property = Base + "inBroadcastLineup"

	// InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).
	InChIKey_Property = Base + "inChIKey"

	// Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus
	// enabling easier linking of diverse data compilations.
	InChI_Property = Base + "inChI"

	// A [[CategoryCodeSet]] that contains this category code.
	InCodeSet_Property = Base + "inCodeSet"

	// A [[DefinedTermSet]] that contains this term.
	InDefinedTermSet_Property = Base + "inDefinedTermSet"

	// Indicates that a legislation is in force.
	InForce_LegalForceStatus = Base + "InForce"

	// The language of the content or performance or used in an action. Please use one of the language codes from the
	// [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	InLanguage_Property = Base + "inLanguage"

	// The playlist to which this recording belongs.
	InPlaylist_Property = Base + "inPlaylist"

	// Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]].
	InProductGroupWithID_Property = Base + "inProductGroupWithID"

	// Indicates that the item is in stock.
	InStock_ItemAvailability = Base + "InStock"

	// Indicates that the item is available only at physical locations.
	InStoreOnly_ItemAvailability = Base + "InStoreOnly"

	// Payment in advance in some form of shop or kiosk for goods purchased online.
	InStorePrepay_PaymentMethodType = Base + "InStorePrepay"

	// Are in-store returns offered? (For more advanced return methods use the [[returnMethod]] property.)
	InStoreReturnsOffered_Property = Base + "inStoreReturnsOffered"

	// Qualification, candidature, degree, application that Thesis supports.
	InSupportOf_Property = Base + "inSupportOf"

	// Describes the amount that can be redeemed from this incentive. <p>[[QuantitativeValue]]: Use this for incentives
	// based on price (either raw amount or percentage-based). For a raw amount example, "You can claim $2,500 - $7,500
	// from the total cost of installation" would be represented as the following:</p> { "@type": "QuantitativeValue",
	// “minValue”: 2500, “maxValue”: 7500, "unitCode": "USD" } <p>[[QuantitivateValue]] can also be used for percentage
	// amounts. In such cases, value is used to represent the incentive’s percentage, while maxValue represents a limit
	// (if one exists) to that incentive. The unitCode should be 'P1' and the unitText should be '%', while valueReference
	// should be used for holding the currency type. For example, "You can claim up to 30% of the total cost of
	// installation, up to a maximum of $7,500" would be:</p> { "@type": "QuantitativeValue", "value": 30, "unitCode":
	// "P1", "unitText": "%", “maxValue”: 7500, “valueReference”: “USD” } <p>[[UnitPriceSpecification]]: Use this for
	// incentives that are based on amounts rather than price. For example, a net metering rebate that pays $10/kWh, up to
	// $1,000:</p> { "@type": "UnitPriceSpecification", "price": 10, "priceCurrency": "USD", "referenceQuantity": 1,
	// "unitCode": "DO3", "unitText": "kw/h", "maxPrice": 1000, "description": "$10 / kwh up to $1000" }
	// <p>[[LoanOrCredit]]: Use for incentives that are loan based. For example, a loan of $4,000 - $50,000 with a
	// repayment term of 10 years, interest free would look like:</p> { "@type": "LoanOrCredit", "loanTerm": {
	// "@type":"QuantitativeValue", "value":"10", "unitCode": "ANN" }, "amount":[ { "@type": "QuantitativeValue",
	// "Name":"fixed interest rate", "value":"0", }, ], "amount":[ { "@type": "MonetaryAmount", "Name":"min loan amount",
	// "value":"4000", "currency":"CAD" }, { "@type": "MonetaryAmount", "Name":"max loan amount", "value":"50000",
	// "currency":"CAD" } ], } In summary: <ul><li>Use [[QuantitativeValue]] for absolute/percentage-based incentives
	// applied on the price of a good/service.</li> <li>Use [[UnitPriceSpecification]] for incentives based on a per-unit
	// basis (e.g. net metering).</li> <li>Use [[LoanOrCredit]] for loans/credits.</li> </ul>.
	IncentiveAmount_Property = Base + "incentiveAmount"

	// Description of bonus and commission compensation aspects of the job.
	IncentiveCompensation_Property = Base + "incentiveCompensation"

	// This incentive applies to goods only.
	IncentiveQualifiedExpenseTypeGoodsOnly_IncentiveQualifiedExpenseType = Base + "IncentiveQualifiedExpenseTypeGoodsOnly"

	// This incentive can apply to either goods or services (or both).
	IncentiveQualifiedExpenseTypeGoodsOrServices_IncentiveQualifiedExpenseType = Base + "IncentiveQualifiedExpenseTypeGoodsOrServices"

	// This incentive applies to services only.
	IncentiveQualifiedExpenseTypeServicesOnly_IncentiveQualifiedExpenseType = Base + "IncentiveQualifiedExpenseTypeServicesOnly"

	// This incentive applies to utility bills.
	IncentiveQualifiedExpenseTypeUtilityBill_IncentiveQualifiedExpenseType = Base + "IncentiveQualifiedExpenseTypeUtilityBill"

	// The types of expenses that are covered by the incentive. For example some incentives are only for the goods
	// (tangible items) but the services (labor) are excluded.
	IncentiveQualifiedExpenseType_Class = Base + "IncentiveQualifiedExpenseType"

	// This incentive is currently active.
	IncentiveStatusActive_IncentiveStatus = Base + "IncentiveStatusActive"

	// This incentive is currently being developed, and may become active/retired in the future.
	IncentiveStatusInDevelopment_IncentiveStatus = Base + "IncentiveStatusInDevelopment"

	// This incentive is currently active, but may not be accepting new applicants (e.g. max number of redemptions reached
	// for a year)
	IncentiveStatusOnHold_IncentiveStatus = Base + "IncentiveStatusOnHold"

	// This incentive is not longer available.
	IncentiveStatusRetired_IncentiveStatus = Base + "IncentiveStatusRetired"

	// Enumerates a status for an incentive, such as whether it is active.
	IncentiveStatus_Class = Base + "IncentiveStatus"

	// The status of the incentive (active, on hold, retired, etc.).
	IncentiveStatus_Property = Base + "incentiveStatus"

	// An incentive where the recipient can receive additional funding for the purchase/lease of the good/service, which
	// must be paid back.
	IncentiveTypeLoan_IncentiveType = Base + "IncentiveTypeLoan"

	// An incentive that reduces the purchase/lease cost of the good/service in question.
	IncentiveTypeRebateOrSubsidy_IncentiveType = Base + "IncentiveTypeRebateOrSubsidy"

	// An incentive that directly reduces the amount of tax owed by the recipient.
	IncentiveTypeTaxCredit_IncentiveType = Base + "IncentiveTypeTaxCredit"

	// An incentive that reduces the recipient's amount of taxable income.
	IncentiveTypeTaxDeduction_IncentiveType = Base + "IncentiveTypeTaxDeduction"

	// An incentive that reduces/exempts the recipient from taxation applicable to the incentivized good/service (e.g.
	// luxury taxes, registration taxes, circulation tax).
	IncentiveTypeTaxWaiver_IncentiveType = Base + "IncentiveTypeTaxWaiver"

	// Enumerates common financial incentives for products, including tax credits, tax deductions, rebates and subsidies,
	// etc.
	IncentiveType_Class = Base + "IncentiveType"

	// The type of incentive offered (tax credit/rebate, tax deduction, tax waiver, subsidies, etc.).
	IncentiveType_Property = Base + "incentiveType"

	// Description of bonus and commission compensation aspects of the job.
	Incentives_Property = Base + "incentives"

	// The type or specific product(s) and/or service(s) being incentivized. <p>DefinedTermSets are used for product and
	// service categories such as the United Nations Standard Products and Services Code:</p> { "@type": "DefinedTerm",
	// "inDefinedTermSet": "https://www.unspsc.org/", "termCode": "261315XX", "name": "Photovoltaic module" } <p>For a
	// specific product or service, use the Product type:</p> { "@type": "Product", "name": "Kenmore White 17" Microwave",
	// } For multiple different incentivized items, use multiple [[DefinedTerm]] or [[Product]].
	IncentivizedItem_Property = Base + "incentivizedItem"

	// Smaller compositions included in this work (e.g. a movement in a symphony).
	IncludedComposition_Property = Base + "includedComposition"

	// A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now
	// 'includedInDataCatalog').
	IncludedDataCatalog_Property = Base + "includedDataCatalog"

	// A data catalog which contains this dataset.
	IncludedInDataCatalog_Property = Base + "includedInDataCatalog"

	// The insurance plans that cover this drug.
	IncludedInHealthInsurancePlan_Property = Base + "includedInHealthInsurancePlan"

	// A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.
	IncludedRiskFactor_Property = Base + "includedRiskFactor"

	// Attraction located at destination.
	IncludesAttraction_Property = Base + "includesAttraction"

	// Formularies covered by this plan.
	IncludesHealthPlanFormulary_Property = Base + "includesHealthPlanFormulary"

	// Networks covered by this plan.
	IncludesHealthPlanNetwork_Property = Base + "includesHealthPlanNetwork"

	// This links to a node or nodes indicating the exact quantity of the products included in an [[Offer]] or
	// [[ProductCollection]].
	IncludesObject_Property = Base + "includesObject"

	// Optional. Income limit for which the incentive is applicable for. <p>If MonetaryAmount is specified, this should be
	// based on annualized income (e.g. if an incentive is limited to those making <$114,000 annually):</p> { "@type":
	// "MonetaryAmount", "maxValue": 114000, "currency": "USD", } Use Text for incentives that are limited based on other
	// criteria, for example if an incentive is only available to recipients making 120% of the median poverty income in
	// their area.
	IncomeLimit_Property = Base + "incomeLimit"

	// The condition, complication, etc. influenced by this factor.
	IncreasesRiskOf_Property = Base + "increasesRiskOf"

	// An individual medical practitioner. For their official address use [[address]], for affiliations to hospitals use
	// [[hospitalAffiliation]]. The [[practicesAt]] property can be used to indicate [[MedicalOrganization]] hospitals,
	// clinics, pharmacies etc. where this physician practices.
	IndividualPhysician_Class = Base + "IndividualPhysician"

	// A single, identifiable product instance (e.g. a laptop with a particular serial number).
	IndividualProduct_Class = Base + "IndividualProduct"

	// The industry associated with the job position.
	Industry_Property = Base + "industry"

	// The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s)
	// for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not
	// allowed.\n\nSee also [[eligibleRegion]].
	IneligibleRegion_Property = Base + "ineligibleRegion"

	// Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
	InfectiousAgentClass_Class = Base + "InfectiousAgentClass"

	// The class of infectious agent (bacteria, prion, etc.) that causes the disease.
	InfectiousAgentClass_Property = Base + "infectiousAgentClass"

	// The actual infectious agent, such as a specific bacterium.
	InfectiousAgent_Property = Base + "infectiousAgent"

	// An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial
	// agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be
	// considered an infectious disease, such pathogens are known to be able to cause this disease.
	InfectiousDisease_Class = Base + "InfectiousDisease"

	// Something in medical science that pertains to infectious diseases, i.e. caused by bacterial, viral, fungal or
	// parasitic infections.
	Infectious_MedicalSpecialty = Base + "Infectious"

	// The act of notifying someone of information pertinent to them, with no expectation of a response.
	InformAction_Class = Base + "InformAction"

	// Content discussing ingredients-related aspects of a health topic.
	IngredientsHealthAspect_HealthAspectEnumeration = Base + "IngredientsHealthAspect"

	// A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	Ingredients_Property = Base + "ingredients"

	// The individual who traces over the pencil drawings in ink after pencils are complete.
	Inker_Property = Base + "inker"

	// The act of adding at a specific location in an ordered collection.
	InsertAction_Class = Base + "InsertAction"

	// The place of attachment of a muscle, or what the muscle moves.
	Insertion_Property = Base + "insertion"

	// The act of installing an application.
	InstallAction_Class = Base + "InstallAction"

	// URL at which the app may be installed, if different from the URL of the item.
	InstallUrl_Property = Base + "installUrl"

	// Represents the installment pricing component of the total price for an offered product.
	Installment_PriceComponentTypeEnumeration = Base + "Installment"

	// A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].
	Instructor_Property = Base + "instructor"

	// The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.
	Instrument_Property = Base + "instrument"

	// An Insurance agency.
	InsuranceAgency_Class = Base + "InsuranceAgency"

	// A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured
	// values, etc.
	Intangible_Class = Base + "Intangible"

	// Data type: Integer.
	Integer_Class = Base + "Integer"

	// Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May
	// include the velocity of the movement.
	Intensity_Property = Base + "intensity"

	// The act of interacting with another person or organization.
	InteractAction_Class = Base + "InteractAction"

	// Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a
	// risk to the patient. Note: disease interactions are typically captured as contraindications.
	InteractingDrug_Property = Base + "interactingDrug"

	// This property is deprecated, alongside the UserInteraction types on which it depended.
	InteractionCount_Property = Base + "interactionCount"

	// A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify
	// the specific type of interaction.
	InteractionCounter_Class = Base + "InteractionCounter"

	// The WebSite or SoftwareApplication where the interactions took place.
	InteractionService_Property = Base + "interactionService"

	// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child
	// type of InteractionCounter should be used.
	InteractionStatistic_Property = Base + "interactionStatistic"

	// The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use
	// [[DislikeAction]]. Otherwise, use the most specific Action.
	InteractionType_Property = Base + "interactionType"

	// The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive',
	// or 'mixed'.
	InteractivityType_Property = Base + "interactivityType"

	// The interest rate, charged or paid, applicable to the financial product. Note: This is different from the
	// calculated annualPercentageRate.
	InterestRate_Property = Base + "interestRate"

	// An international trial.
	InternationalTrial_MedicalTrialDesign = Base + "InternationalTrial"

	// An internet cafe.
	InternetCafe_Class = Base + "InternetCafe"

	// Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]]
	// or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
	InterpretedAsClaim_Property = Base + "interpretedAsClaim"

	// The current approximate inventory level for the item or items.
	InventoryLevel_Property = Base + "inventoryLevel"

	// Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each
	// other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other.
	// Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties
	// can be used.
	InverseOf_Property = Base + "inverseOf"

	// A company or fund that gathers capital from a number of investors to create a pool of money that is then
	// re-invested into stocks, bonds and other assets.
	InvestmentFund_Class = Base + "InvestmentFund"

	// A type of financial product that typically requires the client to transfer funds to a financial service in return
	// for potential beneficial financial return.
	InvestmentOrDeposit_Class = Base + "InvestmentOrDeposit"

	// The act of asking someone to attend an event. Reciprocal of RsvpAction.
	InviteAction_Class = Base + "InviteAction"

	// Represents the invoice price of an offered product.
	InvoicePrice_PriceTypeEnumeration = Base + "InvoicePrice"

	// A statement of the money due for goods or services; a bill.
	Invoice_Class = Base + "Invoice"

	// Whether the provider is accepting new patients.
	IsAcceptingNewPatients_Property = Base + "isAcceptingNewPatients"

	// A flag to signal that the item, event, or place is accessible for free.
	IsAccessibleForFree_Property = Base + "isAccessibleForFree"

	// A pointer to another product (or multiple products) for which this product is an accessory or spare part.
	IsAccessoryOrSparePartFor_Property = Base + "isAccessoryOrSparePartFor"

	// True if the drug is available in a generic form (regardless of name).
	IsAvailableGenerically_Property = Base + "isAvailableGenerically"

	// A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For
	// example, http://example.com/great-multiplication-intro.html.
	IsBasedOnUrl_Property = Base + "isBasedOnUrl"

	// A resource from which this work is derived or from which it is a modification or adaptation.
	IsBasedOn_Property = Base + "isBasedOn"

	// A pointer to another product (or multiple products) for which this product is a consumable.
	IsConsumableFor_Property = Base + "isConsumableFor"

	// Another BioChemEntity encoding by this one.
	IsEncodedByBioChemEntity_Property = Base + "isEncodedByBioChemEntity"

	// Indicates whether this content is family friendly.
	IsFamilyFriendly_Property = Base + "isFamilyFriendly"

	// Indicates whether the offer was accepted as a gift for someone other than the buyer.
	IsGift_Property = Base + "isGift"

	// Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.
	IsInvolvedInBiologicalProcess_Property = Base + "isInvolvedInBiologicalProcess"

	// True if the broadcast is of a live event.
	IsLiveBroadcast_Property = Base + "isLiveBroadcast"

	// Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any
	// evidence.
	IsLocatedInSubcellularLocation_Property = Base + "isLocatedInSubcellularLocation"

	// Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.
	IsPartOfBioChemEntity_Property = Base + "isPartOfBioChemEntity"

	// Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
	IsPartOf_Property = Base + "isPartOf"

	// Indicates some accommodation that this floor plan describes.
	IsPlanForApartment_Property = Base + "isPlanForApartment"

	// True if this item's name is a proprietary/brand name (vs. generic name).
	IsProprietary_Property = Base + "isProprietary"

	// A pointer to another, somehow related product (or multiple products).
	IsRelatedTo_Property = Base + "isRelatedTo"

	// Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to
	// be resized to reflect reality.
	IsResizable_Property = Base + "isResizable"

	// A pointer to another, functionally similar product (or multiple products).
	IsSimilarTo_Property = Base + "isSimilarTo"

	// The member program this tier is a part of.
	IsTierOf_Property = Base + "isTierOf"

	// This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are
	// intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a
	// [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside
	// a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this
	// property is for use with unlabelled settings.
	IsUnlabelledFallback_Property = Base + "isUnlabelledFallback"

	// Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a
	// ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits
	// all product features from the base model, unless defined locally. This is not transitive. In the case of a
	// [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on
	// explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values
	// distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]]
	// included in the group.
	IsVariantOf_Property = Base + "isVariantOf"

	// The ISBN of the book.
	Isbn_Property = Base + "isbn"

	// The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a
	// particular organization, business person, or place.
	IsicV4_Property = Base + "isicV4"

	// An organization identifier as defined in [ISO 6523(-1)](https://en.wikipedia.org/wiki/ISO/IEC_6523). The identifier
	// should be in the `XXXX:YYYYYY:ZZZ` or `XXXX:YYYYYY`format. Where `XXXX` is a 4 digit _ICD_ (International Code
	// Designator), `YYYYYY` is an _OID_ (Organization Identifier) with all formatting characters (dots, dashes, spaces)
	// removed with a maximal length of 35 characters, and `ZZZ` is an optional OPI (Organization Part Identifier) with a
	// maximum length of 35 characters. The various components (ICD, OID, OPI) are joined with a colon character (ASCII
	// `0x3a`). Note that many existing organization identifiers defined as attributes like
	// [leiCode](http://schema.org/leiCode) (`0199`), [duns](http://schema.org/duns) (`0060`) or
	// [GLN](http://schema.org/globalLocationNumber) (`0088`) can be expressed using ISO-6523. If possible, ISO-6523 codes
	// should be preferred to populating [vatID](http://schema.org/vatID) or [taxID](http://schema.org/taxID), as ISO
	// identifiers are less ambiguous.
	Iso6523Code_Property = Base + "iso6523Code"

	// The International Standard Recording Code for the recording.
	IsrcCode_Property = Base + "isrcCode"

	// The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this
	// property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
	Issn_Property = Base + "issn"

	// Identifies the issue of publication; for example, "iii" or "2".
	IssueNumber_Property = Base + "issueNumber"

	// The organization issuing the item, for example a [[Permit]], [[Ticket]], or [[Certification]].
	IssuedBy_Property = Base + "issuedBy"

	// The service through which the permit was granted.
	IssuedThrough_Property = Base + "issuedThrough"

	// The International Standard Musical Work Code for the composition.
	IswcCode_Property = Base + "iswcCode"

	// A list of possible product availability options.
	ItemAvailability_Class = Base + "ItemAvailability"

	// A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or
	// services included in the offer. Also used for product return policies to specify the condition of products accepted
	// for returns.
	ItemCondition_Property = Base + "itemCondition"

	// The type of return fees for returns of defect products.
	ItemDefectReturnFees_Property = Base + "itemDefectReturnFees"

	// The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.
	ItemDefectReturnLabelSource_Property = Base + "itemDefectReturnLabelSource"

	// Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]] equals
	// [[ReturnShippingFees]].
	ItemDefectReturnShippingFeesAmount_Property = Base + "itemDefectReturnShippingFeesAmount"

	// For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use
	// ListItem.\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a
	// simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to
	// provide additional context about the element in that list or when the same item might be in different places in
	// different lists.\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or
	// elements. Use ListItem with a 'position' property in such cases.
	ItemListElement_Property = Base + "itemListElement"

	// An ItemList ordered with lower values listed first.
	ItemListOrderAscending_ItemListOrderType = Base + "ItemListOrderAscending"

	// An ItemList ordered with higher values listed first.
	ItemListOrderDescending_ItemListOrderType = Base + "ItemListOrderDescending"

	// Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
	ItemListOrderType_Class = Base + "ItemListOrderType"

	// Type of ordering (e.g. Ascending, Descending, Unordered).
	ItemListOrder_Property = Base + "itemListOrder"

	// An ItemList ordered with no explicit order.
	ItemListUnordered_ItemListOrderType = Base + "ItemListUnordered"

	// A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be
	// confused with HTML lists, which are often used only for formatting.
	ItemList_Class = Base + "ItemList"

	// Current location of the item.
	ItemLocation_Property = Base + "itemLocation"

	// An item being offered (or demanded). The transactional nature of the offer or demand is documented using
	// [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this
	// definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the
	// nature of the offer.
	ItemOffered_Property = Base + "itemOffered"

	// A page devoted to a single item, such as a particular product or hotel.
	ItemPage_Class = Base + "ItemPage"

	// The item that is being reviewed/rated.
	ItemReviewed_Property = Base + "itemReviewed"

	// Item(s) being shipped.
	ItemShipped_Property = Base + "itemShipped"

	// An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists').
	Item_Property = Base + "item"

	// Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is important use [[ItemList]]
	// to specify that order (see examples).
	Itinerary_Property = Base + "itinerary"

	// Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied
	// Chemistry (IUPAC).
	IupacName_Property = Base + "iupacName"

	// A jewelry store.
	JewelryStore_Class = Base + "JewelryStore"

	// Description of benefits associated with the job.
	JobBenefits_Property = Base + "jobBenefits"

	// An indicator as to whether a position is available for an immediate start.
	JobImmediateStart_Property = Base + "jobImmediateStart"

	// A description of the job location (e.g. TELECOMMUTE for telecommute jobs).
	JobLocationType_Property = Base + "jobLocationType"

	// A (typically single) geographic location associated with the job position.
	JobLocation_Property = Base + "jobLocation"

	// A listing that describes a job opening in a certain organization.
	JobPosting_Class = Base + "JobPosting"

	// The date on which a successful applicant for this job would be expected to start work. Choose a specific date in
	// the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
	JobStartDate_Property = Base + "jobStartDate"

	// The job title of the person (for example, Financial Manager).
	JobTitle_Property = Base + "jobTitle"

	// An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* [[RegisterAction]]:
	// Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* [[SubscribeAction]]: Unlike
	// SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* [[FollowAction]]: Unlike
	// FollowAction, JoinAction does not imply that you'll be polling for updates.
	JoinAction_Class = Base + "JoinAction"

	// The anatomical location at which two or more bones make contact.
	Joint_Class = Base + "Joint"

	// Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
	Jurisdiction_Property = Base + "jurisdiction"

	// Specifies that the consumer can keep the product, even when receiving a refund or store credit.
	KeepProduct_ReturnMethodEnumeration = Base + "KeepProduct"

	// Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by
	// commas, or by repeating the property.
	Keywords_Property = Base + "keywords"

	// A textual description of known damages, both repaired and unrepaired.
	KnownVehicleDamages_Property = Base + "knownVehicleDamages"

	// Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting
	// possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational
	// content, events, objectives or [[JobPosting]] descriptions.
	KnowsAbout_Property = Base + "knowsAbout"

	// Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish
	// skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47
	// standard](http://tools.ietf.org/html/bcp47).
	KnowsLanguage_Property = Base + "knowsLanguage"

	// The most generic bi-directional social/work relation.
	Knows_Property = Base + "knows"

	// A diet conforming to Jewish dietary practices.
	KosherDiet_RestrictedDiet = Base + "KosherDiet"

	// Link to the drug's label details.
	LabelDetails_Property = Base + "labelDetails"

	// A medical science pertaining to chemical, hematological, immunologic, microscopic, or bacteriological diagnostic
	// analyses or research.
	LaboratoryScience_MedicalSpecialty = Base + "LaboratoryScience"

	// A lake (for example, Lake Pontrachain).
	LakeBodyOfWater_Class = Base + "LakeBodyOfWater"

	// A landform or physical feature. Landform elements include mountains, plains, lakes, rivers, seascape and oceanic
	// waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features
	// such as submersed mountain ranges, volcanoes, and the great ocean basins.
	Landform_Class = Base + "Landform"

	// A sub property of participant. The owner of the real estate property.
	Landlord_Property = Base + "landlord"

	// An historical landmark or building.
	LandmarksOrHistoricalBuildings_Class = Base + "LandmarksOrHistoricalBuildings"

	// Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP
	// 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language
	// type previously also covered programming languages such as Scheme and Lisp, which are now best represented using
	// [[ComputerLanguage]].
	Language_Class = Base + "Language"

	// A sub property of instrument. The language used on this action.
	Language_Property = Base + "language"

	// LaserDiscFormat.
	LaserDiscFormat_MusicReleaseFormatType = Base + "LaserDiscFormat"

	// Date on which the content on this web page was last reviewed for accuracy and/or completeness.
	LastReviewed_Property = Base + "lastReviewed"

	// The latitude of a location. For example ```37.42242``` ([WGS
	// 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Latitude_Property = Base + "latitude"

	// A schematic image showing the floorplan layout.
	LayoutImage_Property = Base + "layoutImage"

	// The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
	LearningResourceType_Property = Base + "learningResourceType"

	// The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a
	// particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.
	// [[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]],
	// [[Product]] etc. [[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A
	// [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.
	LearningResource_Class = Base + "LearningResource"

	// Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to
	// the property.
	LeaseLength_Property = Base + "leaseLength"

	// An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* [[JoinAction]]:
	// The antonym of LeaveAction.\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a
	// group/team of people rather than a service.
	LeaveAction_Class = Base + "LeaveAction"

	// The steering position is on the left side of the vehicle (viewed from the main direction of driving).
	LeftHandDriving_SteeringPositionValue = Base + "LeftHandDriving"

	// The legal address of an organization which acts as the officially registered address used for legal and tax
	// purposes. The legal address can be different from the place of operations of a business and other addresses can be
	// part of an organization.
	LegalAddress_Property = Base + "legalAddress"

	// A list of possible statuses for the legal force of a legislation.
	LegalForceStatus_Class = Base + "LegalForceStatus"

	// The official name of the organization, e.g. the registered company name.
	LegalName_Property = Base + "legalName"

	// One or multiple persons who represent this organization legally such as CEO or sole administrator.
	LegalRepresentative_Property = Base + "legalRepresentative"

	// A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law
	// firms.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
	LegalService_Class = Base + "LegalService"

	// The drug or supplement's legal status, including any controlled substance schedules that apply.
	LegalStatus_Property = Base + "legalStatus"

	// A list of possible levels for the legal validity of a legislation.
	LegalValueLevel_Class = Base + "LegalValueLevel"

	// Another legislation that this legislation amends, introducing legal changes.
	LegislationAmends_Property = Base + "legislationAmends"

	// Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different
	// legislative context. This is an informative link, and it has no legal value. For legally-binding links of
	// transposition, use the <a href="/legislationTransposes">legislationTransposes</a> property. For example an
	// informative consolidated law of a European Union's member state "applies" the consolidated version of the European
	// Directive implemented in it.
	LegislationApplies_Property = Base + "legislationApplies"

	// Another legislation that this legislation changes. This encompasses the notions of amendment, replacement,
	// correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a
	// consequential or indirect change. The property is to be used to express the existence of a change relationship
	// between two acts rather than the existence of a consolidated version of the text that shows the result of the
	// change. For consolidation relationships, use the <a href="/legislationConsolidates">legislationConsolidates</a>
	// property.
	LegislationChanges_Property = Base + "legislationChanges"

	// Another legislation that this one sets into force.
	LegislationCommences_Property = Base + "legislationCommences"

	// Indicates another legislation taken into account in this consolidated legislation (which is usually the product of
	// an editorial process that revises the legislation). This property should be used multiple times to refer to both
	// the original version or the previous consolidated version, and to the legislations making the change.
	LegislationConsolidates_Property = Base + "legislationConsolidates"

	// Another legislation in which this one introduces textual changes, like correction of spelling mistakes, with no
	// legal impact (for modifications that have legal impact, use <a href="/legislationAmends">legislationAmends</a>).
	LegislationCorrects_Property = Base + "legislationCorrects"

	// The person or organization that countersigned the legislation. Depending on the legal context, a countersignature
	// can indicate that the signed authority undertakes to assume responsibility for texts emanating from a person who is
	// inviolable and irresponsible, (for example a King, Grand Duc or President), or that the authority is in charge of
	// the implementation of the text.
	LegislationCountersignedBy_Property = Base + "legislationCountersignedBy"

	// The date at which the Legislation becomes applicable. This can sometimes be distinct from the date of entry into
	// force : a text may come in force today, and state it will become applicable in 3 months.
	LegislationDateOfApplicability_Property = Base + "legislationDateOfApplicability"

	// The point-in-time at which the provided description of the legislation is valid (e.g.: when looking at the law on
	// the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act
	// 2015")
	LegislationDateVersion_Property = Base + "legislationDateVersion"

	// The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged
	// to be a legislation, even though it might not even be published or in force.
	LegislationDate_Property = Base + "legislationDate"

	// Indicates that this Legislation ensures the implementation of another Legislation, for example by modifying
	// national legislations so that they do not contradict to an EU regulation or decision. This implies a legal meaning.
	// Transpositions of EU Directive should be captured with <a href="/legislationTransposes">legislationTransposes</a>.
	LegislationEnsuresImplementationOf_Property = Base + "legislationEnsuresImplementationOf"

	// An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the
	// NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.
	LegislationIdentifier_Property = Base + "legislationIdentifier"

	// The jurisdiction from which the legislation originates.
	LegislationJurisdiction_Property = Base + "legislationJurisdiction"

	// Whether the legislation is currently in force, not in force, or partially in force.
	LegislationLegalForce_Property = Base + "legislationLegalForce"

	// The legal value of this legislation file. The same legislation can be written in multiple files with different
	// legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act.
	LegislationLegalValue_Property = Base + "legislationLegalValue"

	// A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple
	// files. For example, a digitally signed PDF, a plain PDF and an HTML version.
	LegislationObject_Class = Base + "LegislationObject"

	// The person or organization that originally passed or made the law: typically parliament (for primary legislation)
	// or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical
	// author.
	LegislationPassedBy_Property = Base + "legislationPassedBy"

	// Another legislation that this legislation repeals (cancels, abrogates).
	LegislationRepeals_Property = Base + "legislationRepeals"

	// An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who
	// is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once
	// it is published.
	LegislationResponsible_Property = Base + "legislationResponsible"

	// Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by
	// passing appropriate implementation measures. Typically, some legislations of European Union's member states or
	// regions transpose European Directives. This indicates a legally binding link between the 2 legislations.
	LegislationTransposes_Property = Base + "legislationTransposes"

	// The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory
	// instrument", "loi organique", "règlement grand-ducal", etc., depending on the country.
	LegislationType_Property = Base + "legislationType"

	// A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an
	// article).
	Legislation_Class = Base + "Legislation"

	// A legislative building&#x2014;for example, the state capitol.
	LegislativeBuilding_Class = Base + "LegislativeBuilding"

	// An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
	LeiCode_Property = Base + "leiCode"

	// Any physical activity engaged in for recreational purposes. Examples may include ballroom dancing, roller skating,
	// canoeing, fishing, etc.
	LeisureTimeActivity_PhysicalActivityCategory = Base + "LeisureTimeActivity"

	// The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of
	// BorrowAction.\n\nRelated actions:\n\n* [[BorrowAction]]: Reciprocal of LendAction.
	LendAction_Class = Base + "LendAction"

	// A sub property of participant. The person that lends the object being borrowed.
	Lender_Property = Base + "lender"

	// This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
	LesserOrEqual_Property = Base + "lesserOrEqual"

	// This ordering relation for qualitative values indicates that the subject is lesser than the object.
	Lesser_Property = Base + "lesser"

	// The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Letterer_Property = Base + "letterer"

	// A [[LibrarySystem]] is a collaborative system amongst several libraries.
	LibrarySystem_Class = Base + "LibrarySystem"

	// A library.
	Library_Class = Base + "Library"

	// A license document that applies to this content, typically indicated by URL.
	License_Property = Base + "license"

	// A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at
	// improving a health condition.
	LifestyleModification_Class = Base + "LifestyleModification"

	// A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages,
	// and structurally support joints.
	Ligament_Class = Base + "Ligament"

	// The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or
	// theme) with participants.
	LikeAction_Class = Base + "LikeAction"

	// Indicates that the item has limited availability.
	LimitedAvailability_ItemAvailability = Base + "LimitedAvailability"

	// LimitedByGuaranteeCharity: Non-profit type referring to a charitable company that is limited by guarantee (UK).
	LimitedByGuaranteeCharity_UKNonprofitType = Base + "LimitedByGuaranteeCharity"

	// A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more
	// point objects separated by space.
	Line_Property = Base + "line"

	// Indicates the relationship type of a Web link.
	LinkRelationship_Property = Base + "linkRelationship"

	// A Role that represents a Web link, e.g. as expressed via the 'url' property. Its linkRelationship property can
	// indicate URL-based and plain textual link types, e.g. those in IANA link registry or others such as 'amphtml'. This
	// structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in
	// JSON-LD feeds.
	LinkRole_Class = Base + "LinkRole"

	// A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
	LiquorStore_Class = Base + "LiquorStore"

	// An list item, e.g. a step in a checklist or how-to description.
	ListItem_Class = Base + "ListItem"

	// Represents the list price of an offered product. Typically the same as the [MSRP](http://schema.org/MSRP).
	ListPrice_PriceTypeEnumeration = Base + "ListPrice"

	// The act of consuming audio content.
	ListenAction_Class = Base + "ListenAction"

	// Event type: Literary event.
	LiteraryEvent_Class = Base + "LiteraryEvent"

	// LiveAlbum.
	LiveAlbum_MusicAlbumProductionType = Base + "LiveAlbum"

	// A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event
	// through continuous updates.
	LiveBlogPosting_Class = Base + "LiveBlogPosting"

	// An update to the LiveBlog.
	LiveBlogUpdate_Property = Base + "liveBlogUpdate"

	// Information about coping or life related to the topic.
	LivingWithHealthAspect_HealthAspectEnumeration = Base + "LivingWithHealthAspect"

	// Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.
	LoanMortgageMandateAmount_Property = Base + "loanMortgageMandateAmount"

	// A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
	LoanOrCredit_Class = Base + "LoanOrCredit"

	// The amount of money to pay in a single payment.
	LoanPaymentAmount_Property = Base + "loanPaymentAmount"

	// Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the
	// reciprocal of a period of time.
	LoanPaymentFrequency_Property = Base + "loanPaymentFrequency"

	// A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic
	// payments that normally include part principal plus interest in each payment.
	LoanRepaymentForm_Property = Base + "loanRepaymentForm"

	// The duration of the loan or credit agreement.
	LoanTerm_Property = Base + "loanTerm"

	// The type of a loan or credit.
	LoanType_Property = Base + "loanType"

	// A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a
	// particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
	LocalBusiness_Class = Base + "LocalBusiness"

	// The location where the CreativeWork was created, which may not be the same as the location depicted in the
	// CreativeWork.
	LocationCreated_Property = Base + "locationCreated"

	// Specifies a location feature by providing a structured value representing a feature of an accommodation as a
	// property-value pair of varying degrees of formality.
	LocationFeatureSpecification_Class = Base + "LocationFeatureSpecification"

	// The location of, for example, where an event is happening, where an organization is located, or where an action
	// takes place.
	Location_Property = Base + "location"

	// A DeliveryMethod in which an item is made available via locker.
	LockerDelivery_DeliveryMethod = Base + "LockerDelivery"

	// A locksmith.
	Locksmith_Class = Base + "Locksmith"

	// A lodging business, such as a motel, hotel, or inn.
	LodgingBusiness_Class = Base + "LodgingBusiness"

	// A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual
	// reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
	LodgingReservation_Class = Base + "LodgingReservation"

	// A full description of the lodging unit.
	LodgingUnitDescription_Property = Base + "lodgingUnitDescription"

	// Textual description of the unit type (including suite vs. room, size of bed, etc.).
	LodgingUnitType_Property = Base + "lodgingUnitType"

	// An associated logo.
	Logo_Property = Base + "logo"

	// The longitude of a location. For example ```-122.08585``` ([WGS
	// 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Longitude_Property = Base + "longitude"

	// Unlike cross-sectional studies, longitudinal studies track the same people, and therefore the differences observed
	// in those people are less likely to be the result of cultural differences across generations. Longitudinal studies
	// are also used in medicine to uncover predictors of certain diseases.
	Longitudinal_MedicalObservationalStudyDesign = Base + "Longitudinal"

	// The act of being defeated in a competitive activity.
	LoseAction_Class = Base + "LoseAction"

	// A sub property of participant. The loser of the action.
	Loser_Property = Base + "loser"

	// A diet focused on reduced calorie intake.
	LowCalorieDiet_RestrictedDiet = Base + "LowCalorieDiet"

	// A diet focused on reduced fat and cholesterol intake.
	LowFatDiet_RestrictedDiet = Base + "LowFatDiet"

	// A diet appropriate for people with lactose intolerance.
	LowLactoseDiet_RestrictedDiet = Base + "LowLactoseDiet"

	// The lowest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT
	// ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode
	// 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability
	// separator.
	LowPrice_Property = Base + "lowPrice"

	// A diet focused on reduced sodium intake.
	LowSaltDiet_RestrictedDiet = Base + "LowSaltDiet"

	// Lung and respiratory system clinical examination.
	Lung_PhysicalExam = Base + "Lung"

	// A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
	LymphaticVessel_Class = Base + "LymphaticVessel"

	// The person who wrote the words.
	Lyricist_Property = Base + "lyricist"

	// The words in the song.
	Lyrics_Property = Base + "lyrics"

	// Magnetic resonance imaging.
	MRI_MedicalImagingTechnique = Base + "MRI"

	// Represents the manufacturer suggested retail price ("MSRP") of an offered product.
	MSRP_PriceTypeEnumeration = Base + "MSRP"

	// Indicates that the item is made to order (custom made).
	MadeToOrder_ItemAvailability = Base + "MadeToOrder"

	// Indicates if this web page element is the main subject of the page.
	MainContentOfPage_Property = Base + "mainContentOfPage"

	// Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background
	// notes](/docs/datamodel.html#mainEntityBackground) for details.
	MainEntityOfPage_Property = Base + "mainEntityOfPage"

	// Indicates the primary entity described in some page or other CreativeWork.
	MainEntity_Property = Base + "mainEntity"

	// A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a
	// [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex)
	// artifact. It is common for distributions of software and data to be based on "upstream" sources. When
	// [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a
	// [[Dataset]], it is always possible that the upstream source has a different maintainer. The [[isBasedOn]] property
	// can be used to indicate such relationships between datasets to make the different maintenance roles clear.
	// Similarly in the case of software, a package may have dedicated maintainers working on integration into software
	// distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
	Maintainer_Property = Base + "maintainer"

	// A pointer to products or services offered by the organization or person.
	MakesOffer_Property = Base + "makesOffer"

	// The male gender.
	Male_GenderType = Base + "Male"

	// The manufacturer of the product.
	Manufacturer_Property = Base + "manufacturer"

	// A book, document, or piece of music written by hand rather than typed or printed.
	Manuscript_Class = Base + "Manuscript"

	// An enumeration of several kinds of Map.
	MapCategoryType_Class = Base + "MapCategoryType"

	// Indicates the kind of Map, from the MapCategoryType Enumeration.
	MapType_Property = Base + "mapType"

	// A map.
	Map_Class = Base + "Map"

	// A URL to a map of the place.
	Map_Property = Base + "map"

	// A URL to a map of the place.
	Maps_Property = Base + "maps"

	// A [[marginOfError]] for an [[Observation]].
	MarginOfError_Property = Base + "marginOfError"

	// The act of marrying a person.
	MarryAction_Class = Base + "MarryAction"

	// Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
	Mass_Class = Base + "Mass"

	// For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial management.
	Masthead_Property = Base + "masthead"

	// The quantity of the materials being described or an expression of the physical space they occupy.
	MaterialExtent_Property = Base + "materialExtent"

	// A material that something is made from, e.g. leather, wool, cotton, paper.
	Material_Property = Base + "material"

	// A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed.
	// This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.
	MathExpression_Property = Base + "mathExpression"

	// A math solver which is capable of solving a subset of mathematical problems.
	MathSolver_Class = Base + "MathSolver"

	// The highest price if the price is a range.
	MaxPrice_Property = Base + "maxPrice"

	// The upper value of some characteristic or property.
	MaxValue_Property = Base + "maxValue"

	// The total number of individuals that may attend an event or venue.
	MaximumAttendeeCapacity_Property = Base + "maximumAttendeeCapacity"

	// The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the
	// drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of
	// MedicalEntity.
	MaximumDoseSchedule_Class = Base + "MaximumDoseSchedule"

	// The maximum number of students who may be enrolled in the program.
	MaximumEnrollment_Property = Base + "maximumEnrollment"

	// Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	MaximumIntake_Property = Base + "maximumIntake"

	// The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is
	// [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]).
	MaximumPhysicalAttendeeCapacity_Property = Base + "maximumPhysicalAttendeeCapacity"

	// The maximum virtual attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is
	// [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]).
	MaximumVirtualAttendeeCapacity_Property = Base + "maximumVirtualAttendeeCapacity"

	// Related topics may be treated by a Topic.
	MayTreatHealthAspect_HealthAspectEnumeration = Base + "MayTreatHealthAspect"

	// Description of the meals that will be provided or available for purchase.
	MealService_Property = Base + "mealService"

	// The measuredProperty of an [[Observation]], typically via its [[StatisticalVariable]]. There are various kinds of
	// applicable [[Property]]: a schema.org property, a property from other RDF-compatible systems, e.g. W3C RDF Data
	// Cube, Data Commons, Wikidata, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
	MeasuredProperty_Property = Base + "measuredProperty"

	// Identifies the denominator variable when an observation represents a ratio or percentage.
	MeasurementDenominator_Property = Base + "measurementDenominator"

	// Enumeration(s) for use with [[measurementMethod]].
	MeasurementMethodEnum_Class = Base + "MeasurementMethodEnum"

	// A subproperty of [[measurementTechnique]] that can be used for specifying specific methods, in particular via
	// [[MeasurementMethodEnum]].
	MeasurementMethod_Property = Base + "measurementMethod"

	// Provides additional qualification to an observation. For example, a GDP observation measures the Nominal value.
	MeasurementQualifier_Property = Base + "measurementQualifier"

	// A technique, method or technology used in an [[Observation]], [[StatisticalVariable]] or [[Dataset]] (or
	// [[DataDownload]], [[DataCatalog]]), corresponding to the method used for measuring the corresponding variable(s)
	// (for datasets, described using [[variableMeasured]]; for [[Observation]], a [[StatisticalVariable]]). Often but not
	// necessarily each [[variableMeasured]] will have an explicit representation as (or mapping to) an property such as
	// those defined in Schema.org, or other RDF vocabularies and "knowledge graphs". In that case the subproperty of
	// [[variableMeasured]] called [[measuredProperty]] is applicable. The [[measurementTechnique]] property helps when
	// extra clarification is needed about how a [[measuredProperty]] was measured. This is oriented towards scientific
	// and scholarly dataset publication but may have broader applicability; it is not intended as a full representation
	// of measurement, but can often serve as a high level summary for dataset discovery. For example, if
	// [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr
	// spectroscopy" or "colorimetry" or "immunofluorescence". If the [[variableMeasured]] is "depression rating", the
	// [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory". If there are several
	// [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each
	// [[variableMeasured]] and attach the corresponding [[measurementTechnique]]. The value can also be from an
	// enumeration, organized as a [[MeasurementMetholdEnumeration]].
	MeasurementTechnique_Property = Base + "measurementTechnique"

	// Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants,
	// "gauge" for screws, or "wheel" for bicycles.
	MeasurementTypeEnumeration_Class = Base + "MeasurementTypeEnumeration"

	// The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
	MechanismOfAction_Property = Base + "mechanismOfAction"

	// Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was
	// published or shared).
	MediaAuthenticityCategory_Property = Base + "mediaAuthenticityCategory"

	// MediaEnumeration enumerations are lists of codes, labels etc. useful for describing media objects. They may be
	// reflections of externally developed lists, or created at schema.org, or a combination.
	MediaEnumeration_Class = Base + "MediaEnumeration"

	// Web page type: Media gallery page. A mixed-media page that can contain media such as images, videos, and other
	// multimedia.
	MediaGallery_Class = Base + "MediaGallery"

	// In the context of a [[MediaReview]], indicates specific media item(s) that are grouped using a [[MediaReviewItem]].
	MediaItemAppearance_Property = Base + "mediaItemAppearance"

	// Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in
	// the context of how it was published or shared). In general these codes are not mutually exclusive, although some
	// combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in
	// the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or
	// published in a particular context.
	MediaManipulationRatingEnumeration_Class = Base + "MediaManipulationRatingEnumeration"

	// A media object, such as an image, video, audio, or text object embedded in a web page or a downloadable dataset
	// i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page.
	// For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low
	// bandwidth audio stream (2 AudioObject's).
	MediaObject_Class = Base + "MediaObject"

	// Represents an item or group of closely related items treated as a unit for the sake of evaluation in a
	// [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
	MediaReviewItem_Class = Base + "MediaReviewItem"

	// A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online,
	// typically in the context of fact-checking and misinformation. For more general reviews of media in the broader
	// sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is a work in progress. While
	// the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and
	// others working to combat misinformation, the specific structures for representing media objects, their versions and
	// publication context, are still evolving. Similarly, best practices for the relationship between [[MediaReview]] and
	// [[ClaimReview]] markup have not yet been finalized.
	MediaReview_Class = Base + "MediaReview"

	// A subscription which allows a user to access media including audio, video, books, etc.
	MediaSubscription_Class = Base + "MediaSubscription"

	// The median value.
	Median_Property = Base + "median"

	// Target audiences types for medical web pages. Enumerated type.
	MedicalAudienceType_Class = Base + "MedicalAudienceType"

	// Target audiences for medical web pages.
	MedicalAudience_Class = Base + "MedicalAudience"

	// Medical audience for page.
	MedicalAudience_Property = Base + "medicalAudience"

	// A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness
	// include different businesses run by health professionals.
	MedicalBusiness_Class = Base + "MedicalBusiness"

	// The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical
	// condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of
	// the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly
	// results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS.
	// Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary
	// embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the
	// pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine,
	// environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal,
	// neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal,
	// rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
	MedicalCause_Class = Base + "MedicalCause"

	// A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or
	// healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
	MedicalClinic_Class = Base + "MedicalClinic"

	// A code for a medical entity.
	MedicalCode_Class = Base + "MedicalCode"

	// A stage of a medical condition, such as 'Stage IIIa'.
	MedicalConditionStage_Class = Base + "MedicalConditionStage"

	// Any condition of the human body that affects the normal functioning of a person, whether physically or mentally.
	// Includes diseases, injuries, disabilities, disorders, syndromes, etc.
	MedicalCondition_Class = Base + "MedicalCondition"

	// A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be
	// absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at
	// higher risk of complications, but these risks may be outweighed by other considerations or mitigated by other
	// measures).
	MedicalContraindication_Class = Base + "MedicalContraindication"

	// Categories of medical devices, organized by the purpose or intended use of the device.
	MedicalDevicePurpose_Class = Base + "MedicalDevicePurpose"

	// Any object used in a medical capacity, such as to diagnose or treat a patient.
	MedicalDevice_Class = Base + "MedicalDevice"

	// The most generic type of entity related to health and the practice of medicine.
	MedicalEntity_Class = Base + "MedicalEntity"

	// Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to
	// another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine
	// practice.
	MedicalEnumeration_Class = Base + "MedicalEnumeration"

	// Level of evidence for a medical guideline. Enumerated type.
	MedicalEvidenceLevel_Class = Base + "MedicalEvidenceLevel"

	// A guideline contraindication that designates a process as harmful and where quality of the data supporting the
	// contraindication is sound.
	MedicalGuidelineContraindication_Class = Base + "MedicalGuidelineContraindication"

	// A guideline recommendation that is regarded as efficacious and where quality of the data supporting the
	// recommendation is sound.
	MedicalGuidelineRecommendation_Class = Base + "MedicalGuidelineRecommendation"

	// Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose
	// and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the
	// guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall
	// article, not this type. Note also: the organization making the recommendation should be captured in the
	// recognizingAuthority base property of MedicalEntity.
	MedicalGuideline_Class = Base + "MedicalGuideline"

	// Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
	MedicalImagingTechnique_Class = Base + "MedicalImagingTechnique"

	// A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical
	// states, etc.
	MedicalIndication_Class = Base + "MedicalIndication"

	// A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
	MedicalIntangible_Class = Base + "MedicalIntangible"

	// Design models for observational medical studies. Enumerated type.
	MedicalObservationalStudyDesign_Class = Base + "MedicalObservationalStudyDesign"

	// An observational study is a type of medical study that attempts to infer the possible effect of a treatment through
	// observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects
	// into treatment groups versus control groups is outside the control of the investigator. This is in contrast with
	// controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is
	// randomly assigned to a treatment group or a control group before the start of the treatment.
	MedicalObservationalStudy_Class = Base + "MedicalObservationalStudy"

	// A medical organization (physical or not), such as hospital, institution or clinic.
	MedicalOrganization_Class = Base + "MedicalOrganization"

	// An enumeration that describes different types of medical procedures.
	MedicalProcedureType_Class = Base + "MedicalProcedureType"

	// A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on
	// invasive (surgical), non-invasive, or other techniques.
	MedicalProcedure_Class = Base + "MedicalProcedure"

	// Medical researchers.
	MedicalResearcher_MedicalAudienceType = Base + "MedicalResearcher"

	// A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url
	// property of Thing to record any URLs for online calculators.
	MedicalRiskCalculator_Class = Base + "MedicalRiskCalculator"

	// Any rule set or interactive tool for estimating the risk of developing a complication or condition.
	MedicalRiskEstimator_Class = Base + "MedicalRiskEstimator"

	// A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical
	// condition, or complication.
	MedicalRiskFactor_Class = Base + "MedicalRiskFactor"

	// A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g.
	// CHAD score, TIMI risk score.
	MedicalRiskScore_Class = Base + "MedicalRiskScore"

	// A scholarly article in the medical domain.
	MedicalScholarlyArticle_Class = Base + "MedicalScholarlyArticle"

	// Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign
	// is objective.
	MedicalSignOrSymptom_Class = Base + "MedicalSignOrSymptom"

	// Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical
	// examination.
	MedicalSign_Class = Base + "MedicalSign"

	// Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain
	// to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated
	// type.
	MedicalSpecialty_Class = Base + "MedicalSpecialty"

	// A medical specialty of the provider.
	MedicalSpecialty_Property = Base + "medicalSpecialty"

	// The status of a medical study. Enumerated type.
	MedicalStudyStatus_Class = Base + "MedicalStudyStatus"

	// A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health,
	// including observational studies and interventional trials and registries, randomized, controlled or not. When the
	// specific type of study is known, use one of the extensions of this type, such as MedicalTrial or
	// MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study
	// itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code
	// property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
	MedicalStudy_Class = Base + "MedicalStudy"

	// Any complaint sensed and expressed by the patient (therefore defined as subjective) like stomachache, lower-back
	// pain, or fatigue.
	MedicalSymptom_Class = Base + "MedicalSymptom"

	// Any collection of tests commonly ordered together.
	MedicalTestPanel_Class = Base + "MedicalTestPanel"

	// Any medical test, typically performed for diagnostic purposes.
	MedicalTest_Class = Base + "MedicalTest"

	// Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both
	// curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy,
	// behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis)
	// aimed at improving or preventing a health condition.
	MedicalTherapy_Class = Base + "MedicalTherapy"

	// Design models for medical trials. Enumerated type.
	MedicalTrialDesign_Class = Base + "MedicalTrialDesign"

	// A medical trial is a type of medical study that uses a scientific process to compare the safety and efficacy of
	// medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at
	// random to the different treatment and/or control groups.
	MedicalTrial_Class = Base + "MedicalTrial"

	// A web page that provides medical information.
	MedicalWebPage_Class = Base + "MedicalWebPage"

	// Systems of medical practice.
	MedicineSystem_Class = Base + "MedicineSystem"

	// The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic',
	// 'chiropractic', etc.
	MedicineSystem_Property = Base + "medicineSystem"

	// A meeting room, conference room, or conference hall is a room provided for singular events such as business
	// conferences and meetings (source: Wikipedia, the free encyclopedia, see <a
	// href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>). <br /><br />
	// See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and
	// other forms of accommodations</a>.
	MeetingRoom_Class = Base + "MeetingRoom"

	// Indicates that the vehicle meets the respective emission standard.
	MeetsEmissionStandard_Property = Base + "meetsEmissionStandard"

	// An Organization (or ProgramMembership) to which this Person or Organization belongs.
	MemberOf_Property = Base + "memberOf"

	// A MemberProgramTier specifies a tier under a loyalty (member) program, for example "gold".
	MemberProgramTier_Class = Base + "MemberProgramTier"

	// A MemberProgram defines a loyalty (or membership) program that provides its members with certain benefits, for
	// example better pricing, free shipping or returns, or the ability to earn loyalty points. Member programs may have
	// multiple tiers, for example silver and gold members, each with different benefits.
	MemberProgram_Class = Base + "MemberProgram"

	// A member of an Organization or a ProgramMembership. Organizations can be members of organizations;
	// ProgramMembership is typically for individuals.
	Member_Property = Base + "member"

	// A member of this organization.
	Members_Property = Base + "members"

	// A unique identifier for the membership.
	MembershipNumber_Property = Base + "membershipNumber"

	// The number of membership points earned by the member. If necessary, the unitText can be used to express the units
	// the points are issued in. (E.g. stars, miles, etc.)
	MembershipPointsEarned_Property = Base + "membershipPointsEarned"

	// Minimum memory requirements.
	MemoryRequirements_Property = Base + "memoryRequirements"

	// A men's clothing store.
	MensClothingStore_Class = Base + "MensClothingStore"

	// Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
	Mentions_Property = Base + "mentions"

	// Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item.
	// Additionally it can be a menu section containing allowed add-on menu items for this menu item.
	MenuAddOn_Property = Base + "menuAddOn"

	// A food or drink item listed in a menu or menu section.
	MenuItem_Class = Base + "MenuItem"

	// A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type
	// of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
	MenuSection_Class = Base + "MenuSection"

	// A structured representation of food or drink items available from a FoodEstablishment.
	Menu_Class = Base + "Menu"

	// Either the actual menu as a structured representation, as text, or a URL of the menu.
	Menu_Property = Base + "menu"

	// Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned.
	// Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
	MerchantReturnDays_Property = Base + "merchantReturnDays"

	// Enumerates several kinds of product return policies.
	MerchantReturnEnumeration_Class = Base + "MerchantReturnEnumeration"

	// Specifies that there is a finite window for product returns.
	MerchantReturnFiniteReturnWindow_MerchantReturnEnumeration = Base + "MerchantReturnFiniteReturnWindow"

	// Specifies a Web page or service by URL, for product returns.
	MerchantReturnLink_Property = Base + "merchantReturnLink"

	// Specifies that product returns are not permitted.
	MerchantReturnNotPermitted_MerchantReturnEnumeration = Base + "MerchantReturnNotPermitted"

	// A seasonal override of a return policy, for example used for holidays.
	MerchantReturnPolicySeasonalOverride_Class = Base + "MerchantReturnPolicySeasonalOverride"

	// A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]],
	// [[Product]], or [[Offer]].
	MerchantReturnPolicy_Class = Base + "MerchantReturnPolicy"

	// Specifies that there is an unlimited window for product returns.
	MerchantReturnUnlimitedWindow_MerchantReturnEnumeration = Base + "MerchantReturnUnlimitedWindow"

	// Specifies that a product return policy is not provided.
	MerchantReturnUnspecified_MerchantReturnEnumeration = Base + "MerchantReturnUnspecified"

	// 'merchant' is an out-dated term for 'seller'.
	Merchant_Property = Base + "merchant"

	// A CreativeWork attached to the message.
	MessageAttachment_Property = Base + "messageAttachment"

	// A single message from a sender to one or more organizations or people.
	Message_Class = Base + "Message"

	// A middle school (typically for children aged around 11-14, although this varies somewhat).
	MiddleSchool_Class = Base + "MiddleSchool"

	// A nurse-like health profession that deals with pregnancy, childbirth, and the postpartum period (including care of
	// the newborn), besides sexual and reproductive health of women throughout their lives.
	Midwifery_MedicalSpecialty = Base + "Midwifery"

	// The total distance travelled by the particular vehicle since its initial production, as read from its
	// odometer.\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles.
	MileageFromOdometer_Property = Base + "mileageFromOdometer"

	// The lowest price if the price is a range.
	MinPrice_Property = Base + "minPrice"

	// The lower value of some characteristic or property.
	MinValue_Property = Base + "minValue"

	// Represents the minimum advertised price ("MAP") (as dictated by the manufacturer) of an offered product.
	MinimumAdvertisedPrice_PriceTypeEnumeration = Base + "MinimumAdvertisedPrice"

	// The minimum payment required at this time.
	MinimumPaymentDue_Property = Base + "minimumPaymentDue"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/minorHumanEdits">minor human edits</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	MinorHumanEditsDigitalSource_IPTCDigitalSourceEnumeration = Base + "MinorHumanEditsDigitalSource"

	// Content about common misconceptions and myths that are related to a topic.
	MisconceptionsHealthAspect_HealthAspectEnumeration = Base + "MisconceptionsHealthAspect"

	// For a [[NewsMediaOrganization]], a statement on coverage priorities, including any public agenda or stance on
	// issues.
	MissionCoveragePrioritiesPolicy_Property = Base + "missionCoveragePrioritiesPolicy"

	// MixedEventAttendanceMode - an event that is conducted as a combination of both offline and online modes.
	MixedEventAttendanceMode_EventAttendanceModeEnumeration = Base + "MixedEventAttendanceMode"

	// MixtapeAlbum.
	MixtapeAlbum_MusicAlbumProductionType = Base + "MixtapeAlbum"

	// A software application designed specifically to work well on a mobile device such as a telephone.
	MobileApplication_Class = Base + "MobileApplication"

	// A store that sells mobile phones and related accessories.
	MobilePhoneStore_Class = Base + "MobilePhoneStore"

	// The [[mobileUrl]] property is provided for specific situations in which data consumers need to determine whether
	// one of several provided URLs is a dedicated 'mobile site'. To discourage over-use, and reflecting intial usecases,
	// the property is expected only on [[Product]] and [[Offer]], rather than [[Thing]]. The general trend in web
	// technology is towards [responsive design](https://en.wikipedia.org/wiki/Responsive_web_design) in which content can
	// be flexibly adapted to a wide range of browsing environments. Pages and sites referenced with the long-established
	// [[url]] property should ideally also be usable on a wide variety of devices, including mobile phones. In most
	// cases, it would be pointless and counter productive to attempt to update all [[url]] markup to use [[mobileUrl]]
	// for more mobile-oriented pages. The property is intended for the case when items (primarily [[Product]] and
	// [[Offer]]) have extra URLs hosted on an additional "mobile site" alongside the main one. It should not be taken as
	// an endorsement of this publication style.
	MobileUrl_Property = Base + "mobileUrl"

	// Represents the broad notion of 'mobile' browsers as a Web Platform.
	MobileWebPlatform_DigitalPlatformEnumeration = Base + "MobileWebPlatform"

	// The release date of a vehicle model (often used to differentiate versions of the same make and model).
	ModelDate_Property = Base + "modelDate"

	// The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier.
	// The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong
	// product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
	Model_Property = Base + "model"

	// The date and time the reservation was modified.
	ModifiedTime_Property = Base + "modifiedTime"

	// Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex,
	// conformer etc., identifiable as a separately distinguishable entity.
	MolecularEntity_Class = Base + "MolecularEntity"

	// The empirical formula is the simplest whole number ratio of all the atoms in a molecule.
	MolecularFormula_Property = Base + "molecularFormula"

	// This is the molecular weight of the entity being described, not of the parent. Units should be included in the form
	// '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.
	MolecularWeight_Property = Base + "molecularWeight"

	// The day of the week between Sunday and Tuesday.
	Monday_DayOfWeek = Base + "Monday"

	// A statistical distribution of monetary amounts.
	MonetaryAmountDistribution_Class = Base + "MonetaryAmountDistribution"

	// A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in
	// describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary,
	// etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
	MonetaryAmount_Class = Base + "MonetaryAmount"

	// A monetary grant.
	MonetaryGrant_Class = Base + "MonetaryGrant"

	// The act of transferring money from one place to another place. This may occur electronically or physically.
	MoneyTransfer_Class = Base + "MoneyTransfer"

	// The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest
	// mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include
	// the units in the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as
	// '&lt;QuantitativeValue&gt;.
	MonoisotopicMolecularWeight_Property = Base + "monoisotopicMolecularWeight"

	// The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each
	// month.
	MonthlyMinimumRepaymentAmount_Property = Base + "monthlyMinimumRepaymentAmount"

	// Indicates the minimal number of months of experience required for a position.
	MonthsOfExperience_Property = Base + "monthsOfExperience"

	// A loan in which property or real estate is used as collateral. (A loan securitized against some real estate.)
	MortgageLoan_Class = Base + "MortgageLoan"

	// A mosque.
	Mosque_Class = Base + "Mosque"

	// A motel. <br /><br /> See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for
	// marking up hotels and other forms of accommodations</a>.
	Motel_Class = Base + "Motel"

	// A motorcycle dealer.
	MotorcycleDealer_Class = Base + "MotorcycleDealer"

	// A motorcycle repair shop.
	MotorcycleRepair_Class = Base + "MotorcycleRepair"

	// A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
	Motorcycle_Class = Base + "Motorcycle"

	// A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
	MotorizedBicycle_Class = Base + "MotorizedBicycle"

	// A mountain, like Mount Whitney or Mount Everest.
	Mountain_Class = Base + "Mountain"

	// The act of an agent relocating to a place.\n\nRelated actions:\n\n* [[TransferAction]]: Unlike TransferAction, the
	// subject of the move is a living Person or Organization rather than an inanimate object.
	MoveAction_Class = Base + "MoveAction"

	// A short segment/part of a movie.
	MovieClip_Class = Base + "MovieClip"

	// A movie rental store.
	MovieRentalStore_Class = Base + "MovieRentalStore"

	// A series of movies. Included movies can be indicated with the hasPart property.
	MovieSeries_Class = Base + "MovieSeries"

	// A movie theater.
	MovieTheater_Class = Base + "MovieTheater"

	// A movie.
	Movie_Class = Base + "Movie"

	// A moving company.
	MovingCompany_Class = Base + "MovingCompany"

	// The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	Mpn_Property = Base + "mpn"

	// A trial that takes place at multiple centers.
	MultiCenterTrial_MedicalTrialDesign = Base + "MultiCenterTrial"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	MultiFrameComputationalCaptureDigitalSource_IPTCDigitalSourceEnumeration = Base + "MultiFrameComputationalCaptureDigitalSource"

	// Play mode: MultiPlayer. Requiring or allowing multiple human players to play simultaneously.
	MultiPlayer_GamePlayMode = Base + "MultiPlayer"

	// Multicellular parasite that causes an infection.
	MulticellularParasite_InfectiousAgentClass = Base + "MulticellularParasite"

	// Whether multiple values are allowed for the property. Default is false.
	MultipleValues_Property = Base + "multipleValues"

	// The movement the muscle generates.
	MuscleAction_Property = Base + "muscleAction"

	// A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
	Muscle_Class = Base + "Muscle"

	// Musculoskeletal system clinical examination.
	MusculoskeletalExam_PhysicalExam = Base + "MusculoskeletalExam"

	// A specific branch of medical science that pertains to diagnosis and treatment of disorders of muscles, ligaments
	// and skeletal system.
	Musculoskeletal_MedicalSpecialty = Base + "Musculoskeletal"

	// A museum.
	Museum_Class = Base + "Museum"

	// Classification of the album by its type of content: soundtrack, live album, studio album, etc.
	MusicAlbumProductionType_Class = Base + "MusicAlbumProductionType"

	// The kind of release which this album is: single, EP or album.
	MusicAlbumReleaseType_Class = Base + "MusicAlbumReleaseType"

	// A collection of music tracks.
	MusicAlbum_Class = Base + "MusicAlbum"

	// An arrangement derived from the composition.
	MusicArrangement_Property = Base + "musicArrangement"

	// The composer of the soundtrack.
	MusicBy_Property = Base + "musicBy"

	// The type of composition (e.g. overture, sonata, symphony, etc.).
	MusicCompositionForm_Property = Base + "musicCompositionForm"

	// A musical composition.
	MusicComposition_Class = Base + "MusicComposition"

	// Event type: Music event.
	MusicEvent_Class = Base + "MusicEvent"

	// A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
	MusicGroupMember_Property = Base + "musicGroupMember"

	// A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
	MusicGroup_Class = Base + "MusicGroup"

	// A collection of music tracks in playlist form.
	MusicPlaylist_Class = Base + "MusicPlaylist"

	// A music recording (track), usually a single song.
	MusicRecording_Class = Base + "MusicRecording"

	// Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
	MusicReleaseFormatType_Class = Base + "MusicReleaseFormatType"

	// Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
	MusicReleaseFormat_Property = Base + "musicReleaseFormat"

	// A MusicRelease is a specific release of a music album.
	MusicRelease_Class = Base + "MusicRelease"

	// A music store.
	MusicStore_Class = Base + "MusicStore"

	// A music venue.
	MusicVenue_Class = Base + "MusicVenue"

	// A music video file.
	MusicVideoObject_Class = Base + "MusicVideoObject"

	// The key, mode, or scale this composition uses.
	MusicalKey_Property = Base + "musicalKey"

	// Organization: Non-governmental Organization.
	NGO_Class = Base + "NGO"

	// NLNonprofitType: Non-profit organization type originating from the Netherlands.
	NLNonprofitType_Class = Base + "NLNonprofitType"

	// The North American Industry Classification System (NAICS) code for a particular organization or business person.
	Naics_Property = Base + "naics"

	// A nail salon.
	NailSalon_Class = Base + "NailSalon"

	// The name of the item.
	Name_Property = Base + "name"

	// A position played, performed or filled by a person or organization, as part of an organization. For example, an
	// athlete in a SportsTeam might play in the position named 'Quarterback'.
	NamedPosition_Property = Base + "namedPosition"

	// Item is a narcotic as defined by the [1961 UN
	// convention](https://www.incb.org/incb/en/narcotic-drugs/Yellowlist/yellow-list.html), for example marijuana or
	// heroin.
	NarcoticConsideration_AdultOrientedEnumeration = Base + "NarcoticConsideration"

	// Nationality of the person.
	Nationality_Property = Base + "nationality"

	// The expected progression of the condition if it is not treated and allowed to progress naturally.
	NaturalProgression_Property = Base + "naturalProgression"

	// Neck assessment with clinical examination.
	Neck_PhysicalExam = Base + "Neck"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/negativeFilm">negative film</a></a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	NegativeFilmDigitalSource_IPTCDigitalSourceEnumeration = Base + "NegativeFilmDigitalSource"

	// Provides negative considerations regarding something, most typically in pro/con lists for reviews (alongside
	// [[positiveNotes]]). For symmetry In the case of a [[Review]], the property describes the [[itemReviewed]] from the
	// perspective of the review; in the case of a [[Product]], the product itself is being described. Since product
	// descriptions tend to emphasise positive claims, it may be relatively unusual to find [[negativeNotes]] used in this
	// way. Nevertheless for the sake of symmetry, [[negativeNotes]] can be used on [[Product]]. The property values can
	// be expressed either as unstructured text (repeated as necessary), or if ordered, as a list (in which case the most
	// negative is at the beginning of the list).
	NegativeNotes_Property = Base + "negativeNotes"

	// The neurological pathway extension that involves muscle control.
	NerveMotor_Property = Base + "nerveMotor"

	// A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
	Nerve_Class = Base + "Nerve"

	// The underlying innervation associated with the muscle.
	Nerve_Property = Base + "nerve"

	// The total financial value of the person as calculated by subtracting the total value of liabilities from the total
	// value of assets.
	NetWorth_Property = Base + "netWorth"

	// Neurological system clinical examination.
	Neuro_PhysicalExam = Base + "Neuro"

	// A specific branch of medical science that studies the nerves and nervous system and its respective disease states.
	Neurologic_MedicalSpecialty = Base + "Neurologic"

	// Indicates that the item is new.
	NewCondition_OfferItemCondition = Base + "NewCondition"

	// A NewsArticle is an article whose content reports news, or provides background context and supporting materials for
	// understanding the news. A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
	NewsArticle_Class = Base + "NewsArticle"

	// A News/Media organization such as a newspaper or TV station.
	NewsMediaOrganization_Class = Base + "NewsMediaOrganization"

	// Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page
	// containing [[SpecialAnnouncement]] markup on a site.
	NewsUpdatesAndGuidelines_Property = Base + "newsUpdatesAndGuidelines"

	// A publication containing information about varied topics that are pertinent to general information, a geographic
	// area, or a specific subject matter (i.e. business, culture, education). Often published daily.
	Newspaper_Class = Base + "Newspaper"

	// A link to the ListItem that follows the current one.
	NextItem_Property = Base + "nextItem"

	// A nightclub or discotheque.
	NightClub_Class = Base + "NightClub"

	// For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement explaining when authors of
	// articles are not named in bylines.
	NoBylinesPolicy_Property = Base + "noBylinesPolicy"

	// This ordering relation for qualitative values indicates that the subject is not equal to the object.
	NonEqual_Property = Base + "nonEqual"

	// The generic name of this drug or supplement.
	NonProprietaryName_Property = Base + "nonProprietaryName"

	// A type of medical procedure that involves noninvasive techniques.
	NoninvasiveProcedure_MedicalProcedureType = Base + "NoninvasiveProcedure"

	// Nonprofit501a: Non-profit type referring to Farmers’ Cooperative Associations.
	Nonprofit501a_USNonprofitType = Base + "Nonprofit501a"

	// Nonprofit501c10: Non-profit type referring to Domestic Fraternal Societies and Associations.
	Nonprofit501c10_USNonprofitType = Base + "Nonprofit501c10"

	// Nonprofit501c11: Non-profit type referring to Teachers' Retirement Fund Associations.
	Nonprofit501c11_USNonprofitType = Base + "Nonprofit501c11"

	// Nonprofit501c12: Non-profit type referring to Benevolent Life Insurance Associations, Mutual Ditch or Irrigation
	// Companies, Mutual or Cooperative Telephone Companies.
	Nonprofit501c12_USNonprofitType = Base + "Nonprofit501c12"

	// Nonprofit501c13: Non-profit type referring to Cemetery Companies.
	Nonprofit501c13_USNonprofitType = Base + "Nonprofit501c13"

	// Nonprofit501c14: Non-profit type referring to State-Chartered Credit Unions, Mutual Reserve Funds.
	Nonprofit501c14_USNonprofitType = Base + "Nonprofit501c14"

	// Nonprofit501c15: Non-profit type referring to Mutual Insurance Companies or Associations.
	Nonprofit501c15_USNonprofitType = Base + "Nonprofit501c15"

	// Nonprofit501c16: Non-profit type referring to Cooperative Organizations to Finance Crop Operations.
	Nonprofit501c16_USNonprofitType = Base + "Nonprofit501c16"

	// Nonprofit501c17: Non-profit type referring to Supplemental Unemployment Benefit Trusts.
	Nonprofit501c17_USNonprofitType = Base + "Nonprofit501c17"

	// Nonprofit501c18: Non-profit type referring to Employee Funded Pension Trust (created before 25 June 1959).
	Nonprofit501c18_USNonprofitType = Base + "Nonprofit501c18"

	// Nonprofit501c19: Non-profit type referring to Post or Organization of Past or Present Members of the Armed Forces.
	Nonprofit501c19_USNonprofitType = Base + "Nonprofit501c19"

	// Nonprofit501c1: Non-profit type referring to Corporations Organized Under Act of Congress, including Federal Credit
	// Unions and National Farm Loan Associations.
	Nonprofit501c1_USNonprofitType = Base + "Nonprofit501c1"

	// Nonprofit501c20: Non-profit type referring to Group Legal Services Plan Organizations.
	Nonprofit501c20_USNonprofitType = Base + "Nonprofit501c20"

	// Nonprofit501c21: Non-profit type referring to Black Lung Benefit Trusts.
	Nonprofit501c21_USNonprofitType = Base + "Nonprofit501c21"

	// Nonprofit501c22: Non-profit type referring to Withdrawal Liability Payment Funds.
	Nonprofit501c22_USNonprofitType = Base + "Nonprofit501c22"

	// Nonprofit501c23: Non-profit type referring to Veterans Organizations.
	Nonprofit501c23_USNonprofitType = Base + "Nonprofit501c23"

	// Nonprofit501c24: Non-profit type referring to Section 4049 ERISA Trusts.
	Nonprofit501c24_USNonprofitType = Base + "Nonprofit501c24"

	// Nonprofit501c25: Non-profit type referring to Real Property Title-Holding Corporations or Trusts with Multiple
	// Parents.
	Nonprofit501c25_USNonprofitType = Base + "Nonprofit501c25"

	// Nonprofit501c26: Non-profit type referring to State-Sponsored Organizations Providing Health Coverage for High-Risk
	// Individuals.
	Nonprofit501c26_USNonprofitType = Base + "Nonprofit501c26"

	// Nonprofit501c27: Non-profit type referring to State-Sponsored Workers' Compensation Reinsurance Organizations.
	Nonprofit501c27_USNonprofitType = Base + "Nonprofit501c27"

	// Nonprofit501c28: Non-profit type referring to National Railroad Retirement Investment Trusts.
	Nonprofit501c28_USNonprofitType = Base + "Nonprofit501c28"

	// Nonprofit501c2: Non-profit type referring to Title-holding Corporations for Exempt Organizations.
	Nonprofit501c2_USNonprofitType = Base + "Nonprofit501c2"

	// Nonprofit501c3: Non-profit type referring to Religious, Educational, Charitable, Scientific, Literary, Testing for
	// Public Safety, Fostering National or International Amateur Sports Competition, or Prevention of Cruelty to Children
	// or Animals Organizations.
	Nonprofit501c3_USNonprofitType = Base + "Nonprofit501c3"

	// Nonprofit501c4: Non-profit type referring to Civic Leagues, Social Welfare Organizations, and Local Associations of
	// Employees.
	Nonprofit501c4_USNonprofitType = Base + "Nonprofit501c4"

	// Nonprofit501c5: Non-profit type referring to Labor, Agricultural and Horticultural Organizations.
	Nonprofit501c5_USNonprofitType = Base + "Nonprofit501c5"

	// Nonprofit501c6: Non-profit type referring to Business Leagues, Chambers of Commerce, Real Estate Boards.
	Nonprofit501c6_USNonprofitType = Base + "Nonprofit501c6"

	// Nonprofit501c7: Non-profit type referring to Social and Recreational Clubs.
	Nonprofit501c7_USNonprofitType = Base + "Nonprofit501c7"

	// Nonprofit501c8: Non-profit type referring to Fraternal Beneficiary Societies and Associations.
	Nonprofit501c8_USNonprofitType = Base + "Nonprofit501c8"

	// Nonprofit501c9: Non-profit type referring to Voluntary Employee Beneficiary Associations.
	Nonprofit501c9_USNonprofitType = Base + "Nonprofit501c9"

	// Nonprofit501d: Non-profit type referring to Religious and Apostolic Associations.
	Nonprofit501d_USNonprofitType = Base + "Nonprofit501d"

	// Nonprofit501e: Non-profit type referring to Cooperative Hospital Service Organizations.
	Nonprofit501e_USNonprofitType = Base + "Nonprofit501e"

	// Nonprofit501f: Non-profit type referring to Cooperative Service Organizations.
	Nonprofit501f_USNonprofitType = Base + "Nonprofit501f"

	// Nonprofit501k: Non-profit type referring to Child Care Organizations.
	Nonprofit501k_USNonprofitType = Base + "Nonprofit501k"

	// Nonprofit501n: Non-profit type referring to Charitable Risk Pools.
	Nonprofit501n_USNonprofitType = Base + "Nonprofit501n"

	// Nonprofit501q: Non-profit type referring to Credit Counseling Organizations.
	Nonprofit501q_USNonprofitType = Base + "Nonprofit501q"

	// Nonprofit527: Non-profit type referring to political organizations.
	Nonprofit527_USNonprofitType = Base + "Nonprofit527"

	// NonprofitANBI: Non-profit type referring to a Public Benefit Organization (NL).
	NonprofitANBI_NLNonprofitType = Base + "NonprofitANBI"

	// NonprofitSBBI: Non-profit type referring to a Social Interest Promoting Institution (NL).
	NonprofitSBBI_NLNonprofitType = Base + "NonprofitSBBI"

	// nonprofitStatus indicates the legal status of a non-profit organization in its primary place of business.
	NonprofitStatus_Property = Base + "nonprofitStatus"

	// NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
	NonprofitType_Class = Base + "NonprofitType"

	// Range of acceptable values for a typical patient, when applicable.
	NormalRange_Property = Base + "normalRange"

	// Nose function assessment with clinical examination.
	Nose_PhysicalExam = Base + "Nose"

	// Indicates that a legislation is currently not in force.
	NotInForce_LegalForceStatus = Base + "NotInForce"

	// Not yet recruiting.
	NotYetRecruiting_MedicalStudyStatus = Base + "NotYetRecruiting"

	// A notary.
	Notary_Class = Base + "Notary"

	// A file containing a note, primarily for the author.
	NoteDigitalDocument_Class = Base + "NoteDigitalDocument"

	// Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]].
	Nsn_Property = Base + "nsn"

	// The number of adults staying in the unit.
	NumAdults_Property = Base + "numAdults"

	// The number of children staying in the unit.
	NumChildren_Property = Base + "numChildren"

	// Indicates the number of constraints property values defined for a particular [[ConstraintNode]] such as
	// [[StatisticalVariable]]. This helps applications understand if they have access to a sufficiently complete
	// description of a [[StatisticalVariable]] or other construct that is defined using properties on template-style
	// nodes.
	NumConstraints_Property = Base + "numConstraints"

	// Limits the number of items being shipped for which these conditions apply.
	NumItems_Property = Base + "numItems"

	// The number of tracks in this album or playlist.
	NumTracks_Property = Base + "numTracks"

	// Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the
	// number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also
	// [[numberOfAvailableAccommodationUnits]].
	NumberOfAccommodationUnits_Property = Base + "numberOfAccommodationUnits"

	// The number or type of airbags in the vehicle.
	NumberOfAirbags_Property = Base + "numberOfAirbags"

	// Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation
	// units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also
	// [[numberOfAccommodationUnits]].
	NumberOfAvailableAccommodationUnits_Property = Base + "numberOfAvailableAccommodationUnits"

	// The number of axles.\n\nTypical unit code(s): C62.
	NumberOfAxles_Property = Base + "numberOfAxles"

	// The total integer number of bathrooms in some [[Accommodation]], following real estate conventions as [documented
	// in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of
	// bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer
	// will be 3.". See also [[numberOfRooms]].
	NumberOfBathroomsTotal_Property = Base + "numberOfBathroomsTotal"

	// The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	NumberOfBedrooms_Property = Base + "numberOfBedrooms"

	// The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
	NumberOfBeds_Property = Base + "numberOfBeds"

	// The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
	NumberOfCredits_Property = Base + "numberOfCredits"

	// The number of doors.\n\nTypical unit code(s): C62.
	NumberOfDoors_Property = Base + "numberOfDoors"

	// The number of employees in an organization, e.g. business.
	NumberOfEmployees_Property = Base + "numberOfEmployees"

	// The number of episodes in this season or series.
	NumberOfEpisodes_Property = Base + "numberOfEpisodes"

	// The total number of forward gears available for the transmission system of the vehicle.\n\nTypical unit code(s):
	// C62.
	NumberOfForwardGears_Property = Base + "numberOfForwardGears"

	// Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to
	// the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
	NumberOfFullBathrooms_Property = Base + "numberOfFullBathrooms"

	// The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g.,
	// multi-page pagination); in such cases, the numberOfItems would be for the entire list.
	NumberOfItems_Property = Base + "numberOfItems"

	// The number of payments contractually required at origination to repay the loan. For monthly paying loans this is
	// the number of months from the contractual first payment date to the maturity date.
	NumberOfLoanPayments_Property = Base + "numberOfLoanPayments"

	// The number of pages in the book.
	NumberOfPages_Property = Base + "numberOfPages"

	// Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to
	// the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
	NumberOfPartialBathrooms_Property = Base + "numberOfPartialBathrooms"

	// Indicate how many people can play this game (minimum, maximum, or range).
	NumberOfPlayers_Property = Base + "numberOfPlayers"

	// The number of owners of the vehicle, including the current one.\n\nTypical unit code(s): C62.
	NumberOfPreviousOwners_Property = Base + "numberOfPreviousOwners"

	// The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business. Typical unit
	// code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the
	// QuantitativeValue.
	NumberOfRooms_Property = Base + "numberOfRooms"

	// The number of seasons in this series.
	NumberOfSeasons_Property = Base + "numberOfSeasons"

	// Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT
	// NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather
	// than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	Number_Class = Base + "Number"

	// A number associated with a role in an organization, for example, the number on an athlete's jersey.
	NumberedPosition_Property = Base + "numberedPosition"

	// A health profession of a person formally educated and trained in the care of the sick or infirm person.
	Nursing_MedicalSpecialty = Base + "Nursing"

	// Nutritional information about the recipe.
	NutritionInformation_Class = Base + "NutritionInformation"

	// Nutrition information about the recipe or menu item.
	Nutrition_Property = Base + "nutrition"

	// The character of a medical substance, typically a medicine, of being available over the counter or not.
	OTC_DrugPrescriptionStatus = Base + "OTC"

	// The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic
	// roles patient, affected or undergoer (which change their state) or theme (which doesn't). E.g. John read *a book*.
	Object_Property = Base + "object"

	// The [[observationAbout]] property identifies an entity, often a [[Place]], associated with an [[Observation]].
	ObservationAbout_Property = Base + "observationAbout"

	// The observationDate of an [[Observation]].
	ObservationDate_Property = Base + "observationDate"

	// The length of time an Observation took place over. The format follows `P[0-9]*[Y|M|D|h|m|s]`. For example, P1Y is
	// Period 1 Year, P3M is Period 3 Months, P3h is Period 3 hours.
	ObservationPeriod_Property = Base + "observationPeriod"

	// Instances of the class [[Observation]] are used to specify observations about an entity at a particular time. The
	// principal properties of an [[Observation]] are [[observationAbout]], [[measuredProperty]], [[statType]], [[value]
	// and [[observationDate]] and [[measuredProperty]]. Some but not all Observations represent a [[QuantitativeValue]].
	// Quantitative observations can be about a [[StatisticalVariable]], which is an abstract specification about which we
	// can make observations that are grounded at a particular location and time. Observations can also encode a subset of
	// simple RDF-like statements (its observationAbout, a StatisticalVariable, defining the measuredPoperty; its
	// observationAbout property indicating the entity the statement is about, and [[value]] ) In the context of a
	// quantitative knowledge graph, typical properties could include [[measuredProperty]], [[observationAbout]],
	// [[observationDate]], [[value]], [[unitCode]], [[unitText]], [[measurementMethod]].
	Observation_Class = Base + "Observation"

	// An observational study design.
	Observational_MedicalObservationalStudyDesign = Base + "Observational"

	// A specific branch of medical science that specializes in the care of women during the prenatal and postnatal care
	// and with the delivery of the child.
	Obstetric_MedicalSpecialty = Base + "Obstetric"

	// The allowed total occupancy for the accommodation in persons (including infants etc). For individual
	// accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual
	// agreement (e.g. a double room used by a single person). Typical unit code(s): C62 for person.
	Occupancy_Property = Base + "occupancy"

	// The region/country for which this occupational description is appropriate. Note that educational requirements and
	// qualifications can vary between jurisdictions.
	OccupationLocation_Property = Base + "occupationLocation"

	// A profession, may involve prolonged training and/or a formal qualification.
	Occupation_Class = Base + "Occupation"

	// Any physical activity engaged in for job-related purposes. Examples may include waiting tables, maid service,
	// carrying a mailbag, picking fruits or vegetables, construction work, etc.
	OccupationalActivity_PhysicalActivityCategory = Base + "OccupationalActivity"

	// A category describing the job, preferably using a term from a taxonomy such as [BLS
	// O*NET-SOC](http://www.onetcenter.org/taxonomy.html),
	// [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for
	// each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for
	// the category should be provided.\n Note: for historical reasons, any textual label and formal code provided as a
	// literal may be assumed to be from O*NET-SOC.
	OccupationalCategory_Property = Base + "occupationalCategory"

	// A description of the qualification, award, certificate, diploma or other occupational credential awarded as a
	// consequence of successful completion of this course or program.
	OccupationalCredentialAwarded_Property = Base + "occupationalCredentialAwarded"

	// Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
	OccupationalExperienceRequirements_Class = Base + "OccupationalExperienceRequirements"

	// A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome
	// or learn to deal with their problems.
	OccupationalTherapy_Class = Base + "OccupationalTherapy"

	// An ocean (for example, the Pacific).
	OceanBodyOfWater_Class = Base + "OceanBodyOfWater"

	// An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the
	// same provider.
	OfferCatalog_Class = Base + "OfferCatalog"

	// The number of offers for the product.
	OfferCount_Property = Base + "offerCount"

	// An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose
	// [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good
	// Relations](https://en.wikipedia.org/wiki/GoodRelations) for background on the underlying concepts.
	OfferForLease_Class = Base + "OfferForLease"

	// An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose
	// [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good
	// Relations](https://en.wikipedia.org/wiki/GoodRelations) for background on the underlying concepts.
	OfferForPurchase_Class = Base + "OfferForPurchase"

	// A list of possible conditions for the item.
	OfferItemCondition_Class = Base + "OfferItemCondition"

	// OfferShippingDetails represents information about shipping destinations. Multiple of these entities can be used to
	// represent different shipping rates for different destinations: One entity for Alaska/Hawaii. A different one for
	// continental US. A different one for all France. Multiple of these entities can be used to represent different
	// shipping costs and delivery times. Two entities that are identical but differ in rate and time: E.g. Cheaper and
	// slower: $5 in 5-7 days or Fast and expensive: $15 in 1-2 days.
	OfferShippingDetails_Class = Base + "OfferShippingDetails"

	// An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an
	// event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a
	// book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair,
	// dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can
	// be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields,
	// see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation
	// guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
	Offer_Class = Base + "Offer"

	// A pointer to the organization or person making the offer.
	OfferedBy_Property = Base + "offeredBy"

	// Whether prescriptions can be delivered by mail.
	OffersPrescriptionByMail_Property = Base + "offersPrescriptionByMail"

	// An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a
	// service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered,
	// i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as
	// expected on a number of common types, it can be used in others. In that case, using a second type, such as Product
	// or a subtype of Product, can clarify the nature of the offer.
	Offers_Property = Base + "offers"

	// An office equipment store.
	OfficeEquipmentStore_Class = Base + "OfficeEquipmentStore"

	// All the documents published by an official publisher should have at least the legal value level
	// "OfficialLegalValue". This indicates that the document was published by an organisation with the public task of
	// making it available (e.g. a consolidated version of a EU directive published by the EU Office of Publications).
	OfficialLegalValue_LegalValueLevel = Base + "OfficialLegalValue"

	// OfflineEventAttendanceMode - an event that is primarily conducted offline.
	OfflineEventAttendanceMode_EventAttendanceModeEnumeration = Base + "OfflineEventAttendanceMode"

	// Game server status: OfflinePermanently. Server is offline and not available.
	OfflinePermanently_GameServerStatus = Base + "OfflinePermanently"

	// Game server status: OfflineTemporarily. Server is offline now but it can be online soon.
	OfflineTemporarily_GameServerStatus = Base + "OfflineTemporarily"

	// A publication event, e.g. catch-up TV or radio podcast, during which a program is available on-demand.
	OnDemandEvent_Class = Base + "OnDemandEvent"

	// A DeliveryMethod in which an item is collected on site, e.g. in a store or at a box office.
	OnSitePickup_DeliveryMethod = Base + "OnSitePickup"

	// A specific branch of medical science that deals with benign and malignant tumors, including the study of their
	// development, diagnosis, treatment and prevention.
	Oncologic_MedicalSpecialty = Base + "Oncologic"

	// OneTimePayments: this is a benefit for one-time payments for individuals.
	OneTimePayments_GovernmentBenefitsType = Base + "OneTimePayments"

	// A particular online business, either standalone or the online part of a broader organization. Examples include an
	// eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider,
	// an online (virtual) doctor, etc.
	OnlineBusiness_Class = Base + "OnlineBusiness"

	// OnlineEventAttendanceMode - an event that is primarily conducted online.
	OnlineEventAttendanceMode_EventAttendanceModeEnumeration = Base + "OnlineEventAttendanceMode"

	// Game server status: OnlineFull. Server is online but unavailable. The maximum number of players has reached.
	OnlineFull_GameServerStatus = Base + "OnlineFull"

	// Indicates that the item is available only online.
	OnlineOnly_ItemAvailability = Base + "OnlineOnly"

	// An eCommerce site.
	OnlineStore_Class = Base + "OnlineStore"

	// Game server status: Online. Server is available.
	Online_GameServerStatus = Base + "Online"

	// A trial design in which the researcher knows the full details of the treatment, and so does the patient.
	OpenTrial_MedicalTrialDesign = Base + "OpenTrial"

	// A structured value providing information about the opening hours of a place or a certain service inside a
	// place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value
	// for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to
	// span over the next day.
	OpeningHoursSpecification_Class = Base + "OpeningHoursSpecification"

	// The opening hours of a certain place.
	OpeningHoursSpecification_Property = Base + "openingHoursSpecification"

	// The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with
	// days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are
	// specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```,
	// ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example,
	// 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time
	// itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays
	// 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time
	// itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
	OpeningHours_Property = Base + "openingHours"

	// The opening hour of the place or service on the given day(s) of the week.
	Opens_Property = Base + "opens"

	// Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
	OperatingSystem_Property = Base + "operatingSystem"

	// An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting
	// of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the
	// Opinions section of a news publication.
	OpinionNewsArticle_Class = Base + "OpinionNewsArticle"

	// A sub property of participant. The opponent on this action.
	Opponent_Property = Base + "opponent"

	// A store that sells reading glasses and similar devices for improving vision.
	Optician_Class = Base + "Optician"

	// A sub property of object. The options subject to this action.
	Option_Property = Base + "option"

	// The science or practice of testing visual acuity and prescribing corrective lenses.
	Optometric_MedicalSpecialty = Base + "Optometric"

	// An agent orders an object/product/service to be delivered/sent.
	OrderAction_Class = Base + "OrderAction"

	// OrderStatus representing cancellation of an order.
	OrderCancelled_OrderStatus = Base + "OrderCancelled"

	// Date order was placed.
	OrderDate_Property = Base + "orderDate"

	// OrderStatus representing successful delivery of an order.
	OrderDelivered_OrderStatus = Base + "OrderDelivered"

	// The delivery of the parcel related to this order or order item.
	OrderDelivery_Property = Base + "orderDelivery"

	// OrderStatus representing that an order is in transit.
	OrderInTransit_OrderStatus = Base + "OrderInTransit"

	// The identifier of the order item.
	OrderItemNumber_Property = Base + "orderItemNumber"

	// The current status of the order item.
	OrderItemStatus_Property = Base + "orderItemStatus"

	// An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
	OrderItem_Class = Base + "OrderItem"

	// The identifier of the transaction.
	OrderNumber_Property = Base + "orderNumber"

	// OrderStatus representing that payment is due on an order.
	OrderPaymentDue_OrderStatus = Base + "OrderPaymentDue"

	// Fraction of the value of the order that is charged as shipping cost.
	OrderPercentage_Property = Base + "orderPercentage"

	// OrderStatus representing availability of an order for pickup.
	OrderPickupAvailable_OrderStatus = Base + "OrderPickupAvailable"

	// OrderStatus representing that there is a problem with the order.
	OrderProblem_OrderStatus = Base + "OrderProblem"

	// OrderStatus representing that an order is being processed.
	OrderProcessing_OrderStatus = Base + "OrderProcessing"

	// The number of the item ordered. If the property is not set, assume the quantity is one.
	OrderQuantity_Property = Base + "orderQuantity"

	// OrderStatus representing that an order has been returned.
	OrderReturned_OrderStatus = Base + "OrderReturned"

	// Enumerated status values for Order.
	OrderStatus_Class = Base + "OrderStatus"

	// The current status of the order.
	OrderStatus_Property = Base + "orderStatus"

	// Minimum and maximum order value for which these shipping conditions are valid.
	OrderValue_Property = Base + "orderValue"

	// An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by
	// an Offer that has been accepted by the customer.
	Order_Class = Base + "Order"

	// The item ordered.
	OrderedItem_Property = Base + "orderedItem"

	// A subclass of Role used to describe roles within organizations.
	OrganizationRole_Class = Base + "OrganizationRole"

	// An organization such as a school, NGO, corporation, club, etc.
	Organization_Class = Base + "Organization"

	// The act of manipulating/administering/supervising/controlling one or more objects.
	OrganizeAction_Class = Base + "OrganizeAction"

	// An organizer of an Event.
	Organizer_Property = Base + "organizer"

	// Shipper's address.
	OriginAddress_Property = Base + "originAddress"

	// Content coded 'as original media content' in a [[MediaReview]], considered in the context of how it was published
	// or shared. For a [[VideoObject]] to be 'original': No evidence the footage has been misleadingly altered or
	// manipulated, though it may contain false or misleading claims. For an [[ImageObject]] to be 'original': No evidence
	// the image has been misleadingly altered or manipulated, though it may still contain false or misleading claims. For
	// an [[ImageObject]] with embedded text to be 'original': No evidence the image has been misleadingly altered or
	// manipulated, though it may still contain false or misleading claims. For an [[AudioObject]] to be 'original': No
	// evidence the audio has been misleadingly altered or manipulated, though it may contain false or misleading claims.
	OriginalMediaContent_MediaManipulationRatingEnumeration = Base + "OriginalMediaContent"

	// Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]], background information that can
	// contribute to better interpretation of the [[MediaObject]].
	OriginalMediaContextDescription_Property = Base + "originalMediaContextDescription"

	// Link to the page containing an original version of the content, or directly to an online copy of the original
	// [[MediaObject]] content, e.g. video file.
	OriginalMediaLink_Property = Base + "originalMediaLink"

	// Specifies that the customer must pay the original shipping costs when returning a product.
	OriginalShippingFees_ReturnFeesEnumeration = Base + "OriginalShippingFees"

	// The vasculature the lymphatic structure originates, or afferents, from.
	OriginatesFrom_Property = Base + "originatesFrom"

	// A system of medicine focused on promoting the body's innate ability to heal itself.
	Osteopathic_MedicineSystem = Base + "Osteopathic"

	// A specific branch of medical science that is concerned with the ear, nose and throat and their respective disease
	// states.
	Otolaryngologic_MedicalSpecialty = Base + "Otolaryngologic"

	// Indicates that the item is out of stock.
	OutOfStock_ItemAvailability = Base + "OutOfStock"

	// An outlet store.
	OutletStore_Class = Base + "OutletStore"

	// Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for
	// emergency response.
	Overdosage_Property = Base + "overdosage"

	// Overview of the content. Contains a summarized view of the topic with the most relevant information for an
	// introduction.
	OverviewHealthAspect_HealthAspectEnumeration = Base + "OverviewHealthAspect"

	// The date and time of obtaining the product.
	OwnedFrom_Property = Base + "ownedFrom"

	// The date and time of giving up ownership on the product.
	OwnedThrough_Property = Base + "ownedThrough"

	// For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational
	// ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial
	// independence. Note that the [[funder]] is also available and can be used to make basic funder information
	// machine-readable.
	OwnershipFundingInfo_Property = Base + "ownershipFundingInfo"

	// A structured value providing information about when a certain organization or person owned a certain product.
	OwnershipInfo_Class = Base + "OwnershipInfo"

	// Products owned by the organization or person.
	Owns_Property = Base + "owns"

	// Positron emission tomography imaging.
	PET_MedicalImagingTechnique = Base + "PET"

	// The page on which the work ends; for example "138" or "xvi".
	PageEnd_Property = Base + "pageEnd"

	// The page on which the work starts; for example "135" or "xiii".
	PageStart_Property = Base + "pageStart"

	// Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12,
	// 46-49".
	Pagination_Property = Base + "pagination"

	// PaidLeave: this is a benefit for paid leave.
	PaidLeave_GovernmentBenefitsType = Base + "PaidLeave"

	// The act of producing a painting, typically with paint and canvas as instruments.
	PaintAction_Class = Base + "PaintAction"

	// A painting.
	Painting_Class = Base + "Painting"

	// A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying
	// health condition.
	PalliativeProcedure_Class = Base + "PalliativeProcedure"

	// Book format: Paperback.
	Paperback_BookFormatType = Base + "Paperback"

	// The delivery of a parcel either via the postal service or a commercial service.
	ParcelDelivery_Class = Base + "ParcelDelivery"

	// A private parcel service as the delivery mode available for a certain offer.\n\nCommonly used values:\n\n*
	// http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n*
	// http://purl.org/goodrelations/v1#UPS
	ParcelService_DeliveryMethod = Base + "ParcelService"

	// A set of characteristics describing parents, who can be interested in viewing some content.
	ParentAudience_Class = Base + "ParentAudience"

	// The parent of a question, answer or item in general. Typically used for Q/A discussion threads e.g. a chain of
	// comments with the first comment being an [[Article]] or other [[CreativeWork]]. See also [[comment]] which points
	// from something to a comment about it.
	ParentItem_Property = Base + "parentItem"

	// The larger organization that this organization is a [[subOrganization]] of, if any.
	ParentOrganization_Property = Base + "parentOrganization"

	// A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
	ParentService_Property = Base + "parentService"

	// Closest parent taxon of the taxon in question.
	ParentTaxon_Property = Base + "parentTaxon"

	// A parent of this person.
	Parent_Property = Base + "parent"

	// ParentalSupport: this is a benefit for parental support.
	ParentalSupport_GovernmentBenefitsType = Base + "ParentalSupport"

	// A parents of the person.
	Parents_Property = Base + "parents"

	// A park.
	Park_Class = Base + "Park"

	// A parking lot or other parking facility.
	ParkingFacility_Class = Base + "ParkingFacility"

	// A parking map.
	ParkingMap_MapCategoryType = Base + "ParkingMap"

	// The episode to which this clip belongs.
	PartOfEpisode_Property = Base + "partOfEpisode"

	// The order is being paid as part of the referenced Invoice.
	PartOfInvoice_Property = Base + "partOfInvoice"

	// The overall order the items in this delivery were included in.
	PartOfOrder_Property = Base + "partOfOrder"

	// The season to which this episode belongs.
	PartOfSeason_Property = Base + "partOfSeason"

	// The series to which this episode or season belongs.
	PartOfSeries_Property = Base + "partOfSeries"

	// The anatomical or organ system that this structure is part of.
	PartOfSystem_Property = Base + "partOfSystem"

	// The TV series to which this episode or season belongs.
	PartOfTVSeries_Property = Base + "partOfTVSeries"

	// Identifies that this [[Trip]] is a subTrip of another Trip. For example Day 1, Day 2, etc. of a multi-day trip.
	PartOfTrip_Property = Base + "partOfTrip"

	// Indicates that parts of the legislation are in force, and parts are not.
	PartiallyInForce_LegalForceStatus = Base + "PartiallyInForce"

	// Other co-agents that participated in the action indirectly. E.g. John wrote a book with *Steve*.
	Participant_Property = Base + "participant"

	// Number of people the reservation should accommodate.
	PartySize_Property = Base + "partySize"

	// The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
	PassengerPriorityStatus_Property = Base + "passengerPriorityStatus"

	// The passenger's sequence number as assigned by the airline.
	PassengerSequenceNumber_Property = Base + "passengerSequenceNumber"

	// A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
	PathologyTest_Class = Base + "PathologyTest"

	// A specific branch of medical science that is concerned with the study of the cause, origin and nature of a disease
	// state, including its consequences as a result of manifestation of the disease. In clinical care, the term is used
	// to designate a branch of medicine using laboratory tests to diagnose and determine the prognostic significance of
	// illness.
	Pathology_MedicalSpecialty = Base + "Pathology"

	// Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or
	// condition.
	Pathophysiology_Property = Base + "pathophysiology"

	// Content about the real life experience of patients or people that have lived a similar experience about the topic.
	// May be forums, topics, Q-and-A and related material.
	PatientExperienceHealthAspect_HealthAspectEnumeration = Base + "PatientExperienceHealthAspect"

	// A patient is any person recipient of health care services.
	Patient_Class = Base + "Patient"

	// A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed
	// as text, although links to controlled value schemes are also supported.
	Pattern_Property = Base + "pattern"

	// A shop that will buy, or lend money against the security of, personal possessions.
	PawnShop_Class = Base + "PawnShop"

	// An agent pays a price to a participant.
	PayAction_Class = Base + "PayAction"

	// The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\n\nTypical unit code(s):
	// KGM for kilogram, LBR for pound\n\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is
	// the sum of [[weight]] and [[payload]]\n* Note 2: You can indicate additional information in the [[name]] of the
	// [[QuantitativeValue]] node.\n* Note 3: You may also link to a [[QualitativeValue]] node that provides additional
	// information using [[valueReference]].\n* Note 4: Note that you can use [[minValue]] and [[maxValue]] to indicate
	// ranges.
	Payload_Property = Base + "payload"

	// Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
	PaymentAccepted_Property = Base + "paymentAccepted"

	// An automatic payment system is in place and will be used.
	PaymentAutomaticallyApplied_PaymentStatusType = Base + "PaymentAutomaticallyApplied"

	// A payment method using a credit, debit, store or other card to associate the payment with an account.
	PaymentCard_Class = Base + "PaymentCard"

	// The costs of settling the payment using a particular payment method.
	PaymentChargeSpecification_Class = Base + "PaymentChargeSpecification"

	// The payment has been received and processed.
	PaymentComplete_PaymentStatusType = Base + "PaymentComplete"

	// The payee received the payment, but it was declined for some reason.
	PaymentDeclined_PaymentStatusType = Base + "PaymentDeclined"

	// The date that payment is due.
	PaymentDueDate_Property = Base + "paymentDueDate"

	// The payment is due, but still within an acceptable time to be received.
	PaymentDue_PaymentStatusType = Base + "PaymentDue"

	// The date that payment is due.
	PaymentDue_Property = Base + "paymentDue"

	// An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
	PaymentMethodId_Property = Base + "paymentMethodId"

	// The type of payment method, only for generic payment types, specific forms of payments, like card payment should be
	// expressed using subclasses of PaymentMethod.
	PaymentMethodType_Class = Base + "PaymentMethodType"

	// The type of a payment method.
	PaymentMethodType_Property = Base + "paymentMethodType"

	// A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods
	// are characterized by the legal and technical structures used, and by the organization or group carrying out the
	// transaction. The following legacy values should be accepted: \n\n*
	// http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n*
	// http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n*
	// http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n*
	// http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n*
	// http://purl.org/goodrelations/v1#PaySwarm\n\nStructured values are recommended for newer payment methods.
	PaymentMethod_Class = Base + "PaymentMethod"

	// The name of the credit card or other method of payment for the order.
	PaymentMethod_Property = Base + "paymentMethod"

	// The payment is due and considered late.
	PaymentPastDue_PaymentStatusType = Base + "PaymentPastDue"

	// A Service to transfer funds from a person or organization to a beneficiary person or organization.
	PaymentService_Class = Base + "PaymentService"

	// A specific payment status. For example, PaymentDue, PaymentComplete, etc.
	PaymentStatusType_Class = Base + "PaymentStatusType"

	// The status of payment; whether the invoice has been paid or not.
	PaymentStatus_Property = Base + "paymentStatus"

	// The URL for sending a payment.
	PaymentUrl_Property = Base + "paymentUrl"

	// A specific branch of medical science that specializes in the care of infants, children and adolescents.
	Pediatric_MedicalSpecialty = Base + "Pediatric"

	// The individual who draws the primary narrative artwork.
	Penciler_Property = Base + "penciler"

	// A set of characteristics belonging to people, e.g. who compose an item's target audience.
	PeopleAudience_Class = Base + "PeopleAudience"

	// The 10th percentile value.
	Percentile10_Property = Base + "percentile10"

	// The 25th percentile value.
	Percentile25_Property = Base + "percentile25"

	// The 75th percentile value.
	Percentile75_Property = Base + "percentile75"

	// The 90th percentile value.
	Percentile90_Property = Base + "percentile90"

	// A type of medical procedure that involves percutaneous techniques, where access to organs or tissue is achieved via
	// needle-puncture of the skin. For example, catheter-based procedures like stent delivery.
	PercutaneousProcedure_MedicalProcedureType = Base + "PercutaneousProcedure"

	// The act of participating in performance arts.
	PerformAction_Class = Base + "PerformAction"

	// The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in
	// [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	PerformTime_Property = Base + "performTime"

	// A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie,
	// TVSeries etc.
	PerformanceRole_Class = Base + "PerformanceRole"

	// Event that this person is a performer or participant in.
	PerformerIn_Property = Base + "performerIn"

	// A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
	Performer_Property = Base + "performer"

	// The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
	Performers_Property = Base + "performers"

	// A theater or other performing art center.
	PerformingArtsTheater_Class = Base + "PerformingArtsTheater"

	// A performance group, such as a band, an orchestra, or a circus.
	PerformingGroup_Class = Base + "PerformingGroup"

	// A publication in any medium issued in successive parts bearing numerical or chronological designations and intended
	// to continue indefinitely, such as a magazine, scholarly journal, or newspaper.\n\nSee also [blog
	// post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
	Periodical_Class = Base + "Periodical"

	// The type of permission granted the person, organization, or audience.
	PermissionType_Property = Base + "permissionType"

	// Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only
	// on wifi).
	Permissions_Property = Base + "permissions"

	// The target audience for this permit.
	PermitAudience_Property = Base + "permitAudience"

	// A permit issued by an organization, e.g. a parking pass.
	Permit_Class = Base + "Permit"

	// Indications regarding the permitted usage of the accommodation.
	PermittedUsage_Property = Base + "permittedUsage"

	// A person (alive, dead, undead, or fictional).
	Person_Class = Base + "Person"

	// A pet store.
	PetStore_Class = Base + "PetStore"

	// Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be
	// put in a text value.
	PetsAllowed_Property = Base + "petsAllowed"

	// The practice or art and science of preparing and dispensing drugs and medicines.
	PharmacySpecialty_MedicalSpecialty = Base + "PharmacySpecialty"

	// A pharmacy or drugstore.
	Pharmacy_Class = Base + "Pharmacy"

	// Payment by billing via the phone carrier.
	PhoneCarrierPayment_PaymentMethodType = Base + "PhoneCarrierPayment"

	// Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]. For example the city name of
	// Houston in IPA: /ˈhjuːstən/.
	PhoneticText_Property = Base + "phoneticText"

	// A photograph of this place.
	Photo_Property = Base + "photo"

	// The act of capturing still images of objects using a camera.
	PhotographAction_Class = Base + "PhotographAction"

	// A photograph.
	Photograph_Class = Base + "Photograph"

	// Photographs of this place.
	Photos_Property = Base + "photos"

	// Categories of physical activity, organized by physiologic classification.
	PhysicalActivityCategory_Class = Base + "PhysicalActivityCategory"

	// Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity
	// that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical
	// treatment or recovery plan.
	PhysicalActivity_Class = Base + "PhysicalActivity"

	// A type of physical examination of a patient performed by a physician.
	PhysicalExam_Class = Base + "PhysicalExam"

	// A description of the types of physical activity associated with the job. Defined terms such as those in O*net may
	// be used, but note that there is no way to specify the level of ability as well as its nature when using a defined
	// term.
	PhysicalRequirement_Property = Base + "physicalRequirement"

	// A process of progressive physical care and rehabilitation aimed at improving a health condition.
	PhysicalTherapy_Class = Base + "PhysicalTherapy"

	// An individual physician or a physician's office considered as a [[MedicalOrganization]].
	Physician_Class = Base + "Physician"

	// A doctor's office or clinic.
	PhysiciansOffice_Class = Base + "PhysiciansOffice"

	// Specific physiologic benefits associated to the plan.
	PhysiologicalBenefits_Property = Base + "physiologicalBenefits"

	// The practice of treatment of disease, injury, or deformity by physical methods such as massage, heat treatment, and
	// exercise rather than by drugs or surgery.
	Physiotherapy_MedicalSpecialty = Base + "Physiotherapy"

	// Where a taxi will pick up a passenger or a rental car can be picked up.
	PickupLocation_Property = Base + "pickupLocation"

	// When a taxi will pick up a passenger or a rental car can be picked up.
	PickupTime_Property = Base + "pickupTime"

	// Place of worship, such as a church, synagogue, or mosque.
	PlaceOfWorship_Class = Base + "PlaceOfWorship"

	// Entities that have a somewhat fixed, physical extension.
	Place_Class = Base + "Place"

	// A placebo-controlled trial design.
	PlaceboControlledTrial_MedicalTrialDesign = Base + "PlaceboControlledTrial"

	// The act of planning the execution of an event/task/action/reservation/plan to a future date.
	PlanAction_Class = Base + "PlanAction"

	// A specific branch of medical science that pertains to therapeutic or cosmetic repair or re-formation of missing,
	// injured or malformed tissues or body parts by manual and instrumental means.
	PlasticSurgery_MedicalSpecialty = Base + "PlasticSurgery"

	// The act of playing/exercising/training/performing for enjoyment, leisure, recreation, competition or
	// exercise.\n\nRelated actions:\n\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction
	// refers to performing for an audience or at an event, rather than consuming music.\n* [[WatchAction]]: Unlike
	// WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event,
	// rather than consuming visual content.
	PlayAction_Class = Base + "PlayAction"

	// The act of playing a video game.
	PlayGameAction_Class = Base + "PlayGameAction"

	// Indicates whether this game is multi-player, co-op or single-player. The game can be marked as multi-player, co-op
	// and single-player at the same time.
	PlayMode_Property = Base + "playMode"

	// A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical
	// performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or
	// [[BroadcastEvent]] - the *Play* being the [[workPerformed]].
	Play_Class = Base + "Play"

	// Player type required&#x2014;for example, Flash or Silverlight.
	PlayerType_Property = Base + "playerType"

	// Number of players on the server.
	PlayersOnline_Property = Base + "playersOnline"

	// A playground.
	Playground_Class = Base + "Playground"

	// A plumbing service.
	Plumber_Class = Base + "Plumber"

	// A single episode of a podcast series.
	PodcastEpisode_Class = Base + "PodcastEpisode"

	// A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries
	// should be used.
	PodcastSeason_Class = Base + "PodcastSeason"

	// A podcast is an episodic series of digital audio or video files which a user can download and listen to.
	PodcastSeries_Class = Base + "PodcastSeries"

	// Podiatry is the care of the human foot, especially the diagnosis and treatment of foot disorders.
	Podiatric_MedicalSpecialty = Base + "Podiatric"

	// A police station.
	PoliceStation_Class = Base + "PoliceStation"

	// Organization: Political Party.
	PoliticalParty_Class = Base + "PoliticalParty"

	// A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A
	// polygon is expressed as a series of four or more space delimited points where the first and final points are
	// identical.
	Polygon_Property = Base + "polygon"

	// A pond.
	Pond_Class = Base + "Pond"

	// Indicates the populationType common to all members of a [[StatisticalPopulation]] or all cases within the scope of
	// a [[StatisticalVariable]].
	PopulationType_Property = Base + "populationType"

	// The position of an item in a series or sequence of items.
	Position_Property = Base + "position"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/positiveFilm">positive film</a>' using
	// the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	PositiveFilmDigitalSource_IPTCDigitalSourceEnumeration = Base + "PositiveFilmDigitalSource"

	// Provides positive considerations regarding something, for example product highlights or (alongside
	// [[negativeNotes]]) pro/con lists for reviews. In the case of a [[Review]], the property describes the
	// [[itemReviewed]] from the perspective of the review; in the case of a [[Product]], the product itself is being
	// described. The property values can be expressed either as unstructured text (repeated as necessary), or if ordered,
	// as a list (in which case the most positive is at the beginning of the list).
	PositiveNotes_Property = Base + "positiveNotes"

	// A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the
	// signs or symptoms of the disease, extension of the condition to other organ systems, etc.
	PossibleComplication_Property = Base + "possibleComplication"

	// A possible treatment to address this condition, sign or symptom.
	PossibleTreatment_Property = Base + "possibleTreatment"

	// The post office box number for PO box addresses.
	PostOfficeBoxNumber_Property = Base + "postOfficeBoxNumber"

	// A post office.
	PostOffice_Class = Base + "PostOffice"

	// A description of the postoperative procedures, care, and/or followups for this device.
	PostOp_Property = Base + "postOp"

	// The mailing address.
	PostalAddress_Class = Base + "PostalAddress"

	// First postal code in a range (included).
	PostalCodeBegin_Property = Base + "postalCodeBegin"

	// Last postal code in the range (included). Needs to be after [[postalCodeBegin]].
	PostalCodeEnd_Property = Base + "postalCodeEnd"

	// A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.
	PostalCodePrefix_Property = Base + "postalCodePrefix"

	// Indicates a range of postal codes, usually defined as the set of valid codes between [[postalCodeBegin]] and
	// [[postalCodeEnd]], inclusively.
	PostalCodeRangeSpecification_Class = Base + "PostalCodeRangeSpecification"

	// A defined range of postal codes.
	PostalCodeRange_Property = Base + "postalCodeRange"

	// The postal code. For example, 94043.
	PostalCode_Property = Base + "postalCode"

	// A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or
	// publicize something.
	Poster_Class = Base + "Poster"

	// A description of an action that is supported.
	PotentialActionStatus_ActionStatusType = Base + "PotentialActionStatus"

	// Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
	PotentialAction_Property = Base + "potentialAction"

	// Intended use of the BioChemEntity by humans.
	PotentialUse_Property = Base + "potentialUse"

	// A [[MedicalOrganization]] where the [[IndividualPhysician]] practices.
	PracticesAt_Property = Base + "practicesAt"

	// A description of the workup, testing, and other preparations required before implanting this device.
	PreOp_Property = Base + "preOp"

	// An agent orders a (not yet released) object/product/service to be delivered/sent.
	PreOrderAction_Class = Base + "PreOrderAction"

	// Indicates that the item is available for pre-order.
	PreOrder_ItemAvailability = Base + "PreOrder"

	// Indicates that the item is available for ordering and delivery before general availability.
	PreSale_ItemAvailability = Base + "PreSale"

	// A pointer from a previous, often discontinued variant of the product to its newer variant.
	PredecessorOf_Property = Base + "predecessorOf"

	// Pregnancy category of this drug.
	PregnancyCategory_Property = Base + "pregnancyCategory"

	// Content discussing pregnancy-related aspects of a health topic.
	PregnancyHealthAspect_HealthAspectEnumeration = Base + "PregnancyHealthAspect"

	// Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.
	PregnancyWarning_Property = Base + "pregnancyWarning"

	// The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration
	// format](http://en.wikipedia.org/wiki/ISO_8601).
	PrepTime_Property = Base + "prepTime"

	// Typical preparation that a patient must undergo before having the procedure performed.
	Preparation_Property = Base + "preparation"

	// The act of inserting at the beginning if an ordered collection.
	PrependAction_Class = Base + "PrependAction"

	// A preschool.
	Preschool_Class = Base + "Preschool"

	// Link to prescribing information for the drug.
	PrescribingInfo_Property = Base + "prescribingInfo"

	// Available by prescription only.
	PrescriptionOnly_DrugPrescriptionStatus = Base + "PrescriptionOnly"

	// Indicates the status of drug prescription, e.g. local catalogs classifications or whether the drug is available by
	// prescription or over-the-counter, etc.
	PrescriptionStatus_Property = Base + "prescriptionStatus"

	// A file containing slides or used for a presentation.
	PresentationDigitalDocument_Class = Base + "PresentationDigitalDocument"

	// Information about actions or measures that can be taken to avoid getting the topic or reaching a critical situation
	// related to the topic.
	PreventionHealthAspect_HealthAspectEnumeration = Base + "PreventionHealthAspect"

	// An indication for preventing an underlying condition, symptom, etc.
	PreventionIndication_Class = Base + "PreventionIndication"

	// A link to the ListItem that precedes the current one.
	PreviousItem_Property = Base + "previousItem"

	// Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously
	// scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start
	// date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be
	// repeated.
	PreviousStartDate_Property = Base + "previousStartDate"

	// Enumerates different price components that together make up the total price for an offered product.
	PriceComponentTypeEnumeration_Class = Base + "PriceComponentTypeEnumeration"

	// Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.
	PriceComponentType_Property = Base + "priceComponentType"

	// This property links to all [[UnitPriceSpecification]] nodes that apply in parallel for the
	// [[CompoundPriceSpecification]] node.
	PriceComponent_Property = Base + "priceComponent"

	// The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse
	// standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker
	// symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names
	// for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other
	// currency types, e.g. "Ithaca HOUR".
	PriceCurrency_Property = Base + "priceCurrency"

	// The price range of the business, for example ```$$$```.
	PriceRange_Property = Base + "priceRange"

	// A structured value representing a price or price range. Typically, only the subclasses of this type are used for
	// markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary,
	// credit card limits, etc.
	PriceSpecification_Class = Base + "PriceSpecification"

	// One or more detailed price specifications, indicating the unit price and delivery or payment charges.
	PriceSpecification_Property = Base + "priceSpecification"

	// Enumerates different price types, for example list price, invoice price, and sale price.
	PriceTypeEnumeration_Class = Base + "PriceTypeEnumeration"

	// Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or
	// a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can
	// be used to identify the type of each such specified price. The value of priceType can be specified as a value from
	// enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in
	// PriceTypeEnumeration.
	PriceType_Property = Base + "priceType"

	// The date after which the price is no longer available.
	PriceValidUntil_Property = Base + "priceValidUntil"

	// The offer price of a product, or of a price component when attached to PriceSpecification and its
	// subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency
	// format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker
	// symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names
	// for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other
	// currency types, e.g. "Ithaca HOUR") instead of including [ambiguous
	// symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the
	// value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these
	// symbols as a readability separator.\n* Note that both
	// [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a
	// "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use
	// values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar
	// Unicode symbols.
	Price_Property = Base + "price"

	// The medical care by a physician, or other health-care professional, who is the patient's first contact with the
	// health-care system and who may recommend a specialist if necessary.
	PrimaryCare_MedicalSpecialty = Base + "PrimaryCare"

	// Indicates the main image on the page.
	PrimaryImageOfPage_Property = Base + "primaryImageOfPage"

	// A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
	PrimaryPrevention_Property = Base + "primaryPrevention"

	// The number of the column in which the NewsArticle appears in the print edition.
	PrintColumn_Property = Base + "printColumn"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/print">print</a>' using the IPTC <a
	// href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	PrintDigitalSource_IPTCDigitalSourceEnumeration = Base + "PrintDigitalSource"

	// The edition of the print product in which the NewsArticle appears.
	PrintEdition_Property = Base + "printEdition"

	// If this NewsArticle appears in print, this field indicates the name of the page on which the article is found.
	// Please note that this field is intended for the exact page name (e.g. A5, B18).
	PrintPage_Property = Base + "printPage"

	// If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
	PrintSection_Property = Base + "printSection"

	// A prion is an infectious agent composed of protein in a misfolded form.
	Prion_InfectiousAgentClass = Base + "Prion"

	// The type of procedure, for example Surgical, Noninvasive, or Percutaneous.
	ProcedureType_Property = Base + "procedureType"

	// A description of the procedure involved in setting up, using, and/or installing the device.
	Procedure_Property = Base + "procedure"

	// Estimated processing time for the service using this channel.
	ProcessingTime_Property = Base + "processingTime"

	// Processor architecture required to run the application (e.g. IA64).
	ProcessorRequirements_Property = Base + "processorRequirements"

	// The person or organization who produced the work (e.g. music album, movie, TV/radio series etc.).
	Producer_Property = Base + "producer"

	// The tangible thing generated by the service, e.g. a passport, permit, etc.
	Produces_Property = Base + "produces"

	// A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
	ProductCollection_Class = Base + "ProductCollection"

	// Indicates a textual identifier for a ProductGroup.
	ProductGroupID_Property = Base + "productGroupID"

	// A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by
	// [[size]], [[color]], [[material]] etc. While a ProductGroup itself is not directly offered for sale, the various
	// varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all
	// of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types)
	// can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many)
	// variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following
	// specific properties [[variesBy]], [[hasVariant]], [[url]].
	ProductGroup_Class = Base + "ProductGroup"

	// The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
	ProductID_Property = Base + "productID"

	// A datasheet or vendor specification of a product (in the sense of a prototypical description).
	ProductModel_Class = Base + "ProductModel"

	// The productReturnDays property indicates the number of days (from purchase) within which relevant product return
	// policy is applicable.
	ProductReturnDays_Property = Base + "productReturnDays"

	// ProductReturnEnumeration enumerates several kinds of product return policy. Note that this structure may not
	// capture all aspects of the policy.
	ProductReturnEnumeration_Class = Base + "ProductReturnEnumeration"

	// ProductReturnFiniteReturnWindow: there is a finite window for product returns.
	ProductReturnFiniteReturnWindow_ProductReturnEnumeration = Base + "ProductReturnFiniteReturnWindow"

	// Indicates a Web page or service by URL, for product return.
	ProductReturnLink_Property = Base + "productReturnLink"

	// ProductReturnNotPermitted: product returns are not permitted.
	ProductReturnNotPermitted_ProductReturnEnumeration = Base + "ProductReturnNotPermitted"

	// A ProductReturnPolicy provides information about product return policies associated with an [[Organization]] or
	// [[Product]].
	ProductReturnPolicy_Class = Base + "ProductReturnPolicy"

	// ProductReturnUnlimitedWindow: there is an unlimited window for product returns.
	ProductReturnUnlimitedWindow_ProductReturnEnumeration = Base + "ProductReturnUnlimitedWindow"

	// ProductReturnUnspecified: a product return policy is not specified here.
	ProductReturnUnspecified_ProductReturnEnumeration = Base + "ProductReturnUnspecified"

	// The product or service this support contact point is related to (such as product support for a particular product
	// line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services
	// (e.g. "smartphones").
	ProductSupported_Property = Base + "productSupported"

	// Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or
	// an episode of a TV show streamed online.
	Product_Class = Base + "Product"

	// The production company or studio responsible for the item, e.g. series, video game, episode etc.
	ProductionCompany_Property = Base + "productionCompany"

	// The date of production of the item, e.g. vehicle.
	ProductionDate_Property = Base + "productionDate"

	// Original definition: "provider of professional services."\n\nThe general [[ProfessionalService]] type for local
	// businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were:
	// [[Dentist]], [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of
	// [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]], [[HousePainter]], [[Locksmith]],
	// [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].
	ProfessionalService_Class = Base + "ProfessionalService"

	// Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
	ProficiencyLevel_Property = Base + "proficiencyLevel"

	// Web page type: Profile page.
	ProfilePage_Class = Base + "ProfilePage"

	// Typical progression and happenings of life course of the topic.
	PrognosisHealthAspect_HealthAspectEnumeration = Base + "PrognosisHealthAspect"

	// Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
	ProgramMembershipUsed_Property = Base + "programMembershipUsed"

	// Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs
	// ("Safeway Club"), etc.
	ProgramMembership_Class = Base + "ProgramMembership"

	// The program providing the membership. It is preferable to use [:program](http://schema.org/program) instead.
	ProgramName_Property = Base + "programName"

	// Prerequisites for enrolling in the program.
	ProgramPrerequisites_Property = Base + "programPrerequisites"

	// The type of educational or occupational program. For example, classroom, internship, alternance, etc.
	ProgramType_Property = Base + "programType"

	// The [MemberProgram](http://schema.org/MemberProgram) associated with a
	// [ProgramMembership](http://schema.org/ProgramMembership).
	Program_Property = Base + "program"

	// The computer programming language.
	ProgrammingLanguage_Property = Base + "programmingLanguage"

	// Indicates whether API is managed or unmanaged.
	ProgrammingModel_Property = Base + "programmingModel"

	// An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim. Use
	// properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures.
	Project_Class = Base + "Project"

	// Data type: PronounceableText.
	PronounceableText_Class = Base + "PronounceableText"

	// A short string listing or describing pronouns for a person. Typically the person concerned is the best authority as
	// pronouns are a critical part of personal identity and expression. Publishers and consumers of this information are
	// reminded to treat this data responsibly, take country-specific laws related to gender expression into account, and
	// be wary of out-of-date data and drawing unwarranted inferences about the person being described. In English,
	// formulations such as "they/them", "she/her", and "he/him" are commonly used online and can also be used here. We do
	// not intend to enumerate all possible micro-syntaxes in all languages. More structured and well-defined external
	// values for pronouns can be referenced using the [[StructuredValue]] or [[DefinedTerm]] values.
	Pronouns_Property = Base + "pronouns"

	// A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard
	// code for a property. propertyID can be (1) a prefixed string, mainly meant to be used with standards for product
	// properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific
	// ID of the property), or (3) a URL indicating the type of the property, either pointing to an external vocabulary,
	// or a Web resource that describes the property (e.g. a glossary entry). Standards bodies should promote a standard
	// prefix for the identifiers of properties from their standards.
	PropertyID_Property = Base + "propertyID"

	// A Property value specification.
	PropertyValueSpecification_Class = Base + "PropertyValueSpecification"

	// A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of
	// the property. If there is an additional human-readable version of the value, put that into the 'description'
	// property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using
	// PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
	PropertyValue_Class = Base + "PropertyValue"

	// A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
	Property_Class = Base + "Property"

	// Proprietary name given to the diet plan, typically by its originator or creator.
	ProprietaryName_Property = Base + "proprietaryName"

	// The number of grams of protein.
	ProteinContent_Property = Base + "proteinContent"

	// Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta
	// Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point
	// to are all of type :Protein. A protein can thus be a subclass of another protein, e.g. :Protein as a UniProt record
	// can have multiple isoforms inside it which would also be :Protein. They can be imagined, synthetic, hypothetical or
	// naturally occurring.
	Protein_Class = Base + "Protein"

	// Single-celled organism that causes an infection.
	Protozoa_InfectiousAgentClass = Base + "Protozoa"

	// Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
	ProviderMobility_Property = Base + "providerMobility"

	// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may
	// offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	Provider_Property = Base + "provider"

	// The BroadcastService offered on this channel.
	ProvidesBroadcastService_Property = Base + "providesBroadcastService"

	// The service provided by this channel.
	ProvidesService_Property = Base + "providesService"

	// A specific branch of medical science that is concerned with the study, treatment, and prevention of mental illness,
	// using both medical and psychological therapies.
	Psychiatric_MedicalSpecialty = Base + "Psychiatric"

	// A process of care relying upon counseling, dialogue and communication aimed at improving a mental health condition
	// without use of drugs.
	PsychologicalTreatment_Class = Base + "PsychologicalTreatment"

	// A flag to signal that the [[Place]] is open to public visitors. If this property is omitted there is no assumed
	// default boolean value.
	PublicAccess_Property = Base + "publicAccess"

	// Branch of medicine that pertains to the health services to improve and protect community health, especially
	// epidemiology, sanitation, immunization, and preventive medicine.
	PublicHealth_MedicalSpecialty = Base + "PublicHealth"

	// This stands for any day that is a public holiday; it is a placeholder for all official public holidays in some
	// particular location. While not technically a "day of the week", it can be used with [[OpeningHoursSpecification]].
	// In the context of an opening hours specification it can be used to indicate opening hours on public holidays,
	// overriding general opening hours for the day of the week on which a public holiday occurs.
	PublicHolidays_DayOfWeek = Base + "PublicHolidays"

	// A public swimming pool.
	PublicSwimmingPool_Class = Base + "PublicSwimmingPool"

	// A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is
	// available for use by the general public, or by customers or employees of certain businesses.
	PublicToilet_Class = Base + "PublicToilet"

	// Information about public transport closures.
	PublicTransportClosuresInfo_Property = Base + "publicTransportClosuresInfo"

	// A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type, e.g. a
	// broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
	PublicationEvent_Class = Base + "PublicationEvent"

	// A part of a successively published publication such as a periodical or publication volume, often numbered, usually
	// containing a grouping of works such as articles.\n\nSee also [blog
	// post](https://blog-schema.org/2014/09/02/schema-org-support-for-bibliographic-relationships-and-periodicals/).
	PublicationIssue_Class = Base + "PublicationIssue"

	// The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH
	// documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).
	PublicationType_Property = Base + "publicationType"

	// A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may
	// represent a time span, such as a year.\n\nSee also [blog
	// post](https://blog-schema.org/2014/09/02/schema-org-support-for-bibliographic-relationships-and-periodicals/).
	PublicationVolume_Class = Base + "PublicationVolume"

	// A publication event associated with the item.
	Publication_Property = Base + "publication"

	// An agent associated with the publication event.
	PublishedBy_Property = Base + "publishedBy"

	// A broadcast service associated with the publication event.
	PublishedOn_Property = Base + "publishedOn"

	// The publishing division which published the comic.
	PublisherImprint_Property = Base + "publisherImprint"

	// The publisher of the article in question.
	Publisher_Property = Base + "publisher"

	// The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles
	// of an [[Organization]] (or individual, e.g. a [[Person]] writing a blog) that relate to their activities as a
	// publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the
	// principles are those of the party primarily responsible for the creation of the [[CreativeWork]]. While such
	// policies are most typically expressed in natural language, sometimes related information (e.g. indicating a
	// [[funder]]) can be expressed using schema.org terminology.
	PublishingPrinciples_Property = Base + "publishingPrinciples"

	// A specific branch of medical science that pertains to the study of the respiratory system and its respective
	// disease states.
	Pulmonary_MedicalSpecialty = Base + "Pulmonary"

	// The date the item, e.g. vehicle, was purchased by the current owner.
	PurchaseDate_Property = Base + "purchaseDate"

	// Optional. The maximum price the item can have and still qualify for this offer.
	PurchasePriceLimit_Property = Base + "purchasePriceLimit"

	// This is a lease of an item.
	PurchaseTypeLease_PurchaseType = Base + "PurchaseTypeLease"

	// This is a purchase of a new item.
	PurchaseTypeNewPurchase_PurchaseType = Base + "PurchaseTypeNewPurchase"

	// This is a trade-in for an item.
	PurchaseTypeTradeIn_PurchaseType = Base + "PurchaseTypeTradeIn"

	// This is a purchase of a used item.
	PurchaseTypeUsedPurchase_PurchaseType = Base + "PurchaseTypeUsedPurchase"

	// Enumerates a purchase type for an item.
	PurchaseType_Class = Base + "PurchaseType"

	// Optional. The type of purchase the consumer must make in order to qualify for this incentive.
	PurchaseType_Property = Base + "purchaseType"

	// A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or
	// documenting Frequently Asked Questions (FAQs).
	QAPage_Class = Base + "QAPage"

	// Specific qualifications required for this role or Occupation.
	Qualifications_Property = Base + "qualifications"

	// Optional. The types of expenses that are covered by the incentive. For example some incentives are only for the
	// goods (tangible items) but the services (labor) are excluded.
	QualifiedExpense_Property = Base + "qualifiedExpense"

	// A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M',
	// 'L', and 'XL'.
	QualitativeValue_Class = Base + "QualitativeValue"

	// A statistical distribution of values.
	QuantitativeValueDistribution_Class = Base + "QuantitativeValueDistribution"

	// A point value or interval for product characteristics and other purposes.
	QuantitativeValue_Class = Base + "QuantitativeValue"

	// Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 kg' or
	// '4 milligrams'.
	Quantity_Class = Base + "Quantity"

	// Guidelines about quarantine rules, e.g. in the context of a pandemic.
	QuarantineGuidelines_Property = Base + "quarantineGuidelines"

	// A sub property of instrument. The query used on this action.
	Query_Property = Base + "query"

	// The task that a player-controlled character, or group of characters may complete in order to gain a reward.
	Quest_Property = Base + "quest"

	// A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ)
	// document.
	Question_Class = Base + "Question"

	// A sub property of object. A question.
	Question_Property = Base + "question"

	// Quiz: A test of knowledge, skills and abilities.
	Quiz_Class = Base + "Quiz"

	// A quotation. Often but not necessarily from some written work, attributable to a real world author and - if
	// associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The
	// [[recordedIn]] property can be used to reference a Quotation from an [[Event]].
	Quotation_Class = Base + "Quotation"

	// An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
	QuoteAction_Class = Base + "QuoteAction"

	// A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
	RVPark_Class = Base + "RVPark"

	// A process of care using radiation aimed at improving a health condition.
	RadiationTherapy_Class = Base + "RadiationTherapy"

	// A delivery service through which radio content is provided via broadcast over the air or online.
	RadioBroadcastService_Class = Base + "RadioBroadcastService"

	// A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
	RadioChannel_Class = Base + "RadioChannel"

	// A short radio program or a segment/part of a radio program.
	RadioClip_Class = Base + "RadioClip"

	// A radio episode which can be part of a series or season.
	RadioEpisode_Class = Base + "RadioEpisode"

	// Season dedicated to radio broadcast and associated online delivery.
	RadioSeason_Class = Base + "RadioSeason"

	// CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
	RadioSeries_Class = Base + "RadioSeries"

	// A radio station.
	RadioStation_Class = Base + "RadioStation"

	// Radiography is an imaging technique that uses electromagnetic radiation other than visible light, especially
	// X-rays, to view the internal structure of a non-uniformly composed and opaque object such as the human body.
	Radiography_MedicalImagingTechnique = Base + "Radiography"

	// A randomized trial design.
	RandomizedTrial_MedicalTrialDesign = Base + "RandomizedTrial"

	// Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
	RangeIncludes_Property = Base + "rangeIncludes"

	// The count of total number of ratings.
	RatingCount_Property = Base + "ratingCount"

	// A short explanation (e.g. one to two sentences) providing background context and other information that led to the
	// conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup
	// using [[ClaimReview]].
	RatingExplanation_Property = Base + "ratingExplanation"

	// The rating for the content.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to
	// 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E))
	// rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	RatingValue_Property = Base + "ratingValue"

	// A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
	Rating_Class = Base + "Rating"

	// The act of responding instinctively and emotionally to an object, expressing a sentiment.
	ReactAction_Class = Base + "ReactAction"

	// The act of consuming written content.
	ReadAction_Class = Base + "ReadAction"

	// A person who reads (performs) the audiobook.
	ReadBy_Property = Base + "readBy"

	// Permission to read or view the document.
	ReadPermission_DigitalDocumentPermissionType = Base + "ReadPermission"

	// Whether or not a property is mutable. Default is false. Specifying this for a property that also has a value makes
	// it act similar to a "hidden" input in an HTML form.
	ReadonlyValue_Property = Base + "readonlyValue"

	// A real-estate agent.
	RealEstateAgent_Class = Base + "RealEstateAgent"

	// A sub property of participant. The real estate agent involved in the action.
	RealEstateAgent_Property = Base + "realEstateAgent"

	// A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]]
	// is typically to lease out, or to sell). The [[RealEstateListing]] type itself represents the overall listing, as
	// manifested in some [[WebPage]].
	RealEstateListing_Class = Base + "RealEstateListing"

	// Real-wheel drive is a transmission layout where the engine drives the rear wheels.
	RearWheelDriveConfiguration_DriveWheelConfigurationValue = Base + "RearWheelDriveConfiguration"

	// The act of physically/electronically taking delivery of an object that has been transferred from an origin to a
	// destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* [[SendAction]]: The reciprocal of ReceiveAction.\n*
	// [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transferred (e.g. I can
	// receive a package, but it does not mean the package is now mine).
	ReceiveAction_Class = Base + "ReceiveAction"

	// The category of the recipe—for example, appetizer, entree, etc.
	RecipeCategory_Property = Base + "recipeCategory"

	// The cuisine of the recipe (for example, French or Ethiopian).
	RecipeCuisine_Property = Base + "recipeCuisine"

	// A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	RecipeIngredient_Property = Base + "recipeIngredient"

	// A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep
	// and/or HowToSection items.
	RecipeInstructions_Property = Base + "recipeInstructions"

	// The quantity produced by the recipe (for example, number of people served, number of servings, etc).
	RecipeYield_Property = Base + "recipeYield"

	// A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via
	// [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
	Recipe_Class = Base + "Recipe"

	// A sub property of instrument. The recipe/instructions used to perform the action.
	Recipe_Property = Base + "recipe"

	// A sub property of participant. The participant who is at the receiving end of the action.
	Recipient_Property = Base + "recipient"

	// An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a
	// process of quality assurance or accreditation.
	RecognizedBy_Property = Base + "recognizedBy"

	// If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
	RecognizingAuthority_Property = Base + "recognizingAuthority"

	// Strength of the guideline's recommendation (e.g. 'class I').
	RecommendationStrength_Property = Base + "recommendationStrength"

	// [[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of
	// action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list
	// or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a
	// [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.
	Recommendation_Class = Base + "Recommendation"

	// A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the
	// drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of
	// MedicalEntity.
	RecommendedDoseSchedule_Class = Base + "RecommendedDoseSchedule"

	// Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	RecommendedIntake_Property = Base + "recommendedIntake"

	// The label that issued the release.
	RecordLabel_Property = Base + "recordLabel"

	// An audio recording of the work.
	RecordedAs_Property = Base + "recordedAs"

	// The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
	RecordedAt_Property = Base + "recordedAt"

	// The CreativeWork that captured all or part of this Event.
	RecordedIn_Property = Base + "recordedIn"

	// The composition this track is a recording of.
	RecordingOf_Property = Base + "recordingOf"

	// The only way you get the money back in the event of default is the security. Recourse is where you still have the
	// opportunity to go back to the borrower for the rest of the money.
	RecourseLoan_Property = Base + "recourseLoan"

	// Recruiting participants.
	Recruiting_MedicalStudyStatus = Base + "Recruiting"

	// A recycling center.
	RecyclingCenter_Class = Base + "RecyclingCenter"

	// A general code for cases where relevance to children is reduced, e.g. adult education, mortgages,
	// retirement-related products, etc.
	ReducedRelevanceForChildrenConsideration_AdultOrientedEnumeration = Base + "ReducedRelevanceForChildrenConsideration"

	// An official who watches a game or match closely to enforce the rules and arbitrate on matters arising from the play
	// such as referees, umpires or judges. The name of the effective function can vary according to the sport.
	Referee_Property = Base + "referee"

	// The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a
	// replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
	ReferenceQuantity_Property = Base + "referenceQuantity"

	// The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
	ReferencesOrder_Property = Base + "referencesOrder"

	// Enumerates several kinds of product return refund types.
	RefundTypeEnumeration_Class = Base + "RefundTypeEnumeration"

	// A refund type, from an enumerated list.
	RefundType_Property = Base + "refundType"

	// Indicates that the item is refurbished.
	RefurbishedCondition_OfferItemCondition = Base + "RefurbishedCondition"

	// The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
	RegionDrained_Property = Base + "regionDrained"

	// The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the
	// countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).
	RegionsAllowed_Property = Base + "regionsAllowed"

	// The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* [[JoinAction]]:
	// Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of
	// people.\n* [[FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll
	// for updates from the object.\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the
	// agent is expecting updates from the object.
	RegisterAction_Class = Base + "RegisterAction"

	// A registry-based study design.
	Registry_MedicalObservationalStudyDesign = Base + "Registry"

	// Represents the regular price of an offered product. This is usually the advertised price before a temporary sale.
	// Once the sale period ends the advertised price will go back to the regular price.
	RegularPrice_PriceTypeEnumeration = Base + "RegularPrice"

	// The drug's cost represents the maximum reimbursement paid by an insurer for the drug.
	ReimbursementCap_DrugCostCategory = Base + "ReimbursementCap"

	// The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* [[AcceptAction]]: The antonym of RejectAction.
	RejectAction_Class = Base + "RejectAction"

	// Anatomical systems or structures that relate to the superficial anatomy.
	RelatedAnatomy_Property = Base + "relatedAnatomy"

	// A medical condition associated with this anatomy.
	RelatedCondition_Property = Base + "relatedCondition"

	// Any other drug related to this one, for example commonly-prescribed alternatives.
	RelatedDrug_Property = Base + "relatedDrug"

	// A link related to this web page, for example to other related web pages.
	RelatedLink_Property = Base + "relatedLink"

	// Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular
	// bundles associated with an organ system.
	RelatedStructure_Property = Base + "relatedStructure"

	// A medical therapy related to this anatomy.
	RelatedTherapy_Property = Base + "relatedTherapy"

	// The most generic familial relation.
	RelatedTo_Property = Base + "relatedTo"

	// Other prominent or relevant topics tied to the main topic.
	RelatedTopicsHealthAspect_HealthAspectEnumeration = Base + "RelatedTopicsHealthAspect"

	// The release date of a product or product model. This can be used to distinguish the exact variant of a product.
	ReleaseDate_Property = Base + "releaseDate"

	// Description of what changed in this version.
	ReleaseNotes_Property = Base + "releaseNotes"

	// The album this is a release of.
	ReleaseOf_Property = Base + "releaseOf"

	// The place and time the release was issued, expressed as a PublicationEvent.
	ReleasedEvent_Property = Base + "releasedEvent"

	// The Occupation for the JobPosting.
	RelevantOccupation_Property = Base + "relevantOccupation"

	// If applicable, a medical specialty in which this entity is relevant.
	RelevantSpecialty_Property = Base + "relevantSpecialty"

	// The number of attendee places for an event that remain unallocated.
	RemainingAttendeeCapacity_Property = Base + "remainingAttendeeCapacity"

	// RemixAlbum.
	RemixAlbum_MusicAlbumProductionType = Base + "RemixAlbum"

	// A specific branch of medical science that pertains to the study of the kidneys and its respective disease states.
	Renal_MedicalSpecialty = Base + "Renal"

	// Whether the terms for payment of interest can be renegotiated during the life of the loan.
	RenegotiableLoan_Property = Base + "renegotiableLoan"

	// The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property.
	// For example, an agent rents a property from a landlord in exchange for a periodic payment.
	RentAction_Class = Base + "RentAction"

	// A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in
	// confirmation emails or HTML pages with individual confirmations of reservations.
	RentalCarReservation_Class = Base + "RentalCarReservation"

	// Indicates the usage of the vehicle as a rental car.
	RentalVehicleUsage_CarUsageType = Base + "RentalVehicleUsage"

	// A structured value representing repayment.
	RepaymentSpecification_Class = Base + "RepaymentSpecification"

	// Defines the number of times a recurring [[Event]] will take place.
	RepeatCount_Property = Base + "repeatCount"

	// Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]. The intervals between
	// events should be defined as a [[Duration]] of time.
	RepeatFrequency_Property = Base + "repeatFrequency"

	// Number of times one should repeat the activity.
	Repetitions_Property = Base + "repetitions"

	// The act of editing a recipient by replacing an old object with a new object.
	ReplaceAction_Class = Base + "ReplaceAction"

	// A sub property of object. The object that is being replaced.
	Replacee_Property = Base + "replacee"

	// A sub property of object. The object that replaces.
	Replacer_Property = Base + "replacer"

	// The act of responding to a question/message asked/sent by the object. Related to [[AskAction]].\n\nRelated
	// actions:\n\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.
	ReplyAction_Class = Base + "ReplyAction"

	// The URL at which a reply may be posted to the specified UserComment.
	ReplyToUrl_Property = Base + "replyToUrl"

	// The number or other unique designator assigned to a Report by the publishing organization.
	ReportNumber_Property = Base + "reportNumber"

	// A Report generated by governmental or non-governmental organization.
	Report_Class = Base + "Report"

	// The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing news articles which are the result
	// of journalistic news reporting conventions. In practice many news publishers produce a wide variety of article
	// types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion
	// pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements. The
	// [[ReportageNewsArticle]] type is based on a stricter ideal for "news" as a work of journalism, with articles based
	// on factual information either observed or verified by the author, or reported and verified from knowledgeable
	// sources. This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news
	// reports from public relations or propaganda). News reports in the [[ReportageNewsArticle]] sense de-emphasize the
	// opinion of the author, with commentary and value judgements typically expressed elsewhere. A
	// [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of
	// [[AnalysisNewsArticle]].
	ReportageNewsArticle_Class = Base + "ReportageNewsArticle"

	// A patient-reported or observed dosing schedule for a drug or supplement.
	ReportedDoseSchedule_Class = Base + "ReportedDoseSchedule"

	// Indicates whether this image is representative of the content of the page.
	RepresentativeOfPage_Property = Base + "representativeOfPage"

	// Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial
	// instruments (cash, securities, etc.)
	RequiredCollateral_Property = Base + "requiredCollateral"

	// Audiences defined by a person's gender.
	RequiredGender_Property = Base + "requiredGender"

	// Audiences defined by a person's maximum age.
	RequiredMaxAge_Property = Base + "requiredMaxAge"

	// Audiences defined by a person's minimum age.
	RequiredMinAge_Property = Base + "requiredMinAge"

	// The required quantity of the item(s).
	RequiredQuantity_Property = Base + "requiredQuantity"

	// Component dependency requirements for application. This includes runtime environments and shared libraries that are
	// not included in the application distribution package, but required to run the application (examples: DirectX, Java
	// or .NET runtime).
	Requirements_Property = Base + "requirements"

	// Indicates if use of the media require a subscription (either paid or free). Allowed values are ```true``` or
	// ```false``` (note that an earlier version had 'yes', 'no').
	RequiresSubscription_Property = Base + "requiresSubscription"

	// A Research Organization (e.g. scientific institute, research company).
	ResearchOrganization_Class = Base + "ResearchOrganization"

	// A Research project.
	ResearchProject_Class = Base + "ResearchProject"

	// Researchers.
	Researcher_Class = Base + "Researcher"

	// The status for a previously confirmed reservation that is now cancelled.
	ReservationCancelled_ReservationStatusType = Base + "ReservationCancelled"

	// The status of a confirmed reservation.
	ReservationConfirmed_ReservationStatusType = Base + "ReservationConfirmed"

	// The thing -- flight, event, restaurant, etc. being reserved.
	ReservationFor_Property = Base + "reservationFor"

	// The status of a reservation on hold pending an update like credit card number or flight changes.
	ReservationHold_ReservationStatusType = Base + "ReservationHold"

	// A unique identifier for the reservation.
	ReservationId_Property = Base + "reservationId"

	// A group of multiple reservations with common values for all sub-reservations.
	ReservationPackage_Class = Base + "ReservationPackage"

	// The status of a reservation when a request has been sent, but not confirmed.
	ReservationPending_ReservationStatusType = Base + "ReservationPending"

	// Enumerated status values for Reservation.
	ReservationStatusType_Class = Base + "ReservationStatusType"

	// The current status of the reservation.
	ReservationStatus_Property = Base + "reservationStatus"

	// Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is
	// for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations
	// of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].
	Reservation_Class = Base + "Reservation"

	// Reserving a concrete object.\n\nRelated actions:\n\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction
	// reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
	ReserveAction_Class = Base + "ReserveAction"

	// A ticket associated with the reservation.
	ReservedTicket_Property = Base + "reservedTicket"

	// Indicates that the item is reserved and therefore not available.
	Reserved_ItemAvailability = Base + "Reserved"

	// A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
	Reservoir_Class = Base + "Reservoir"

	// The place where a person lives.
	Residence_Class = Base + "Residence"

	// A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are
	// places, towns or sometimes commercial establishments operated by a single company (source: Wikipedia, the free
	// encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>). <br /><br
	// /> See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and
	// other forms of accommodations</a>.
	Resort_Class = Base + "Resort"

	// The therapy that is concerned with the maintenance or improvement of respiratory function (as in patients with
	// pulmonary disease).
	RespiratoryTherapy_MedicalSpecialty = Base + "RespiratoryTherapy"

	// Responsibilities associated with this role or Occupation.
	Responsibilities_Property = Base + "responsibilities"

	// How often one should break from the activity.
	RestPeriods_Property = Base + "restPeriods"

	// A restaurant.
	Restaurant_Class = Base + "Restaurant"

	// Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use [[Number]] to specify a
	// percentage of the product price paid by the customer.
	RestockingFee_Property = Base + "restockingFee"

	// Specifies that the customer must pay a restocking fee when returning a product.
	RestockingFees_ReturnFeesEnumeration = Base + "RestockingFees"

	// A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
	RestrictedDiet_Class = Base + "RestrictedDiet"

	// A sub property of result. The Comment created or sent as a result of this action.
	ResultComment_Property = Base + "resultComment"

	// A sub property of result. The review that resulted in the performing of the action.
	ResultReview_Property = Base + "resultReview"

	// The result produced in the action. E.g. John wrote *a book*.
	Result_Property = Base + "result"

	// Results are available.
	ResultsAvailable_MedicalStudyStatus = Base + "ResultsAvailable"

	// Results are not available.
	ResultsNotAvailable_MedicalStudyStatus = Base + "ResultsNotAvailable"

	// The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a
	// timer).
	ResumeAction_Class = Base + "ResumeAction"

	// The drug's cost represents the retail cost of the drug.
	Retail_DrugCostCategory = Base + "Retail"

	// The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
	ReturnAction_Class = Base + "ReturnAction"

	// Specifies that product returns must be made at a kiosk.
	ReturnAtKiosk_ReturnMethodEnumeration = Base + "ReturnAtKiosk"

	// Specifies that product returns must be done by mail.
	ReturnByMail_ReturnMethodEnumeration = Base + "ReturnByMail"

	// Specifies that product returns must be paid for, and are the responsibility of, the customer.
	ReturnFeesCustomerResponsibility_ReturnFeesEnumeration = Base + "ReturnFeesCustomerResponsibility"

	// Enumerates several kinds of policies for product return fees.
	ReturnFeesEnumeration_Class = Base + "ReturnFeesEnumeration"

	// The type of return fees for purchased products (for any return reason).
	ReturnFees_Property = Base + "returnFees"

	// Specifies that product returns must be made in a store.
	ReturnInStore_ReturnMethodEnumeration = Base + "ReturnInStore"

	// Indicated that creating a return label is the responsibility of the customer.
	ReturnLabelCustomerResponsibility_ReturnLabelSourceEnumeration = Base + "ReturnLabelCustomerResponsibility"

	// Indicated that a return label must be downloaded and printed by the customer.
	ReturnLabelDownloadAndPrint_ReturnLabelSourceEnumeration = Base + "ReturnLabelDownloadAndPrint"

	// Specifies that a return label will be provided by the seller in the shipping box.
	ReturnLabelInBox_ReturnLabelSourceEnumeration = Base + "ReturnLabelInBox"

	// Enumerates several types of return labels for product returns.
	ReturnLabelSourceEnumeration_Class = Base + "ReturnLabelSourceEnumeration"

	// The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for
	// any reason.
	ReturnLabelSource_Property = Base + "returnLabelSource"

	// Enumerates several types of product return methods.
	ReturnMethodEnumeration_Class = Base + "ReturnMethodEnumeration"

	// The type of return method offered, specified from an enumeration.
	ReturnMethod_Property = Base + "returnMethod"

	// Specifies an applicable return policy (from an enumeration).
	ReturnPolicyCategory_Property = Base + "returnPolicyCategory"

	// The country where the product has to be sent to for returns, for example "Ireland" using the [[name]] property of
	// [[Country]]. You can also provide the two-letter [ISO 3166-1 alpha-2 country
	// code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product
	// was originally shipped from or sent to.
	ReturnPolicyCountry_Property = Base + "returnPolicyCountry"

	// Seasonal override of a return policy.
	ReturnPolicySeasonalOverride_Property = Base + "returnPolicySeasonalOverride"

	// Amount of shipping costs for product returns (for any reason). Applicable when property [[returnFees]] equals
	// [[ReturnShippingFees]].
	ReturnShippingFeesAmount_Property = Base + "returnShippingFeesAmount"

	// Specifies that the customer must pay the return shipping costs when returning a product.
	ReturnShippingFees_ReturnFeesEnumeration = Base + "ReturnShippingFees"

	// The act of producing a balanced opinion about the object for an audience. An agent reviews an object with
	// participants resulting in a review.
	ReviewAction_Class = Base + "ReviewAction"

	// This Review or Rating is relevant to this part or facet of the itemReviewed.
	ReviewAspect_Property = Base + "reviewAspect"

	// The actual body of the review.
	ReviewBody_Property = Base + "reviewBody"

	// The count of total number of reviews.
	ReviewCount_Property = Base + "reviewCount"

	// A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product,
	// performance, or artistic or literary work.
	ReviewNewsArticle_Class = Base + "ReviewNewsArticle"

	// The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to
	// rating given by the review. The [[aggregateRating]] property applies to the review itself, as a creative work.
	ReviewRating_Property = Base + "reviewRating"

	// A review of an item - for example, of a restaurant, movie, or store.
	Review_Class = Base + "Review"

	// A review of the item.
	Review_Property = Base + "review"

	// People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
	ReviewedBy_Property = Base + "reviewedBy"

	// Review of the item.
	Reviews_Property = Base + "reviews"

	// A specific branch of medical science that deals with the study and treatment of rheumatic, autoimmune or joint
	// diseases.
	Rheumatologic_MedicalSpecialty = Base + "Rheumatologic"

	// The steering position is on the right side of the vehicle (viewed from the main direction of driving).
	RightHandDriving_SteeringPositionValue = Base + "RightHandDriving"

	// A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,
	// coexisting condition.
	RiskFactor_Property = Base + "riskFactor"

	// Information about the risk factors and possible complications that may follow a topic.
	RisksOrComplicationsHealthAspect_HealthAspectEnumeration = Base + "RisksOrComplicationsHealthAspect"

	// Specific physiologic risks associated to the diet plan.
	Risks_Property = Base + "risks"

	// A river (for example, the broad majestic Shannon).
	RiverBodyOfWater_Class = Base + "RiverBodyOfWater"

	// A role played, performed or filled by a person or organization. For example, the team of creators for a comic book
	// might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the
	// position named 'Quarterback'.
	RoleName_Property = Base + "roleName"

	// Represents additional information about a relationship or property. For example a Role can be used to say that a
	// 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's
	// 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity,
	// which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also
	// [blog post](http://blog.schema.org/2014/06/introducing-role.html).
	Role_Class = Base + "Role"

	// The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit
	// code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of
	// the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides
	// additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to
	// indicate ranges.
	RoofLoad_Property = Base + "roofLoad"

	// A roofing contractor.
	RoofingContractor_Class = Base + "RoofingContractor"

	// A room is a distinguishable space within a structure, usually separated from other spaces by interior walls
	// (source: Wikipedia, the free encyclopedia, see <a
	// href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>). <br /><br /> See also the <a
	// href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of
	// accommodations</a>.
	Room_Class = Base + "Room"

	// The act of notifying an event organizer as to whether you expect to attend the event.
	RsvpAction_Class = Base + "RsvpAction"

	// The invitee may or may not attend.
	RsvpResponseMaybe_RsvpResponseType = Base + "RsvpResponseMaybe"

	// The invitee will not attend.
	RsvpResponseNo_RsvpResponseType = Base + "RsvpResponseNo"

	// RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
	RsvpResponseType_Class = Base + "RsvpResponseType"

	// The invitee will attend.
	RsvpResponseYes_RsvpResponseType = Base + "RsvpResponseYes"

	// The response (yes, no, maybe) to the RSVP.
	RsvpResponse_Property = Base + "rsvpResponse"

	// The vasculature the lymphatic structure runs, or efferents, to.
	RunsTo_Property = Base + "runsTo"

	// Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
	RuntimePlatform_Property = Base + "runtimePlatform"

	// Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
	Runtime_Property = Base + "runtime"

	// The RxCUI drug identifier from RXNORM.
	Rxcui_Property = Base + "rxcui"

	// Represents the suggested retail price ("SRP") of an offered product.
	SRP_PriceTypeEnumeration = Base + "SRP"

	// Any potential safety concern associated with the supplement. May include interactions with other drugs and foods,
	// pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.
	SafetyConsideration_Property = Base + "safetyConsideration"

	// Content about the safety-related aspects of a health topic.
	SafetyHealthAspect_HealthAspectEnumeration = Base + "SafetyHealthAspect"

	// The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)) used for the main salary information
	// in this job posting or for this employee.
	SalaryCurrency_Property = Base + "salaryCurrency"

	// The expected salary upon completing the training.
	SalaryUponCompletion_Property = Base + "salaryUponCompletion"

	// Event type: Sales event.
	SaleEvent_Class = Base + "SaleEvent"

	// Represents a sale price (usually active for a limited period) of an offered product.
	SalePrice_PriceTypeEnumeration = Base + "SalePrice"

	// URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia
	// page, Wikidata entry, or official website.
	SameAs_Property = Base + "sameAs"

	// What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	SampleType_Property = Base + "sampleType"

	// Content coded 'satire or parody content' in a [[MediaReview]], considered in the context of how it was published or
	// shared. For a [[VideoObject]] to be 'satire or parody content': A video that was created as political or humorous
	// commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant
	// context are more likely to fall under the “missing context” rating.) For an [[ImageObject]] to be 'satire or parody
	// content': An image that was created as political or humorous commentary and is presented in that context. (Reshares
	// of satire/parody content that do not include relevant context are more likely to fall under the “missing context”
	// rating.) For an [[ImageObject]] with embedded text to be 'satire or parody content': An image that was created as
	// political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not
	// include relevant context are more likely to fall under the “missing context” rating.) For an [[AudioObject]] to be
	// 'satire or parody content': Audio that was created as political or humorous commentary and is presented in that
	// context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the
	// “missing context” rating.)
	SatireOrParodyContent_MediaManipulationRatingEnumeration = Base + "SatireOrParodyContent"

	// An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e.
	// unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]].
	// [[ScholarlyArticle]]s are also sometimes satirized.
	SatiricalArticle_Class = Base + "SatiricalArticle"

	// The number of grams of saturated fat.
	SaturatedFatContent_Property = Base + "saturatedFatContent"

	// The day of the week between Friday and Sunday.
	Saturday_DayOfWeek = Base + "Saturday"

	// Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* [[ReserveAction]]: Unlike ReserveAction,
	// ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
	ScheduleAction_Class = Base + "ScheduleAction"

	// Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given. The value provided should be
	// among those listed in the IANA Time Zone Database.
	ScheduleTimezone_Property = Base + "scheduleTimezone"

	// A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a
	// schedule will specify [[repeatFrequency]] which describes the interval between occurrences of the event. Additional
	// information can be provided to specify the schedule more precisely. This includes identifying the day(s) of the
	// week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
	// have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
	Schedule_Class = Base + "Schedule"

	// The date the invoice is scheduled to be paid.
	ScheduledPaymentDate_Property = Base + "scheduledPaymentDate"

	// The time the object is scheduled to.
	ScheduledTime_Property = Base + "scheduledTime"

	// Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created
	// primarily to indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more
	// explicitly via URL, ```http://schema.org/docs/releases.html#v10.0```. There may be situations in which other
	// schemas might usefully be referenced this way, e.g.
	// ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in
	// the community.
	SchemaVersion_Property = Base + "schemaVersion"

	// A scholarly article.
	ScholarlyArticle_Class = Base + "ScholarlyArticle"

	// Information about school closures.
	SchoolClosuresInfo_Property = Base + "schoolClosuresInfo"

	// A School District is an administrative area for the administration of schools.
	SchoolDistrict_Class = Base + "SchoolDistrict"

	// A school.
	School_Class = Base + "School"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/algorithmicMedia">algorithmic media</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	ScreenCaptureDigitalSource_IPTCDigitalSourceEnumeration = Base + "ScreenCaptureDigitalSource"

	// The number of screens in the movie theater.
	ScreenCount_Property = Base + "screenCount"

	// A screening of a movie or other video.
	ScreeningEvent_Class = Base + "ScreeningEvent"

	// Content about how to screen or further filter a topic.
	ScreeningHealthAspect_HealthAspectEnumeration = Base + "ScreeningHealthAspect"

	// A link to a screenshot image of the app.
	Screenshot_Property = Base + "screenshot"

	// A piece of sculpture.
	Sculpture_Class = Base + "Sculpture"

	// Indicates the date on which the current structured data was generated / published. Typically used alongside
	// [[sdPublisher]].
	SdDatePublished_Property = Base + "sdDatePublished"

	// A license document that applies to this structured data, typically indicated by URL.
	SdLicense_Property = Base + "sdLicense"

	// Indicates the party responsible for generating and publishing the current structured data markup, typically in
	// cases where the structured data is derived automatically from existing published content but published on a
	// different site. For example, student projects and open data initiatives often re-publish existing content with more
	// explicitly structured metadata. The [[sdPublisher]] property helps make such practices more explicit.
	SdPublisher_Property = Base + "sdPublisher"

	// A sea (for example, the Caspian sea).
	SeaBodyOfWater_Class = Base + "SeaBodyOfWater"

	// The act of searching for an object.\n\nRelated actions:\n\n* [[FindAction]]: SearchAction generally leads to a
	// FindAction, but not necessarily.
	SearchAction_Class = Base + "SearchAction"

	// A Search and Rescue organization of some kind.
	SearchRescueOrganization_Class = Base + "SearchRescueOrganization"

	// Web page type: Search results page.
	SearchResultsPage_Class = Base + "SearchResultsPage"

	// Position of the season within an ordered group of seasons.
	SeasonNumber_Property = Base + "seasonNumber"

	// A media season, e.g. TV, radio, video game etc.
	Season_Class = Base + "Season"

	// A season in a media series.
	Season_Property = Base + "season"

	// Limited period during which these shipping conditions apply.
	SeasonalOverride_Property = Base + "seasonalOverride"

	// A season in a media series.
	Seasons_Property = Base + "seasons"

	// The location of the reserved seat (e.g., 27).
	SeatNumber_Property = Base + "seatNumber"

	// The row location of the reserved seat (e.g., B).
	SeatRow_Property = Base + "seatRow"

	// The section location of the reserved seat (e.g. Orchestra).
	SeatSection_Property = Base + "seatSection"

	// Used to describe a seat, such as a reserved seat in an event reservation.
	Seat_Class = Base + "Seat"

	// The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in
	// terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
	SeatingCapacity_Property = Base + "seatingCapacity"

	// A seating map.
	SeatingMap_MapCategoryType = Base + "SeatingMap"

	// The type/class of the seat.
	SeatingType_Property = Base + "seatingType"

	// A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the
	// condition.
	SecondaryPrevention_Property = Base + "secondaryPrevention"

	// A description of any security clearance requirements of the job.
	SecurityClearanceRequirement_Property = Base + "securityClearanceRequirement"

	// The type of security screening the passenger is subject to.
	SecurityScreening_Property = Base + "securityScreening"

	// Information about questions that may be asked, when to see a professional, measures before seeing a doctor or
	// content about the first consultation.
	SeeDoctorHealthAspect_HealthAspectEnumeration = Base + "SeeDoctorHealthAspect"

	// This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically
	// represented with a URL template structure.
	SeekToAction_Class = Base + "SeekToAction"

	// A pointer to products or services sought by the organization or person (demand).
	Seeks_Property = Base + "seeks"

	// Self care actions or measures that can be taken to sooth, health or avoid a topic. This may be carried at home and
	// can be carried/managed by the person itself.
	SelfCareHealthAspect_HealthAspectEnumeration = Base + "SelfCareHealthAspect"

	// A self-storage facility.
	SelfStorage_Class = Base + "SelfStorage"

	// The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product,
	// or service to a buyer for a price. Reciprocal of BuyAction.
	SellAction_Class = Base + "SellAction"

	// An entity which offers (sells / leases / lends / loans) the services / goods. A seller may also be a provider.
	Seller_Property = Base + "seller"

	// The act of physically/electronically dispatching an object for transfer from an origin to a destination. Related
	// actions:\n\n* [[ReceiveAction]]: The reciprocal of SendAction.\n* [[GiveAction]]: Unlike GiveAction, SendAction
	// does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
	SendAction_Class = Base + "SendAction"

	// A sub property of participant. The participant who is at the sending end of the action.
	Sender_Property = Base + "sender"

	// A description of any sensory requirements and levels necessary to function on the job, including hearing and
	// vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of
	// ability as well as its nature when using a defined term.
	SensoryRequirement_Property = Base + "sensoryRequirement"

	// The neurological pathway extension that inputs and sends information to the brain or spinal cord.
	SensoryUnit_Property = Base + "sensoryUnit"

	// The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a
	// shortcut for the serial number of the product included in the offer.
	SerialNumber_Property = Base + "serialNumber"

	// A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also
	// [[CreativeWorkSeries]], [[EventSeries]].
	Series_Class = Base + "Series"

	// A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those
	// that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong
	// existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require
	// medical or surgical intervention to prevent one of the outcomes in this definition.
	SeriousAdverseOutcome_Property = Base + "seriousAdverseOutcome"

	// Status of a game server.
	ServerStatus_Property = Base + "serverStatus"

	// The cuisine of the restaurant.
	ServesCuisine_Property = Base + "servesCuisine"

	// The geographic area where the service is provided.
	ServiceArea_Property = Base + "serviceArea"

	// The audience eligible for this service.
	ServiceAudience_Property = Base + "serviceAudience"

	// A means for accessing a service, e.g. a government office location, web site, or phone number.
	ServiceChannel_Class = Base + "ServiceChannel"

	// The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
	ServiceLocation_Property = Base + "serviceLocation"

	// The operating organization, if different from the provider. This enables the representation of services that are
	// provided by an organization, but operated by another organization like a subcontractor.
	ServiceOperator_Property = Base + "serviceOperator"

	// The tangible thing generated by the service, e.g. a passport, permit, etc.
	ServiceOutput_Property = Base + "serviceOutput"

	// ServicePeriod represents a duration with some constraints about cutoff time and business days. This is used e.g. in
	// shipping for handling times or transit time.
	ServicePeriod_Class = Base + "ServicePeriod"

	// The phone number to use to access the service.
	ServicePhone_Property = Base + "servicePhone"

	// The address for accessing the service by mail.
	ServicePostalAddress_Property = Base + "servicePostalAddress"

	// The number to access the service by text message.
	ServiceSmsNumber_Property = Base + "serviceSmsNumber"

	// The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
	ServiceType_Property = Base + "serviceType"

	// The website to access the service.
	ServiceUrl_Property = Base + "serviceUrl"

	// A service provided by an organization, e.g. delivery service, print services, etc.
	Service_Class = Base + "Service"

	// The serving size, in terms of the number of volume or mass.
	ServingSize_Property = Base + "servingSize"

	// The item contains sexually oriented content such as nudity, suggestive or explicit material, or related online
	// services, or is intended to enhance sexual activity. Examples: Erotic videos or magazine, sexual enhancement
	// devices, sex toys.
	SexualContentConsideration_AdultOrientedEnumeration = Base + "SexualContentConsideration"

	// The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length
	// input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'.
	Sha256_Property = Base + "sha256"

	// The act of distributing content to people for their amusement or edification.
	ShareAction_Class = Base + "ShareAction"

	// A CreativeWork such as an image, video, or audio clip shared as part of this posting.
	SharedContent_Property = Base + "sharedContent"

	// Printed music, as opposed to performed or recorded music.
	SheetMusic_Class = Base + "SheetMusic"

	// ShippingConditions represent a set of constraints and information about the conditions of shipping a product. Such
	// conditions may apply to only a subset of the products being shipped, depending on aspects of the product like
	// weight, size, price, destination, and others. All the specified conditions must be met for this ShippingConditions
	// to apply.
	ShippingConditions_Class = Base + "ShippingConditions"

	// The conditions (constraints, price) applicable to the [[ShippingService]].
	ShippingConditions_Property = Base + "shippingConditions"

	// ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
	ShippingDeliveryTime_Class = Base + "ShippingDeliveryTime"

	// indicates (possibly multiple) shipping destinations. These can be defined in several ways, e.g. postalCode ranges.
	ShippingDestination_Property = Base + "shippingDestination"

	// Indicates information about the shipping policies and options associated with an [[Offer]].
	ShippingDetails_Property = Base + "shippingDetails"

	// Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a
	// [[shippingSettingsLink]] cross-reference).
	ShippingLabel_Property = Base + "shippingLabel"

	// Indicates the origin of a shipment, i.e. where it should be coming from.
	ShippingOrigin_Property = Base + "shippingOrigin"

	// A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an
	// URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several
	// occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for
	// [[shippingLabel]].
	ShippingRateSettings_Class = Base + "ShippingRateSettings"

	// The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values
	// (of the [[MonetaryAmount]]) are most appropriate.
	ShippingRate_Property = Base + "shippingRate"

	// ShippingService represents the criteria used to determine if and how an offer could be shipped to a customer.
	ShippingService_Class = Base + "ShippingService"

	// Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]] details.
	ShippingSettingsLink_Property = Base + "shippingSettingsLink"

	// A shoe store.
	ShoeStore_Class = Base + "ShoeStore"

	// A shopping center or mall.
	ShoppingCenter_Class = Base + "ShoppingCenter"

	// Short story or tale. A brief work of literature, usually written in narrative prose.
	ShortStory_Class = Base + "ShortStory"

	// A sibling of the person.
	Sibling_Property = Base + "sibling"

	// A sibling of the person.
	Siblings_Property = Base + "siblings"

	// Side effects that can be observed from the usage of the topic.
	SideEffectsHealthAspect_HealthAspectEnumeration = Base + "SideEffectsHealthAspect"

	// A sign detected by the test.
	SignDetected_Property = Base + "signDetected"

	// A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical
	// condition while symptoms are the subjective experience of the medical condition.
	SignOrSymptom_Property = Base + "signOrSymptom"

	// The significance associated with the superficial anatomy; as an example, how characteristics of the superficial
	// anatomy can suggest underlying medical conditions or courses of treatment.
	Significance_Property = Base + "significance"

	// One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the
	// most.
	SignificantLink_Property = Base + "significantLink"

	// The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
	SignificantLinks_Property = Base + "significantLinks"

	// A trial design in which the researcher knows which treatment the patient was randomly assigned to but the patient
	// does not.
	SingleBlindedTrial_MedicalTrialDesign = Base + "SingleBlindedTrial"

	// A trial that takes place at a single center.
	SingleCenterTrial_MedicalTrialDesign = Base + "SingleCenterTrial"

	// Residence type: Single-family home.
	SingleFamilyResidence_Class = Base + "SingleFamilyResidence"

	// Play mode: SinglePlayer. Which is played by a lone player.
	SinglePlayer_GamePlayMode = Base + "SinglePlayer"

	// SingleRelease.
	SingleRelease_MusicAlbumReleaseType = Base + "SingleRelease"

	// A navigation element of the page.
	SiteNavigationElement_Class = Base + "SiteNavigationElement"

	// Enumerates common size groups for various product categories.
	SizeGroupEnumeration_Class = Base + "SizeGroupEnumeration"

	// The size group (also known as "size type") for a product's size. Size groups are common in the fashion industry to
	// define size segments and suggested audiences for wearable products. Multiple values can be combined, for example
	// "men's big and tall", "petite maternity" or "regular".
	SizeGroup_Property = Base + "sizeGroup"

	// Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]],
	// [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined
	// through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
	SizeSpecification_Class = Base + "SizeSpecification"

	// Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables
	// or "Imperial" for screws.
	SizeSystemEnumeration_Class = Base + "SizeSystemEnumeration"

	// Imperial size system.
	SizeSystemImperial_SizeSystemEnumeration = Base + "SizeSystemImperial"

	// Metric size system.
	SizeSystemMetric_SizeSystemEnumeration = Base + "SizeSystemMetric"

	// The size system used to identify a product's size. Typically either a standard (for example, "GS1" or
	// "ISO-EN13402"), country code (for example "US" or "JP"), or a measuring system (for example "Metric" or
	// "Imperial").
	SizeSystem_Property = Base + "sizeSystem"

	// A standardized size of a product or creative work, specified either through a simple textual string (for example
	// 'XL', '32Wx34L'), a QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in
	// other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
	Size_Property = Base + "size"

	// A ski resort.
	SkiResort_Class = Base + "SkiResort"

	// A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is either
	// claimed by a person, an organization or desired or required to fulfill a role or to work in an occupation.
	Skills_Property = Base + "skills"

	// Skin assessment with clinical examination.
	Skin_PhysicalExam = Base + "Skin"

	// The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which
	// the offer refers.
	Sku_Property = Base + "sku"

	// A slogan or motto associated with the item.
	Slogan_Property = Base + "slogan"

	// A specification in form of a line notation for describing the structure of chemical species using short ASCII
	// strings. Double bond stereochemistry \ indicators may need to be escaped in the string in formats where the
	// backslash is an escape character.
	Smiles_Property = Base + "smiles"

	// Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
	SmokingAllowed_Property = Base + "smokingAllowed"

	// Event type: Social event.
	SocialEvent_Class = Base + "SocialEvent"

	// A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
	SocialMediaPosting_Class = Base + "SocialMediaPosting"

	// The number of milligrams of sodium.
	SodiumContent_Property = Base + "sodiumContent"

	// Additional content for a software application.
	SoftwareAddOn_Property = Base + "softwareAddOn"

	// A software application.
	SoftwareApplication_Class = Base + "SoftwareApplication"

	// Software application help.
	SoftwareHelp_Property = Base + "softwareHelp"

	// Component dependency requirements for application. This includes runtime environments and shared libraries that are
	// not included in the application distribution package, but required to run the application (examples: DirectX, Java
	// or .NET runtime).
	SoftwareRequirements_Property = Base + "softwareRequirements"

	// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts,
	// templates.
	SoftwareSourceCode_Class = Base + "SoftwareSourceCode"

	// Version of the software instance.
	SoftwareVersion_Property = Base + "softwareVersion"

	// Indicates that the item has sold out.
	SoldOut_ItemAvailability = Base + "SoldOut"

	// The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying
	// that expression.
	SolveMathAction_Class = Base + "SolveMathAction"

	// A placeholder for multiple similar products of the same kind.
	SomeProducts_Class = Base + "SomeProducts"

	// SoundtrackAlbum.
	SoundtrackAlbum_MusicAlbumProductionType = Base + "SoundtrackAlbum"

	// The Organization on whose behalf the creator was working.
	SourceOrganization_Property = Base + "sourceOrganization"

	// The neurological pathway that originates the neurons.
	SourcedFrom_Property = Base + "sourcedFrom"

	// The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a
	// subproperty of contentLocation intended primarily for more technical and detailed materials. For example with a
	// Dataset, it indicates areas that the dataset describes: a dataset of New York weather would have spatialCoverage
	// which was the place: the state of New York.
	SpatialCoverage_Property = Base + "spatialCoverage"

	// The "spatial" property can be used in cases when more specific properties (e.g. [[locationCreated]],
	// [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
	Spatial_Property = Base + "spatial"

	// A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are
	// highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of
	// the [[speakable]] property.
	SpeakableSpecification_Class = Base + "SpeakableSpecification"

	// Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being
	// especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in
	// particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful
	// for speech. The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible
	// 'content-locator' values: 1.) *id-value* URL references - uses *id-value* of an element in the page being
	// annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections
	// of the document concerned. 2.) CSS Selectors - addresses content in the annotated page, e.g. via class attribute.
	// Use the [[cssSelector]] property. 3.) XPaths - addresses content via XPaths (assuming an XML view of the content).
	// Use the [[xpath]] property. For more sophisticated markup of speakable sections beyond simple ID references, either
	// CSS selectors or XPath expressions to pick out document section(s) as speakable. For this we define a supporting
	// type, [[SpeakableSpecification]] which is defined to be a possible value of the *speakable* property.
	Speakable_Property = Base + "speakable"

	// A SpecialAnnouncement combines a simple date-stamped textual information update with contextualized Web links and
	// other structured data. It represents an information update made by a locally-oriented organization, for example
	// schools, pharmacies, healthcare providers, community groups, police, local government. For work in progress
	// guidelines on Coronavirus-related markup see [this
	// doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#). The motivating
	// scenario for SpecialAnnouncement is the [Coronavirus
	// pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is
	// oriented to this urgent situation. Schema.org expect to improve the markup iteratively as it is deployed and as
	// feedback emerges from use. In addition to our usual [Github
	// entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this
	// document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#). While this schema
	// is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology
	// like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is
	// to cover the kinds of everyday practical information being posted to existing websites during an emergency
	// situation. Several kinds of information can be provided: We encourage the provision of "name", "text",
	// "datePosted", "expires" (if appropriate), "category" and "url" as a simple baseline. It is important to provide a
	// value for "category" where possible, most ideally as a well known URL from Wikipedia or Wikidata. In the case of
	// the 2019-2020 Coronavirus pandemic, this should be
	// "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or
	// "https://www.wikidata.org/wiki/Q81068910". For many of the possible properties, values can either be simple links
	// or an inline description, depending on whether a summary is available. For a link, provide just the URL of the
	// appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url
	// as a property of that, alongside at least a simple "[[text]]" summary of the page. It is unlikely that a single
	// SpecialAnnouncement will need all of the possible properties simultaneously. We expect that in many cases the page
	// referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]],
	// [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the
	// events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the
	// [[SpecialAnnouncement]]. Many [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local
	// organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific
	// [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific
	// location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and
	// [[announcementLocation]]. The [[about]] property can be used to indicate entities that are the focus of the
	// announcement. We now recommend using [[about]] only for representing non-location entities (e.g. a [[Course]] or a
	// [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup
	// should be aware that the initial design encouraged the use of [[about]] for locations too. The basic content of
	// [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or
	// [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like
	// information can be shared by posting [[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with
	// Atom/RSS functionality, you can point to a feed with the [[webFeed]] property. This can be a simple URL, or an
	// inline [[DataFeed]] object, with [[encodingFormat]] providing media type information, e.g. "application/rss+xml" or
	// "application/atom+xml".
	SpecialAnnouncement_Class = Base + "SpecialAnnouncement"

	// Any special commitments associated with this job posting. Valid entries include VeteranCommit,
	// MilitarySpouseCommit, etc.
	SpecialCommitments_Property = Base + "specialCommitments"

	// The special opening hours of a certain place.\n\nUse this to explicitly override general opening hours brought in
	// scope by [[openingHoursSpecification]] or [[openingHours]].
	SpecialOpeningHoursSpecification_Property = Base + "specialOpeningHoursSpecification"

	// Any branch of a field in which people typically develop specific expertise, usually after significant study, time,
	// and effort.
	Specialty_Class = Base + "Specialty"

	// One of the domain specialities to which this web page's content applies.
	Specialty_Property = Base + "specialty"

	// The scientific study and treatment of defects, disorders, and malfunctions of speech and voice, as stuttering,
	// lisping, or lalling, and of language disturbances, as aphasia or delayed language acquisition.
	SpeechPathology_MedicalSpecialty = Base + "SpeechPathology"

	// Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or
	// [IPA](https://www.wikidata.org/wiki/Property:P898).
	SpeechToTextMarkup_Property = Base + "speechToTextMarkup"

	// The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range
	// (indicated by [[maxValue]]) should be the maximum speed achievable under regular conditions.\n\nTypical unit
	// code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\n\n*Note 1: Use [[minValue]] and
	// [[maxValue]] to indicate the range. Typically, the minimal value is zero.\n* Note 2: There are many different ways
	// of measuring the speed range. You can link to information about how the given value has been determined using the
	// [[valueReference]] property.
	Speed_Property = Base + "speed"

	// The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing
	// CreativeWork.
	SpokenByCharacter_Property = Base + "spokenByCharacter"

	// SpokenWordAlbum.
	SpokenWordAlbum_MusicAlbumProductionType = Base + "SpokenWordAlbum"

	// A person or organization that supports a thing through a pledge, promise, or financial contribution. E.g. a sponsor
	// of a Medical Study or a corporate sponsor of an event.
	Sponsor_Property = Base + "sponsor"

	// A type of sport (e.g. Baseball).
	Sport_Property = Base + "sport"

	// A sporting goods store.
	SportingGoodsStore_Class = Base + "SportingGoodsStore"

	// A sports location, such as a playing field.
	SportsActivityLocation_Class = Base + "SportsActivityLocation"

	// A sub property of location. The sports activity location where this action occurred.
	SportsActivityLocation_Property = Base + "sportsActivityLocation"

	// A sports club.
	SportsClub_Class = Base + "SportsClub"

	// Event type: Sports event.
	SportsEvent_Class = Base + "SportsEvent"

	// A sub property of location. The sports event where this action occurred.
	SportsEvent_Property = Base + "sportsEvent"

	// Represents the collection of all sports organizations, including sports teams, governing bodies, and sports
	// associations.
	SportsOrganization_Class = Base + "SportsOrganization"

	// Organization: Sports team.
	SportsTeam_Class = Base + "SportsTeam"

	// A sub property of participant. The sports team that participated on this action.
	SportsTeam_Property = Base + "sportsTeam"

	// The person's spouse.
	Spouse_Property = Base + "spouse"

	// A spreadsheet file.
	SpreadsheetDigitalDocument_Class = Base + "SpreadsheetDigitalDocument"

	// A stadium.
	StadiumOrArena_Class = Base + "StadiumOrArena"

	// The stage represented as a number, e.g. 3.
	StageAsNumber_Property = Base + "stageAsNumber"

	// The stage of the condition, if applicable.
	Stage_Property = Base + "stage"

	// Content coded 'staged content' in a [[MediaReview]], considered in the context of how it was published or shared.
	// For a [[VideoObject]] to be 'staged content': A video that has been created using actors or similarly contrived.
	// For an [[ImageObject]] to be 'staged content': An image that was created using actors or similarly contrived, such
	// as a screenshot of a fake tweet. For an [[ImageObject]] with embedded text to be 'staged content': An image that
	// was created using actors or similarly contrived, such as a screenshot of a fake tweet. For an [[AudioObject]] to be
	// 'staged content': Audio that has been created using actors or similarly contrived.
	StagedContent_MediaManipulationRatingEnumeration = Base + "StagedContent"

	// Stages that can be observed from a topic.
	StagesHealthAspect_HealthAspectEnumeration = Base + "StagesHealthAspect"

	// An official rating for a lodging business or food establishment, e.g. from national associations or standards
	// bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as
	// (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
	StarRating_Property = Base + "starRating"

	// The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	StartDate_Property = Base + "startDate"

	// The start time of the clip expressed as the number of seconds from the beginning of the work.
	StartOffset_Property = Base + "startOffset"

	// The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it
	// is expected to start. For actions that span a period of time, when the action was performed. E.g. John wrote a book
	// from *January* to December. For media, including audio and video, it's the time offset of the start of a clip
	// within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing
	// dates with times. This situation may be clarified in future revisions.
	StartTime_Property = Base + "startTime"

	// Indicates the kind of statistic represented by a [[StatisticalVariable]], e.g. mean, count etc. The value of
	// statType is a property, either from within Schema.org (e.g. [[median]], [[marginOfError]], [[maxValue]],
	// [[minValue]]) or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
	StatType_Property = Base + "statType"

	// A state or province of a country.
	State_Class = Base + "State"

	// A statement about something, for example a fun or interesting fact. If known, the main entity this statement is
	// about can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]]
	// instead. Use the [[text]] property to capture the text of the statement.
	Statement_Class = Base + "Statement"

	// A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The
	// property [[populationType]] is used to specify the type. Any property that can be used on instances of that type
	// can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s
	// with a [[homeLocation]] of East Podunk California would be described by applying the appropriate [[homeLocation]]
	// and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people. The
	// properties [[numConstraints]] and [[constraintProperty]] are used to specify which of the populations properties
	// are used to specify the population. Note that the sense of "population" used here is the general sense of a
	// statistical population, and does not imply that the population consists of people. For example, a
	// [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], where a
	// [[populationType]] such as [[Person]] or [[Event]] can be indicated directly. In most cases it may be better to use
	// [[StatisticalVariable]] instead of [[StatisticalPopulation]].
	StatisticalPopulation_Class = Base + "StatisticalPopulation"

	// [[StatisticalVariable]] represents any type of statistical metric that can be measured at a place and time. The
	// usage pattern for [[StatisticalVariable]] is typically expressed using [[Observation]] with an explicit
	// [[populationType]], which is a type, typically drawn from Schema.org. Each [[StatisticalVariable]] is marked as a
	// [[ConstraintNode]], meaning that some properties (those listed using [[constraintProperty]]) serve in this setting
	// solely to define the statistical variable rather than literally describe a specific person, place or thing. For
	// example, a [[StatisticalVariable]] Median_Height_Person_Female representing the median height of women, could be
	// written as follows: the population type is [[Person]]; the measuredProperty [[height]]; the [[statType]]
	// [[median]]; the [[gender]] [[Female]]. It is important to note that there are many kinds of scientific quantitative
	// observation which are not fully, perfectly or unambiguously described following this pattern, or with solely
	// Schema.org terminology. The approach taken here is designed to allow partial, incremental or minimal description of
	// [[StatisticalVariable]]s, and the use of detailed sets of entity and property IDs from external repositories. The
	// [[measurementMethod]], [[unitCode]] and [[unitText]] properties can also be used to clarify the specific nature and
	// notation of an observed measurement.
	StatisticalVariable_Class = Base + "StatisticalVariable"

	// Lists or enumerations dealing with status types.
	StatusEnumeration_Class = Base + "StatusEnumeration"

	// The status of the study (enumerated).
	Status_Property = Base + "status"

	// A value indicating a steering position.
	SteeringPositionValue_Class = Base + "SteeringPositionValue"

	// The position of the steering wheel or similar device (mostly for cars).
	SteeringPosition_Property = Base + "steeringPosition"

	// The stepValue attribute indicates the granularity that is expected (and required) of the value in a
	// PropertyValueSpecification.
	StepValue_Property = Base + "stepValue"

	// A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
	Step_Property = Base + "step"

	// A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps';
	// 'step' is preferred).
	Steps_Property = Base + "steps"

	// Storage requirements (free space required).
	StorageRequirements_Property = Base + "storageRequirements"

	// Specifies that the customer receives a store credit as refund when returning a product.
	StoreCreditRefund_RefundTypeEnumeration = Base + "StoreCreditRefund"

	// A retail good store.
	Store_Class = Base + "Store"

	// The street address. For example, 1600 Amphitheatre Pkwy.
	StreetAddress_Property = Base + "streetAddress"

	// Physical activity that is engaged in to improve muscle and bone strength. Also referred to as resistance training.
	StrengthTraining_PhysicalActivityCategory = Base + "StrengthTraining"

	// The units of an active ingredient's strength, e.g. mg.
	StrengthUnit_Property = Base + "strengthUnit"

	// The value of an active ingredient's strength, e.g. 325.
	StrengthValue_Property = Base + "strengthValue"

	// Represents the strikethrough price (the previous advertised price) of an offered product.
	StrikethroughPrice_PriceTypeEnumeration = Base + "StrikethroughPrice"

	// The name given to how bone physically connects to each other.
	StructuralClass_Property = Base + "structuralClass"

	// Structured values are used when the value of a property has a more complex structure than simply being a textual
	// value or a reference to another thing.
	StructuredValue_Class = Base + "StructuredValue"

	// StudioAlbum.
	StudioAlbum_MusicAlbumProductionType = Base + "StudioAlbum"

	// Specifics about the observational study design (enumerated).
	StudyDesign_Property = Base + "studyDesign"

	// The location in which the study is taking/took place.
	StudyLocation_Property = Base + "studyLocation"

	// A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the
	// study.
	StudySubject_Property = Base + "studySubject"

	// A medical study or trial related to this entity.
	Study_Property = Base + "study"

	// This is a StupidProperty! - for testing only.
	StupidProperty_Property = Base + "stupidProperty"

	// A StupidType for testing.
	StupidType_Class = Base + "StupidType"

	// An Event that is part of this event. For example, a conference event includes many presentations, each of which is
	// a subEvent of the conference.
	SubEvent_Property = Base + "subEvent"

	// Events that are a part of this event. For example, a conference event includes many presentations, each subEvents
	// of the conference.
	SubEvents_Property = Base + "subEvents"

	// A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the
	// more specific 'department' property.
	SubOrganization_Property = Base + "subOrganization"

	// The individual reservations included in the package. Typically a repeated property.
	SubReservation_Property = Base + "subReservation"

	// The substage, e.g. 'a' for Stage IIIa.
	SubStageSuffix_Property = Base + "subStageSuffix"

	// Component (sub-)structure(s) that comprise this anatomical structure.
	SubStructure_Property = Base + "subStructure"

	// A component test of the panel.
	SubTest_Property = Base + "subTest"

	// Identifies a [[Trip]] that is a subTrip of this Trip. For example Day 1, Day 2, etc. of a multi-day trip.
	SubTrip_Property = Base + "subTrip"

	// A CreativeWork or Event about this Thing.
	SubjectOf_Property = Base + "subjectOf"

	// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get
	// updates pushed to.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the
	// subscriber acts as a passive agent being constantly/actively pushed for updates.\n* [[RegisterAction]]: Unlike
	// RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the
	// object.\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing
	// receiving updates from the object.
	SubscribeAction_Class = Base + "SubscribeAction"

	// Represents the subscription pricing component of the total price for an offered product.
	Subscription_PriceComponentTypeEnumeration = Base + "Subscription"

	// Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
	Substance_Class = Base + "Substance"

	// Languages in which subtitles/captions are available, in [IETF BCP 47 standard
	// format](http://tools.ietf.org/html/bcp47).
	SubtitleLanguage_Property = Base + "subtitleLanguage"

	// A subway station.
	SubwayStation_Class = Base + "SubwayStation"

	// A pointer from a newer variant of a product to its previous, often discontinued predecessor.
	SuccessorOf_Property = Base + "successorOf"

	// The number of grams of sugar.
	SugarContent_Property = Base + "sugarContent"

	// The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for
	// toddlers.
	SuggestedAge_Property = Base + "suggestedAge"

	// An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
	SuggestedAnswer_Property = Base + "suggestedAnswer"

	// The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
	SuggestedGender_Property = Base + "suggestedGender"

	// Maximum recommended age in years for the audience or user.
	SuggestedMaxAge_Property = Base + "suggestedMaxAge"

	// A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34
	// inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
	SuggestedMeasurement_Property = Base + "suggestedMeasurement"

	// Minimum recommended age in years for the audience or user.
	SuggestedMinAge_Property = Base + "suggestedMinAge"

	// Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal
	// etc.
	SuitableForDiet_Property = Base + "suitableForDiet"

	// A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of
	// which is multiple rooms (source: Wikipedia, the free encyclopedia, see <a
	// href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>). <br /><br /> See
	// also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other
	// forms of accommodations</a>.
	Suite_Class = Base + "Suite"

	// The day of the week between Saturday and Monday.
	Sunday_DayOfWeek = Base + "Sunday"

	// An event that this event is a part of. For example, a collection of individual music performances might each have a
	// music festival as their superEvent.
	SuperEvent_Property = Base + "superEvent"

	// Anatomical features that can be observed by sight (without dissection), including the form and proportions of the
	// human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy
	// plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical
	// structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can
	// be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be
	// used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of
	// the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein,
	// such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another
	// example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the
	// deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially
	// visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of
	// the joint (the related anatomical structure).
	SuperficialAnatomy_Class = Base + "SuperficialAnatomy"

	// Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
	SupersededBy_Property = Base + "supersededBy"

	// The area to which the artery supplies blood.
	SupplyTo_Property = Base + "supplyTo"

	// A sub-property of instrument. A supply consumed when performing instructions or a direction.
	Supply_Property = Base + "supply"

	// Supporting data for a SoftwareApplication.
	SupportingData_Property = Base + "supportingData"

	// A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
	Surface_Property = Base + "surface"

	// A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
	SurgicalProcedure_Class = Base + "SurgicalProcedure"

	// A specific branch of medical science that pertains to treating diseases, injuries and deformities by manual and
	// instrumental means.
	Surgical_MedicalSpecialty = Base + "Surgical"

	// The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
	SuspendAction_Class = Base + "SuspendAction"

	// Suspended.
	Suspended_MedicalStudyStatus = Base + "Suspended"

	// Indicates (typically several) Syllabus entities that lay out what each section of the overall course will cover.
	SyllabusSections_Property = Base + "syllabusSections"

	// A syllabus that describes the material covered in a course, often with several such sections per [[Course]] so that
	// a distinct [[timeRequired]] can be provided for that section of the [[Course]].
	Syllabus_Class = Base + "Syllabus"

	// Symptoms or related symptoms of a Topic.
	SymptomsHealthAspect_HealthAspectEnumeration = Base + "SymptomsHealthAspect"

	// A synagogue.
	Synagogue_Class = Base + "Synagogue"

	// A short TV program or a segment/part of a TV program.
	TVClip_Class = Base + "TVClip"

	// A TV episode which can be part of a series or season.
	TVEpisode_Class = Base + "TVEpisode"

	// Season dedicated to TV broadcast and associated online delivery.
	TVSeason_Class = Base + "TVSeason"

	// CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
	TVSeries_Class = Base + "TVSeries"

	// A table on a Web page.
	Table_Class = Base + "Table"

	// The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n*
	// [[GiveAction]]: The reciprocal of TakeAction.\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that
	// ownership has been transferred.
	TakeAction_Class = Base + "TakeAction"

	// A sub property of object. The collection target of the action.
	TargetCollection_Property = Base + "targetCollection"

	// The description of a node in an established educational framework.
	TargetDescription_Property = Base + "targetDescription"

	// The name of a node in an established educational framework.
	TargetName_Property = Base + "targetName"

	// Type of app development: phone, Metro style, desktop, XBox, etc.
	TargetPlatform_Property = Base + "targetPlatform"

	// Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
	TargetPopulation_Property = Base + "targetPopulation"

	// Target Operating System / Product to which the code applies. If applies to several versions, just the product name
	// can be used.
	TargetProduct_Property = Base + "targetProduct"

	// The URL of a node in an established educational framework.
	TargetUrl_Property = Base + "targetUrl"

	// Indicates a target EntryPoint, or url, for an Action.
	Target_Property = Base + "target"

	// A tattoo parlor.
	TattooParlor_Class = Base + "TattooParlor"

	// The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	TaxID_Property = Base + "taxID"

	// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation
	// emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
	TaxiReservation_Class = Base + "TaxiReservation"

	// A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance
	// traveled.
	TaxiService_Class = Base + "TaxiService"

	// A taxi stand.
	TaxiStand_Class = Base + "TaxiStand"

	// Indicates the usage of the car as a taxi.
	TaxiVehicleUsage_CarUsageType = Base + "TaxiVehicleUsage"

	// A taxi.
	Taxi_Class = Base + "Taxi"

	// The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary – typically the ranks from
	// TDWG TaxonRank ontology or equivalent Wikidata URIs.
	TaxonRank_Property = Base + "taxonRank"

	// A set of organisms asserted to represent a natural cohesive biological unit.
	Taxon_Class = Base + "Taxon"

	// The taxonomic grouping of the organism that expresses, encodes, or in some way related to the BioChemEntity.
	TaxonomicRange_Property = Base + "taxonomicRange"

	// The item being described is intended to help a person learn the competency or learning outcome defined by the
	// referenced term.
	Teaches_Property = Base + "teaches"

	// A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
	TechArticle_Class = Base + "TechArticle"

	// The telephone number.
	Telephone_Property = Base + "telephone"

	// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
	TelevisionChannel_Class = Base + "TelevisionChannel"

	// A television station.
	TelevisionStation_Class = Base + "TelevisionStation"

	// The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes,
	// either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval
	// format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In the case of a Dataset it will typically indicate
	// the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written
	// "2011/2012"). Other forms of content, e.g. ScholarlyArticle, Book, TVSeries or TVEpisode, may indicate their
	// temporalCoverage in broader terms - textually or via well-known URL. Written works such as books may sometimes have
	// precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format
	// via "1939/1945". Open-ended date ranges can be written with ".." in place of the end date. For example,
	// "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and
	// might be updated in future when ISO 8601 is officially updated.
	TemporalCoverage_Property = Base + "temporalCoverage"

	// The "temporal" property can be used in cases where more specific properties (e.g. [[temporalCoverage]],
	// [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
	Temporal_Property = Base + "temporal"

	// A tennis complex.
	TennisComplex_Class = Base + "TennisComplex"

	// A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]].
	TermCode_Property = Base + "termCode"

	// The amount of time in a term as defined by the institution. A term is a length of time where students take one or
	// more classes. Semesters and quarters are common units for term.
	TermDuration_Property = Base + "termDuration"

	// Terminated.
	Terminated_MedicalStudyStatus = Base + "Terminated"

	// Human-readable terms of service documentation.
	TermsOfService_Property = Base + "termsOfService"

	// The number of times terms of study are offered per year. Semesters and quarters are common units for term. For
	// example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
	TermsPerYear_Property = Base + "termsPerYear"

	// A file composed primarily of text.
	TextDigitalDocument_Class = Base + "TextDigitalDocument"

	// A text file. The text can be unformatted or contain markup, html, etc.
	TextObject_Class = Base + "TextObject"

	// Text value being annotated.
	TextValue_Property = Base + "textValue"

	// Data type: Text.
	Text_Class = Base + "Text"

	// The textual content of this CreativeWork.
	Text_Property = Base + "text"

	// Event type: Theater performance.
	TheaterEvent_Class = Base + "TheaterEvent"

	// A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
	TheaterGroup_Class = Base + "TheaterGroup"

	// A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
	TherapeuticProcedure_Class = Base + "TherapeuticProcedure"

	// A medical device used for therapeutic purposes.
	Therapeutic_MedicalDevicePurpose = Base + "Therapeutic"

	// A thesis or dissertation document submitted in support of candidature for an academic degree or professional
	// qualification.
	Thesis_Class = Base + "Thesis"

	// The most generic type of item.
	Thing_Class = Base + "Thing"

	// A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more [[MediaObject]]s. Many
	// 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats));
	// specific encoding formats can be represented using the [[encodingFormat]] property applied to the relevant
	// [[MediaObject]]. For the case of a single file published after Zip compression, the convention of appending '+zip'
	// to the [[encodingFormat]] can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific
	// content can all be represented using [[3DModel]].
	ThreeDModel_Class = Base + "3DModel"

	// Throat assessment with clinical examination.
	Throat_PhysicalExam = Base + "Throat"

	// A thumbnail image relevant to the Thing.
	ThumbnailUrl_Property = Base + "thumbnailUrl"

	// Thumbnail image for an image or video.
	Thumbnail_Property = Base + "thumbnail"

	// The day of the week between Wednesday and Friday.
	Thursday_DayOfWeek = Base + "Thursday"

	// The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange
	// and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we
	// recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO 15022.
	TickerSymbol_Property = Base + "tickerSymbol"

	// The unique identifier for the ticket.
	TicketNumber_Property = Base + "ticketNumber"

	// Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
	TicketToken_Property = Base + "ticketToken"

	// Used to describe a ticket to an event, a flight, a bus ride, etc.
	Ticket_Class = Base + "Ticket"

	// The seat associated with the ticket.
	TicketedSeat_Property = Base + "ticketedSeat"

	// The act of reaching a draw in a competitive activity.
	TieAction_Class = Base + "TieAction"

	// An enumeration of possible benefits as part of a loyalty (members) program.
	TierBenefitEnumeration_Class = Base + "TierBenefitEnumeration"

	// Benefit of the tier is earning of loyalty points.
	TierBenefitLoyaltyPoints_TierBenefitEnumeration = Base + "TierBenefitLoyaltyPoints"

	// Benefit of the tier is a members-only price.
	TierBenefitLoyaltyPrice_TierBenefitEnumeration = Base + "TierBenefitLoyaltyPrice"

	// Benefit of the tier is members-only returns, for example free unlimited returns.
	TierBenefitLoyaltyReturns_TierBenefitEnumeration = Base + "TierBenefitLoyaltyReturns"

	// Benefit of the tier is a members-only shipping price or speed (for example free shipping or 1-day shipping).
	TierBenefitLoyaltyShipping_TierBenefitEnumeration = Base + "TierBenefitLoyaltyShipping"

	// The time of day the program normally runs. For example, "evenings".
	TimeOfDay_Property = Base + "timeOfDay"

	// Approximate or typical time it usually takes to work with or through the content of this work for the typical or
	// target audience.
	TimeRequired_Property = Base + "timeRequired"

	// The expected length of time to complete the program if attending full-time.
	TimeToComplete_Property = Base + "timeToComplete"

	// A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for
	// details](http://www.w3.org/TR/xmlschema-2/#time)).
	Time_Class = Base + "Time"

	// The act of giving money voluntarily to a beneficiary in recognition of services rendered.
	TipAction_Class = Base + "TipAction"

	// A tire shop.
	TireShop_Class = Base + "TireShop"

	// The type of tissue sample required for the test.
	TissueSample_Property = Base + "tissueSample"

	// An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most
	// general/abstract level, a work of film or television. For example, the motion picture known as "Ghostbusters" has a
	// titleEIDR of "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls
	// "edits". See [[editEIDR]]. Since schema.org types like [[Movie]], [[TVEpisode]], [[TVSeason]], and [[TVSeries]] can
	// be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general
	// description), or alongside [[editEIDR]] for a more edit-specific description.
	TitleEIDR_Property = Base + "titleEIDR"

	// The title of the job.
	Title_Property = Base + "title"

	// A sub property of location. The final location of the object or the agent after the action.
	ToLocation_Property = Base + "toLocation"

	// A sub property of recipient. The recipient who was directly sent the message.
	ToRecipient_Property = Base + "toRecipient"

	// Item contains tobacco and/or nicotine, for example cigars, cigarettes, chewing tobacco, e-cigarettes, or hookahs.
	TobaccoNicotineConsideration_AdultOrientedEnumeration = Base + "TobaccoNicotineConsideration"

	// A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]] that would be the
	// default next item to play or render.
	TocContinuation_Property = Base + "tocContinuation"

	// Indicates a [[HyperTocEntry]] in a [[HyperToc]].
	TocEntry_Property = Base + "tocEntry"

	// The associated telephone number is toll free.
	TollFree_ContactPointOption = Base + "TollFree"

	// The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating
	// (TLR) or Vertical Load Rating (VLR).\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can
	// indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to
	// a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you
	// can use [[minValue]] and [[maxValue]] to indicate ranges.
	TongueWeight_Property = Base + "tongueWeight"

	// A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
	Tool_Property = Base + "tool"

	// The torque (turning force) of the vehicle's engine.\n\nTypical unit code(s): NU for newton metre (N m), F17 for
	// pound-force per foot, or F48 for pound-force per inch\n\n* Note 1: You can link to information about how the given
	// value has been determined (e.g. reference RPM) using the [[valueReference]] property.\n* Note 2: You can use
	// [[minValue]] and [[maxValue]] to indicate ranges.
	Torque_Property = Base + "torque"

	// The total number of students that have enrolled in the history of the course.
	TotalHistoricalEnrollment_Property = Base + "totalHistoricalEnrollment"

	// The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is
	// unclear or not known.
	TotalJobOpenings_Property = Base + "totalJobOpenings"

	// The total amount due.
	TotalPaymentDue_Property = Base + "totalPaymentDue"

	// The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n*
	// Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially
	// similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point.
	// Avoid using these symbols as a readability separator.
	TotalPrice_Property = Base + "totalPrice"

	// The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO
	// 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	TotalTime_Property = Base + "totalTime"

	// A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or
	// [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
	TourBookingPage_Property = Base + "tourBookingPage"

	// A tourist attraction. In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and
	// [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]]. This Type can be used on its own to describe a general
	// [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.
	// (See examples below)
	TouristAttraction_Class = Base + "TouristAttraction"

	// A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or
	// [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general
	// [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other
	// [[Place]]. A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more
	// [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The
	// [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that
	// is central to the decision to take the trip. (See examples below.)
	TouristDestination_Class = Base + "TouristDestination"

	// A tourist information center.
	TouristInformationCenter_Class = Base + "TouristInformationCenter"

	// A tourist trip. A created itinerary of visits to one or more places of interest
	// ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a
	// particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
	// (See examples below.)
	TouristTrip_Class = Base + "TouristTrip"

	// Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular country, etc.
	TouristType_Property = Base + "touristType"

	// A specific branch of medical science that is concerned with poisons, their nature, effects and detection and
	// involved in the treatment of poisoning.
	Toxicologic_MedicalSpecialty = Base + "Toxicologic"

	// A toy store.
	ToyStore_Class = Base + "ToyStore"

	// An agent tracks an object for updates.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, TrackAction
	// refers to the interest on the location of innanimates objects.\n* [[SubscribeAction]]: Unlike SubscribeAction,
	// TrackAction refers to the interest on the location of innanimate objects.
	TrackAction_Class = Base + "TrackAction"

	// A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of
	// type MusicRecording.
	Track_Property = Base + "track"

	// Shipper tracking number.
	TrackingNumber_Property = Base + "trackingNumber"

	// Tracking url for the parcel delivery.
	TrackingUrl_Property = Base + "trackingUrl"

	// A music recording (track)&#x2014;usually a single song.
	Tracks_Property = Base + "tracks"

	// The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object,
	// product or service with a participant in exchange for a one time or periodic payment.
	TradeAction_Class = Base + "TradeAction"

	// A system of medicine based on common theoretical concepts that originated in China and evolved over thousands of
	// years, that uses herbs, acupuncture, exercise, massage, dietary therapy, and other methods to treat a wide range of
	// conditions.
	TraditionalChinese_MedicineSystem = Base + "TraditionalChinese"

	// The permitted weight of a trailer attached to the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for
	// pound\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note
	// 2: You may also link to a [[QualitativeValue]] node that provides additional information using
	// [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	TrailerWeight_Property = Base + "trailerWeight"

	// The trailer of a movie or TV/radio series, season, episode, etc.
	Trailer_Property = Base + "trailer"

	// The name of the train (e.g. The Orient Express).
	TrainName_Property = Base + "trainName"

	// The unique identifier for the train.
	TrainNumber_Property = Base + "trainNumber"

	// A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in
	// confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use
	// [[Offer]].
	TrainReservation_Class = Base + "TrainReservation"

	// A train station.
	TrainStation_Class = Base + "TrainStation"

	// A trip on a commercial train line.
	TrainTrip_Class = Base + "TrainTrip"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/trainedAlgorithmicMedia">trained
	// algorithmic media</a>' using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source
	// type</a> vocabulary.
	TrainedAlgorithmicMediaDigitalSource_IPTCDigitalSourceEnumeration = Base + "TrainedAlgorithmicMediaDigitalSource"

	// The estimated salary earned while in the program.
	TrainingSalary_Property = Base + "trainingSalary"

	// The number of grams of trans fat.
	TransFatContent_Property = Base + "transFatContent"

	// If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
	Transcript_Property = Base + "transcript"

	// The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
	TransferAction_Class = Base + "TransferAction"

	// Content coded 'transformed content' in a [[MediaReview]], considered in the context of how it was published or
	// shared. For a [[VideoObject]] to be 'transformed content': or all of the video has been manipulated to transform
	// the footage itself. This category includes using tools like the Adobe Suite to change the speed of the video, add
	// or remove visual elements or dub audio. Deepfakes are also a subset of transformation. For an [[ImageObject]] to be
	// 'transformed content': Adding or deleting visual elements to give the image a different meaning with the intention
	// to mislead. For an [[ImageObject]] with embedded text to be 'transformed content': Adding or deleting visual
	// elements to give the image a different meaning with the intention to mislead. For an [[AudioObject]] to be
	// 'transformed content': Part or all of the audio has been manipulated to alter the words or sounds, or the audio has
	// been synthetically generated, such as to create a sound-alike voice.
	TransformedContent_MediaManipulationRatingEnumeration = Base + "TransformedContent"

	// A transit map.
	TransitMap_MapCategoryType = Base + "TransitMap"

	// Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a
	// [[shippingSettingsLink]] cross-reference).
	TransitTimeLabel_Property = Base + "transitTimeLabel"

	// The typical delay the order has been sent for delivery and the goods reach the final customer. In the context of
	// [[ShippingDeliveryTime]], use the [[QuantitativeValue]]. Typical properties: minValue, maxValue, unitCode (d for
	// DAY). In the context of [[ShippingConditions]], use the [[ServicePeriod]]. It has a duration (as a
	// [[QuantitativeValue]]) and also business days and a cut-off time.
	TransitTime_Property = Base + "transitTime"

	// The work that this work has been translated from. E.g. 物种起源 is a translationOf “On the Origin of Species”.
	TranslationOfWork_Property = Base + "translationOfWork"

	// Organization or person who adapts a creative work to different languages, regional differences and technical
	// requirements of a target market, or that translates during some event.
	Translator_Property = Base + "translator"

	// How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.
	TransmissionMethod_Property = Base + "transmissionMethod"

	// The act of traveling from a fromLocation to a destination by a specified mode of transport, optionally with
	// participants.
	TravelAction_Class = Base + "TravelAction"

	// A travel agency.
	TravelAgency_Class = Base + "TravelAgency"

	// Information about travel bans, e.g. in the context of a pandemic.
	TravelBans_Property = Base + "travelBans"

	// An indication for treating an underlying condition, symptom, etc.
	TreatmentIndication_Class = Base + "TreatmentIndication"

	// Treatments or related therapies for a Topic.
	TreatmentsHealthAspect_HealthAspectEnumeration = Base + "TreatmentsHealthAspect"

	// Specifics about the trial design (enumerated).
	TrialDesign_Property = Base + "trialDesign"

	// The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.
	Tributary_Property = Base + "tributary"

	// The location of origin of the trip, prior to any destination(s).
	TripOrigin_Property = Base + "tripOrigin"

	// A trip or journey. An itinerary of visits to one or more places.
	Trip_Class = Base + "Trip"

	// A trial design in which neither the researcher, the person administering the therapy nor the patient knows the
	// details of the treatment the patient was randomly assigned to.
	TripleBlindedTrial_MedicalTrialDesign = Base + "TripleBlindedTrial"

	// The boolean value true.
	True_Boolean = Base + "True"

	// The day of the week between Monday and Wednesday.
	Tuesday_DayOfWeek = Base + "Tuesday"

	// A structured value indicating the quantity, unit of measurement, and business function of goods included in a
	// bundle offer.
	TypeAndQuantityNode_Class = Base + "TypeAndQuantityNode"

	// The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by
	// quantity.
	TypeOfBed_Property = Base + "typeOfBed"

	// The product that this structured value is referring to.
	TypeOfGood_Property = Base + "typeOfGood"

	// Categorization and other types related to a topic.
	TypesHealthAspect_HealthAspectEnumeration = Base + "TypesHealthAspect"

	// The typical expected age range, e.g. '7-9', '11-'.
	TypicalAgeRange_Property = Base + "typicalAgeRange"

	// The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by
	// the institution.
	TypicalCreditsPerTerm_Property = Base + "typicalCreditsPerTerm"

	// A medical test typically performed given this condition.
	TypicalTest_Property = Base + "typicalTest"

	// UKNonprofitType: Non-profit organization type originating from the United Kingdom.
	UKNonprofitType_Class = Base + "UKNonprofitType"

	// UKTrust: Non-profit type referring to a UK trust.
	UKTrust_UKNonprofitType = Base + "UKTrust"

	// Data type: URL.
	URL_Class = Base + "URL"

	// USNonprofitType: Non-profit organization type originating from the United States.
	USNonprofitType_Class = Base + "USNonprofitType"

	// Ultrasound imaging.
	Ultrasound_MedicalImagingTechnique = Base + "Ultrasound"

	// The act of un-registering from a service.\n\nRelated actions:\n\n* [[RegisterAction]]: antonym of
	// UnRegisterAction.\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from
	// a service you were previously registered, rather than leaving a team/group of people.
	UnRegisterAction_Class = Base + "UnRegisterAction"

	// The item is suitable only for adults, without indicating why. Due to widespread use of "adult" as a euphemism for
	// "sexual", many such items are likely suited also for the SexualContentConsideration code.
	UnclassifiedAdultConsideration_AdultOrientedEnumeration = Base + "UnclassifiedAdultConsideration"

	// The person or organization the reservation or ticket is for.
	UnderName_Property = Base + "underName"

	// UnemploymentSupport: this is a benefit for unemployment support.
	UnemploymentSupport_GovernmentBenefitsType = Base + "UnemploymentSupport"

	// UnincorporatedAssociationCharity: Non-profit type referring to a charitable company that is not incorporated (UK).
	UnincorporatedAssociationCharity_UKNonprofitType = Base + "UnincorporatedAssociationCharity"

	// The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the
	// UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitCode_Property = Base + "unitCode"

	// The price asked for a given offer by the respective organization or person.
	UnitPriceSpecification_Class = Base + "UnitPriceSpecification"

	// A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for <a
	// href='unitCode'>unitCode</a>.
	UnitText_Property = Base + "unitText"

	// For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources
	// and the decision process required.
	UnnamedSourcesPolicy_Property = Base + "unnamedSourcesPolicy"

	// Indicates that a document has no particular or special standing (e.g. a republication of a law by a private
	// publisher).
	UnofficialLegalValue_LegalValueLevel = Base + "UnofficialLegalValue"

	// The number of grams of unsaturated fat.
	UnsaturatedFatContent_Property = Base + "unsaturatedFatContent"

	// The act of managing by changing/editing the state of the object.
	UpdateAction_Class = Base + "UpdateAction"

	// Date (including time if available) when this media object was uploaded to this site.
	UploadDate_Property = Base + "uploadDate"

	// The number of upvotes this question, answer or comment has received from the community.
	UpvoteCount_Property = Base + "upvoteCount"

	// An url template (RFC6570) that will be used to construct the target of the execution of the action.
	UrlTemplate_Property = Base + "urlTemplate"

	// URL of the item.
	Url_Property = Base + "url"

	// A specific branch of medical science that is concerned with the diagnosis and treatment of diseases pertaining to
	// the urinary tract and the urogenital system.
	Urologic_MedicalSpecialty = Base + "Urologic"

	// A <a href="https://en.wikipedia.org/wiki/National_Provider_Identifier">National Provider Identifier</a> (NPI) is a
	// unique 10-digit identification number issued to health care providers in the United States by the Centers for
	// Medicare and Medicaid Services.
	UsNPI_Property = Base + "usNPI"

	// The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is
	// applicable both to works that are freely available and to those that require payment or other transactions. It can
	// reference additional information, e.g. community expectations on preferred linking and citation conventions, as
	// well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed,
	// resource-specific information about licensing options. This property can be used alongside the license property
	// which indicates license(s) applicable to some piece of content. The usageInfo property can provide information
	// about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under
	// non-commercial creative commons licenses.
	UsageInfo_Property = Base + "usageInfo"

	// Content about how, when, frequency and dosage of a topic.
	UsageOrScheduleHealthAspect_HealthAspectEnumeration = Base + "UsageOrScheduleHealthAspect"

	// The act of applying an object to its intended purpose.
	UseAction_Class = Base + "UseAction"

	// Indicates that the item is used.
	UsedCondition_OfferItemCondition = Base + "UsedCondition"

	// A condition the test is used to diagnose.
	UsedToDiagnose_Property = Base + "usedToDiagnose"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserBlocks_Class = Base + "UserBlocks"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserCheckins_Class = Base + "UserCheckins"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserComments_Class = Base + "UserComments"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserDownloads_Class = Base + "UserDownloads"

	// The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
	UserInteractionCount_Property = Base + "userInteractionCount"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserInteraction_Class = Base + "UserInteraction"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserLikes_Class = Base + "UserLikes"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserPageVisits_Class = Base + "UserPageVisits"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserPlays_Class = Base + "UserPlays"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserPlusOnes_Class = Base + "UserPlusOnes"

	// A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].
	UserReview_Class = Base + "UserReview"

	// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally
	// better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
	UserTweets_Class = Base + "UserTweets"

	// Device used to perform the test.
	UsesDevice_Property = Base + "usesDevice"

	// The standard for interpreting the Plan ID. The preferred is "HIOS". See the Centers for Medicare & Medicaid
	// Services for more details.
	UsesHealthPlanIdStandard_Property = Base + "usesHealthPlanIdStandard"

	// Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented
	// as a [[HyperTocEntry]].
	Utterances_Property = Base + "utterances"

	// A kind of lodging business that focuses on renting single properties for limited time.
	VacationRental_Class = Base + "VacationRental"

	// The membership program tier an Offer (or a PriceSpecification, OfferShippingDetails, or MerchantReturnPolicy under
	// an Offer) is valid for.
	ValidForMemberTier_Property = Base + "validForMemberTier"

	// The duration of validity of a permit or similar thing.
	ValidFor_Property = Base + "validFor"

	// The date when the item becomes valid.
	ValidFrom_Property = Base + "validFrom"

	// The geographic area where the item is valid. Applies for example to a [[Permit]], a [[Certification]], or an
	// [[EducationalOccupationalCredential]].
	ValidIn_Property = Base + "validIn"

	// The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening
	// hours.
	ValidThrough_Property = Base + "validThrough"

	// The date when the item is no longer valid.
	ValidUntil_Property = Base + "validUntil"

	// Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
	ValueAddedTaxIncluded_Property = Base + "valueAddedTaxIncluded"

	// Specifies the allowed range for number of characters in a literal value.
	ValueMaxLength_Property = Base + "valueMaxLength"

	// Specifies the minimum allowed range for number of characters in a literal value.
	ValueMinLength_Property = Base + "valueMinLength"

	// Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner
	// analogous to HTML's input@name.
	ValueName_Property = Base + "valueName"

	// Specifies a regular expression for testing literal values according to the HTML spec.
	ValuePattern_Property = Base + "valuePattern"

	// A secondary value that provides additional information on the original value, e.g. a reference temperature or a
	// type of measurement.
	ValueReference_Property = Base + "valueReference"

	// Whether the property must be filled in to complete the action. Default is false.
	ValueRequired_Property = Base + "valueRequired"

	// The value of a [[QuantitativeValue]] (including [[Observation]]) or property value node.\n\n* For
	// [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For
	// [[PropertyValue]], it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789
	// (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use
	// '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a
	// readability separator.
	Value_Property = Base + "value"

	// The variableMeasured property can indicate (repeated as necessary) the variables that are measured in some dataset,
	// either described as text or as pairs of identifier and description using PropertyValue, or more explicitly as a
	// [[StatisticalVariable]].
	VariableMeasured_Property = Base + "variableMeasured"

	// Originally named [[variablesMeasured]], the [[variableMeasured]] property can indicate (repeated as necessary) the
	// variables that are measured in some dataset, either described as text or as pairs of identifier and description
	// using PropertyValue.
	VariablesMeasured_Property = Base + "variablesMeasured"

	// A description of the variant cover for the issue, if the issue is a variant printing. For example, "Bryan Hitch
	// Variant Cover" or "2nd Printing Variant".
	VariantCover_Property = Base + "variantCover"

	// Indicates the property or properties by which the variants in a [[ProductGroup]] vary, e.g. their size, color etc.
	// Schema.org properties can be referenced by their short name e.g. "color"; terms defined elsewhere can be referenced
	// with their URIs.
	VariesBy_Property = Base + "variesBy"

	// The Value-added Tax ID of the organization or person.
	VatID_Property = Base + "vatID"

	// A diet exclusive of all animal products.
	VeganDiet_RestrictedDiet = Base + "VeganDiet"

	// A diet exclusive of animal meat.
	VegetarianDiet_RestrictedDiet = Base + "VegetarianDiet"

	// A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited
	// edition'.
	VehicleConfiguration_Property = Base + "vehicleConfiguration"

	// Information about the engine or engines of the vehicle.
	VehicleEngine_Property = Base + "vehicleEngine"

	// The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify
	// individual motor vehicles.
	VehicleIdentificationNumber_Property = Base + "vehicleIdentificationNumber"

	// The color or color combination of the interior of the vehicle.
	VehicleInteriorColor_Property = Base + "vehicleInteriorColor"

	// The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most
	// interior types are characterized by the material used, an interior type can also be based on vehicle usage or
	// target audience.
	VehicleInteriorType_Property = Base + "vehicleInteriorType"

	// The release date of a vehicle model (often used to differentiate versions of the same make and model).
	VehicleModelDate_Property = Base + "vehicleModelDate"

	// The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in
	// terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
	VehicleSeatingCapacity_Property = Base + "vehicleSeatingCapacity"

	// Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a
	// taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.
	VehicleSpecialUsage_Property = Base + "vehicleSpecialUsage"

	// The type of component used for transmitting the power from a rotating power source to the wheels or other relevant
	// component(s) ("gearbox" for cars).
	VehicleTransmission_Property = Base + "vehicleTransmission"

	// A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through
	// space.
	Vehicle_Class = Base + "Vehicle"

	// A type of blood vessel that specifically carries blood to the heart.
	Vein_Class = Base + "Vein"

	// 'vendor' is an earlier term for 'seller'.
	Vendor_Property = Base + "vendor"

	// A venue map (e.g. for malls, auditoriums, museums, etc.).
	VenueMap_MapCategoryType = Base + "VenueMap"

	// Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]] or other fact-checking
	// [[Organization]].
	VerificationFactCheckingPolicy_Property = Base + "verificationFactCheckingPolicy"

	// The version of the CreativeWork embodied by a specified resource.
	Version_Property = Base + "version"

	// A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport
	// blood throughout the entire body.
	Vessel_Class = Base + "Vessel"

	// A vet's office.
	VeterinaryCare_Class = Base + "VeterinaryCare"

	// The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
	VideoFormat_Property = Base + "videoFormat"

	// The frame size of the video.
	VideoFrameSize_Property = Base + "videoFrameSize"

	// Web page type: Video gallery page.
	VideoGallery_Class = Base + "VideoGallery"

	// A short segment/part of a video game.
	VideoGameClip_Class = Base + "VideoGameClip"

	// A video game series.
	VideoGameSeries_Class = Base + "VideoGameSeries"

	// A video game is an electronic game that involves human interaction with a user interface to generate visual
	// feedback on a video device.
	VideoGame_Class = Base + "VideoGame"

	// A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the
	// purposes of this type, considered identical. If they have different embedded metadata the files will differ.
	// Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual
	// content, do not affect this notion of identity.
	VideoObjectSnapshot_Class = Base + "VideoObjectSnapshot"

	// A video file.
	VideoObject_Class = Base + "VideoObject"

	// The quality of the video.
	VideoQuality_Property = Base + "videoQuality"

	// An embedded video object.
	Video_Property = Base + "video"

	// The act of consuming static visual content.
	ViewAction_Class = Base + "ViewAction"

	// VinylFormat.
	VinylFormat_MusicReleaseFormatType = Base + "VinylFormat"

	// Item shows or promotes violence.
	ViolenceConsideration_AdultOrientedEnumeration = Base + "ViolenceConsideration"

	// An online or virtual location for attending events. For example, one may attend an online seminar or educational
	// event. While a virtual location may be used as the location of an event, virtual locations should not be confused
	// with physical locations in the real world.
	VirtualLocation_Class = Base + "VirtualLocation"

	// Content coded as '<a href="https://cv.iptc.org/newscodes/digitalsourcetype/virtualRecording">virtual recording</a>'
	// using the IPTC <a href="https://cv.iptc.org/newscodes/digitalsourcetype/">digital source type</a> vocabulary.
	VirtualRecordingDigitalSource_IPTCDigitalSourceEnumeration = Base + "VirtualRecordingDigitalSource"

	// Pathogenic virus that causes viral infection.
	Virus_InfectiousAgentClass = Base + "Virus"

	// Event type: Visual arts event.
	VisualArtsEvent_Class = Base + "VisualArtsEvent"

	// A work of art that is primarily visual in character.
	VisualArtwork_Class = Base + "VisualArtwork"

	// Vital signs are measures of various physiological functions in order to assess the most basic body functions.
	VitalSign_Class = Base + "VitalSign"

	// A volcano, like Fujisan.
	Volcano_Class = Base + "Volcano"

	// Identifies the volume of publication or multi-part work; for example, "iii" or "2".
	VolumeNumber_Property = Base + "volumeNumber"

	// The act of expressing a preference from a fixed/finite/structured set of choices/options.
	VoteAction_Class = Base + "VoteAction"

	// An advertising section of the page.
	WPAdBlock_Class = Base + "WPAdBlock"

	// The footer section of the page.
	WPFooter_Class = Base + "WPFooter"

	// The header section of the page.
	WPHeader_Class = Base + "WPHeader"

	// A sidebar section of the page.
	WPSideBar_Class = Base + "WPSideBar"

	// The act of expressing a desire about the object. An agent wants an object.
	WantAction_Class = Base + "WantAction"

	// Any FDA or other warnings about the drug (text or URL).
	Warning_Property = Base + "warning"

	// A structured value representing the duration and scope of services that will be provided to a customer free of
	// charge in case of a defect or malfunction of a product.
	WarrantyPromise_Class = Base + "WarrantyPromise"

	// The warranty promise(s) included in the offer.
	WarrantyPromise_Property = Base + "warrantyPromise"

	// A range of services that will be provided to a customer free of charge in case of a defect or malfunction of a
	// product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n*
	// http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp
	WarrantyScope_Class = Base + "WarrantyScope"

	// The scope of the warranty promise.
	WarrantyScope_Property = Base + "warrantyScope"

	// The warranty promise(s) included in the offer.
	Warranty_Property = Base + "warranty"

	// The act of consuming dynamic/moving visual content.
	WatchAction_Class = Base + "WatchAction"

	// A waterfall, like Niagara.
	Waterfall_Class = Base + "Waterfall"

	// The item is intended to induce bodily harm, for example guns, mace, combat knives, brass knuckles, nail or other
	// bombs, and spears.
	WeaponConsideration_AdultOrientedEnumeration = Base + "WeaponConsideration"

	// The act of dressing oneself in clothing.
	WearAction_Class = Base + "WearAction"

	// Measurement of the back section, for example of a jacket.
	WearableMeasurementBack_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementBack"

	// Measurement of the chest/bust section, for example of a suit.
	WearableMeasurementChestOrBust_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementChestOrBust"

	// Measurement of the collar, for example of a shirt.
	WearableMeasurementCollar_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementCollar"

	// Measurement of the cup, for example of a bra.
	WearableMeasurementCup_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementCup"

	// Measurement of the height, for example the heel height of a shoe.
	WearableMeasurementHeight_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementHeight"

	// Measurement of the hip section, for example of a skirt.
	WearableMeasurementHips_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementHips"

	// Measurement of the inseam, for example of pants.
	WearableMeasurementInseam_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementInseam"

	// Represents the length, for example of a dress.
	WearableMeasurementLength_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementLength"

	// Measurement of the outside leg, for example of pants.
	WearableMeasurementOutsideLeg_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementOutsideLeg"

	// Measurement of the sleeve length, for example of a shirt.
	WearableMeasurementSleeve_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementSleeve"

	// Enumerates common types of measurement for wearables products.
	WearableMeasurementTypeEnumeration_Class = Base + "WearableMeasurementTypeEnumeration"

	// Measurement of the waist section, for example of pants.
	WearableMeasurementWaist_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementWaist"

	// Measurement of the width, for example of shoes.
	WearableMeasurementWidth_WearableMeasurementTypeEnumeration = Base + "WearableMeasurementWidth"

	// Size group "Big" for wearables.
	WearableSizeGroupBig_WearableSizeGroupEnumeration = Base + "WearableSizeGroupBig"

	// Size group "Boys" for wearables.
	WearableSizeGroupBoys_WearableSizeGroupEnumeration = Base + "WearableSizeGroupBoys"

	// Enumerates common size groups (also known as "size types") for wearable products.
	WearableSizeGroupEnumeration_Class = Base + "WearableSizeGroupEnumeration"

	// Size group "Extra Short" for wearables.
	WearableSizeGroupExtraShort_WearableSizeGroupEnumeration = Base + "WearableSizeGroupExtraShort"

	// Size group "Extra Tall" for wearables.
	WearableSizeGroupExtraTall_WearableSizeGroupEnumeration = Base + "WearableSizeGroupExtraTall"

	// Size group "Girls" for wearables.
	WearableSizeGroupGirls_WearableSizeGroupEnumeration = Base + "WearableSizeGroupGirls"

	// Size group "Husky" (or "Stocky") for wearables.
	WearableSizeGroupHusky_WearableSizeGroupEnumeration = Base + "WearableSizeGroupHusky"

	// Size group "Infants" for wearables.
	WearableSizeGroupInfants_WearableSizeGroupEnumeration = Base + "WearableSizeGroupInfants"

	// Size group "Juniors" for wearables.
	WearableSizeGroupJuniors_WearableSizeGroupEnumeration = Base + "WearableSizeGroupJuniors"

	// Size group "Maternity" for wearables.
	WearableSizeGroupMaternity_WearableSizeGroupEnumeration = Base + "WearableSizeGroupMaternity"

	// Size group "Mens" for wearables.
	WearableSizeGroupMens_WearableSizeGroupEnumeration = Base + "WearableSizeGroupMens"

	// Size group "Misses" (also known as "Missy") for wearables.
	WearableSizeGroupMisses_WearableSizeGroupEnumeration = Base + "WearableSizeGroupMisses"

	// Size group "Petite" for wearables.
	WearableSizeGroupPetite_WearableSizeGroupEnumeration = Base + "WearableSizeGroupPetite"

	// Size group "Plus" for wearables.
	WearableSizeGroupPlus_WearableSizeGroupEnumeration = Base + "WearableSizeGroupPlus"

	// Size group "Regular" for wearables.
	WearableSizeGroupRegular_WearableSizeGroupEnumeration = Base + "WearableSizeGroupRegular"

	// Size group "Short" for wearables.
	WearableSizeGroupShort_WearableSizeGroupEnumeration = Base + "WearableSizeGroupShort"

	// Size group "Tall" for wearables.
	WearableSizeGroupTall_WearableSizeGroupEnumeration = Base + "WearableSizeGroupTall"

	// Size group "Womens" for wearables.
	WearableSizeGroupWomens_WearableSizeGroupEnumeration = Base + "WearableSizeGroupWomens"

	// Australian size system for wearables.
	WearableSizeSystemAU_WearableSizeSystemEnumeration = Base + "WearableSizeSystemAU"

	// Brazilian size system for wearables.
	WearableSizeSystemBR_WearableSizeSystemEnumeration = Base + "WearableSizeSystemBR"

	// Chinese size system for wearables.
	WearableSizeSystemCN_WearableSizeSystemEnumeration = Base + "WearableSizeSystemCN"

	// Continental size system for wearables.
	WearableSizeSystemContinental_WearableSizeSystemEnumeration = Base + "WearableSizeSystemContinental"

	// German size system for wearables.
	WearableSizeSystemDE_WearableSizeSystemEnumeration = Base + "WearableSizeSystemDE"

	// EN 13402 (joint European standard for size labelling of clothes).
	WearableSizeSystemEN13402_WearableSizeSystemEnumeration = Base + "WearableSizeSystemEN13402"

	// Enumerates common size systems specific for wearable products.
	WearableSizeSystemEnumeration_Class = Base + "WearableSizeSystemEnumeration"

	// European size system for wearables.
	WearableSizeSystemEurope_WearableSizeSystemEnumeration = Base + "WearableSizeSystemEurope"

	// French size system for wearables.
	WearableSizeSystemFR_WearableSizeSystemEnumeration = Base + "WearableSizeSystemFR"

	// GS1 (formerly NRF) size system for wearables.
	WearableSizeSystemGS1_WearableSizeSystemEnumeration = Base + "WearableSizeSystemGS1"

	// Italian size system for wearables.
	WearableSizeSystemIT_WearableSizeSystemEnumeration = Base + "WearableSizeSystemIT"

	// Japanese size system for wearables.
	WearableSizeSystemJP_WearableSizeSystemEnumeration = Base + "WearableSizeSystemJP"

	// Mexican size system for wearables.
	WearableSizeSystemMX_WearableSizeSystemEnumeration = Base + "WearableSizeSystemMX"

	// United Kingdom size system for wearables.
	WearableSizeSystemUK_WearableSizeSystemEnumeration = Base + "WearableSizeSystemUK"

	// United States size system for wearables.
	WearableSizeSystemUS_WearableSizeSystemEnumeration = Base + "WearableSizeSystemUS"

	// An application programming interface accessible over Web/Internet technologies.
	WebAPI_Class = Base + "WebAPI"

	// Web applications.
	WebApplication_Class = Base + "WebApplication"

	// The time when a passenger can check into the flight online.
	WebCheckinTime_Property = Base + "webCheckinTime"

	// WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the
	// case that detailed distinctions between Web pages, sites and their parts are not always important or obvious. The
	// [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to
	// always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will
	// eventually be declared as subtypes of [[WebContent]].)
	WebContent_Class = Base + "WebContent"

	// The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually
	// RSS or Atom.
	WebFeed_Property = Base + "webFeed"

	// A web page element, like a table or an image.
	WebPageElement_Class = Base + "WebPageElement"

	// A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties
	// about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these
	// properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
	WebPage_Class = Base + "WebPage"

	// A WebSite is a set of related web pages and other items typically served from a single web domain and accessible
	// via URLs.
	WebSite_Class = Base + "WebSite"

	// The day of the week between Tuesday and Thursday.
	Wednesday_DayOfWeek = Base + "Wednesday"

	// Fraction of the weight that is used to compute the shipping price.
	WeightPercentage_Property = Base + "weightPercentage"

	// The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty
	// vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional
	// information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a
	// [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you
	// can use [[minValue]] and [[maxValue]] to indicate ranges.
	WeightTotal_Property = Base + "weightTotal"

	// The weight of the product or person.
	Weight_Property = Base + "weight"

	// The conventional Western system of medicine, that aims to apply the best available evidence gained from the
	// scientific method to clinical decision making. Also known as conventional or Western medicine.
	WesternConventional_MedicineSystem = Base + "WesternConventional"

	// The distance between the centers of the front and rear wheels.\n\nTypical unit code(s): CMT for centimeters, MTR
	// for meters, INH for inches, FOT for foot/feet.
	Wheelbase_Property = Base + "wheelbase"

	// A wholesale store.
	WholesaleStore_Class = Base + "WholesaleStore"

	// The drug's cost represents the wholesale acquisition cost of the drug.
	Wholesale_DrugCostCategory = Base + "Wholesale"

	// The width of the item.
	Width_Property = Base + "width"

	// The act of achieving victory in a competitive activity.
	WinAction_Class = Base + "WinAction"

	// A winery.
	Winery_Class = Base + "Winery"

	// A sub property of participant. The winner of the action.
	Winner_Property = Base + "winner"

	// Withdrawn.
	Withdrawn_MedicalStudyStatus = Base + "Withdrawn"

	// The number of words in the text of the CreativeWork such as an Article, Book, etc.
	WordCount_Property = Base + "wordCount"

	// A program with both an educational and employment component. Typically based at a workplace and structured around
	// work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to
	// distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
	WorkBasedProgram_Class = Base + "WorkBasedProgram"

	// Example/instance/realization/derivation of the concept of this creative work. E.g. the paperback edition, first
	// edition, or e-book.
	WorkExample_Property = Base + "workExample"

	// A work featured in some event, e.g. exhibited in an ExhibitionEvent. Specific subproperties are available for
	// workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
	WorkFeatured_Property = Base + "workFeatured"

	// The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
	WorkHours_Property = Base + "workHours"

	// A contact location for a person's place of work.
	WorkLocation_Property = Base + "workLocation"

	// A work performed in some event, for example a play performed in a TheaterEvent.
	WorkPerformed_Property = Base + "workPerformed"

	// The movie presented during this event.
	WorkPresented_Property = Base + "workPresented"

	// A work that is a translation of the content of this work. E.g. 西遊記 has an English workTranslation “Journey to the
	// West”, a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese translation Tây du ký bình khảo.
	WorkTranslation_Property = Base + "workTranslation"

	// A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the
	// interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
	WorkersUnion_Class = Base + "WorkersUnion"

	// Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.
	Workload_Property = Base + "workload"

	// Organizations that the person works for.
	WorksFor_Property = Base + "worksFor"

	// The lowest value allowed in this rating system.
	WorstRating_Property = Base + "worstRating"

	// The act of authoring written creative content.
	WriteAction_Class = Base + "WriteAction"

	// Permission to write or edit the document.
	WritePermission_DigitalDocumentPermissionType = Base + "WritePermission"

	// Text representing an XPath (typically but not necessarily version 1.0).
	XPathType_Class = Base + "XPathType"

	// X-ray imaging.
	XRay_MedicalImagingTechnique = Base + "XRay"

	// An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a
	// page can constitute a single conceptual "Web page element".
	Xpath_Property = Base + "xpath"

	// The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt field in
	// RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).
	YearBuilt_Property = Base + "yearBuilt"

	// The size of the business in annual revenue.
	YearlyRevenue_Property = Base + "yearlyRevenue"

	// The age of the business.
	YearsInOperation_Property = Base + "yearsInOperation"

	// The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
	Yield_Property = Base + "yield"

	// The airline boards by zones of the plane.
	ZoneBoardingPolicy_BoardingPolicyType = Base + "ZoneBoardingPolicy"

	// A zoo.
	Zoo_Class = Base + "Zoo"
)
