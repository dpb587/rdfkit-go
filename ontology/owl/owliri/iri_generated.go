// Code generated by irigencmd; DO NOT EDIT.
// 718fa1db7840d3315bfce94398543f91437ef6fe933054fd93f5471d19262fc5  https://www.w3.org/2002/07/owl.ttl

package owliri

import "github.com/dpb587/rdfkit-go/rdf"

const Base rdf.IRI = "http://www.w3.org/2002/07/owl#"

const (
	// The class of collections of pairwise different individuals.
	AllDifferent_Class = Base + "AllDifferent"

	// The class of collections of pairwise disjoint classes.
	AllDisjointClasses_Class = Base + "AllDisjointClasses"

	// The class of collections of pairwise disjoint properties.
	AllDisjointProperties_Class = Base + "AllDisjointProperties"

	// The property that determines the class that a universal property restriction refers to.
	AllValuesFrom_Property = Base + "allValuesFrom"

	// The property that determines the predicate of an annotated axiom or annotated annotation.
	AnnotatedProperty_Property = Base + "annotatedProperty"

	// The property that determines the subject of an annotated axiom or annotated annotation.
	AnnotatedSource_Property = Base + "annotatedSource"

	// The property that determines the object of an annotated axiom or annotated annotation.
	AnnotatedTarget_Property = Base + "annotatedTarget"

	// The class of annotation properties.
	AnnotationProperty_Class = Base + "AnnotationProperty"

	// The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and
	// object.
	Annotation_Class = Base + "Annotation"

	// The property that determines the predicate of a negative property assertion.
	AssertionProperty_Property = Base + "assertionProperty"

	// The class of asymmetric properties.
	AsymmetricProperty_Class = Base + "AsymmetricProperty"

	// The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and
	// object.
	Axiom_Class = Base + "Axiom"

	// The annotation property that indicates that a given ontology is backward compatible with another ontology.
	BackwardCompatibleWith_AnnotationProperty = Base + "backwardCompatibleWith"

	// This ontology partially describes the built-in classes and properties that together form the basis of the RDF/XML
	// syntax of OWL 2. The content of this ontology is based on Tables 6.1 and 6.2 in Section 6.4 of the OWL 2 RDF-Based
	// Semantics specification, available at http://www.w3.org/TR/owl2-rdf-based-semantics/. Please note that those tables
	// do not include the different annotations (labels, comments and rdfs:isDefinedBy links) used in this file. Also note
	// that the descriptions provided in this ontology do not provide a complete and correct formal description of either
	// the syntax or the semantics of the introduced terms (please see the OWL 2 recommendations for the complete and
	// normative specifications). Furthermore, the information provided by this ontology may be misleading if not used
	// with care. This ontology SHOULD NOT be imported into OWL ontologies. Importing this file into an OWL 2 DL ontology
	// will cause it to become an OWL 2 Full ontology and may have other, unexpected, consequences.
	BaseOntology = "http://www.w3.org/2002/07/owl"

	// The data property that does not relate any individual to any data value.
	BottomDataProperty_DatatypeProperty = Base + "bottomDataProperty"

	// The object property that does not relate any two individuals.
	BottomObjectProperty_ObjectProperty = Base + "bottomObjectProperty"

	// The property that determines the cardinality of an exact cardinality restriction.
	Cardinality_Property = Base + "cardinality"

	// The class of OWL classes.
	Class_Class = Base + "Class"

	// The property that determines that a given class is the complement of another class.
	ComplementOf_Property = Base + "complementOf"

	// The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been
	// deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
	DataRange_Class = Base + "DataRange"

	// The property that determines that a given data range is the complement of another data range with respect to the
	// data domain.
	DatatypeComplementOf_Property = Base + "datatypeComplementOf"

	// The class of data properties.
	DatatypeProperty_Class = Base + "DatatypeProperty"

	// The class of deprecated classes.
	DeprecatedClass_Class = Base + "DeprecatedClass"

	// The class of deprecated properties.
	DeprecatedProperty_Class = Base + "DeprecatedProperty"

	// The annotation property that indicates that a given entity has been deprecated.
	Deprecated_AnnotationProperty = Base + "deprecated"

	// The property that determines that two given individuals are different.
	DifferentFrom_Property = Base + "differentFrom"

	// The property that determines that a given class is equivalent to the disjoint union of a collection of other
	// classes.
	DisjointUnionOf_Property = Base + "disjointUnionOf"

	// The property that determines that two given classes are disjoint.
	DisjointWith_Property = Base + "disjointWith"

	// The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
	DistinctMembers_Property = Base + "distinctMembers"

	// The property that determines that two given classes are equivalent, and that is used to specify datatype
	// definitions.
	EquivalentClass_Property = Base + "equivalentClass"

	// The property that determines that two given properties are equivalent.
	EquivalentProperty_Property = Base + "equivalentProperty"

	// The class of functional properties.
	FunctionalProperty_Class = Base + "FunctionalProperty"

	// The property that determines the collection of properties that jointly build a key.
	HasKey_Property = Base + "hasKey"

	// The property that determines the property that a self restriction refers to.
	HasSelf_Property = Base + "hasSelf"

	// The property that determines the individual that a has-value restriction refers to.
	HasValue_Property = Base + "hasValue"

	// The property that is used for importing other ontologies into a given ontology.
	Imports_OntologyProperty = Base + "imports"

	// The annotation property that indicates that a given ontology is incompatible with another ontology.
	IncompatibleWith_AnnotationProperty = Base + "incompatibleWith"

	// The property that determines the collection of classes or data ranges that build an intersection.
	IntersectionOf_Property = Base + "intersectionOf"

	// The class of inverse-functional properties.
	InverseFunctionalProperty_Class = Base + "InverseFunctionalProperty"

	// The property that determines that two given properties are inverse.
	InverseOf_Property = Base + "inverseOf"

	// The class of irreflexive properties.
	IrreflexiveProperty_Class = Base + "IrreflexiveProperty"

	// The property that determines the cardinality of a maximum cardinality restriction.
	MaxCardinality_Property = Base + "maxCardinality"

	// The property that determines the cardinality of a maximum qualified cardinality restriction.
	MaxQualifiedCardinality_Property = Base + "maxQualifiedCardinality"

	// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or
	// owl:AllDisjointProperties axiom.
	Members_Property = Base + "members"

	// The property that determines the cardinality of a minimum cardinality restriction.
	MinCardinality_Property = Base + "minCardinality"

	// The property that determines the cardinality of a minimum qualified cardinality restriction.
	MinQualifiedCardinality_Property = Base + "minQualifiedCardinality"

	// The class of named individuals.
	NamedIndividual_Class = Base + "NamedIndividual"

	// The class of negative property assertions.
	NegativePropertyAssertion_Class = Base + "NegativePropertyAssertion"

	// This is the empty class.
	Nothing_Class = Base + "Nothing"

	// The class of object properties.
	ObjectProperty_Class = Base + "ObjectProperty"

	// The property that determines the class that a qualified object cardinality restriction refers to.
	OnClass_Property = Base + "onClass"

	// The property that determines the data range that a qualified data cardinality restriction refers to.
	OnDataRange_Property = Base + "onDataRange"

	// The property that determines the datatype that a datatype restriction refers to.
	OnDatatype_Property = Base + "onDatatype"

	// The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers
	// to.
	OnProperties_Property = Base + "onProperties"

	// The property that determines the property that a property restriction refers to.
	OnProperty_Property = Base + "onProperty"

	// The property that determines the collection of individuals or data values that build an enumeration.
	OneOf_Property = Base + "oneOf"

	// The class of ontology properties.
	OntologyProperty_Class = Base + "OntologyProperty"

	// The class of ontologies.
	Ontology_Class = Base + "Ontology"

	// The annotation property that indicates the predecessor ontology of a given ontology.
	PriorVersion_AnnotationProperty = Base + "priorVersion"

	// The property that determines the n-tuple of properties that build a sub property chain of a given property.
	PropertyChainAxiom_Property = Base + "propertyChainAxiom"

	// The property that determines that two given properties are disjoint.
	PropertyDisjointWith_Property = Base + "propertyDisjointWith"

	// The property that determines the cardinality of an exact qualified cardinality restriction.
	QualifiedCardinality_Property = Base + "qualifiedCardinality"

	// The class of reflexive properties.
	ReflexiveProperty_Class = Base + "ReflexiveProperty"

	// The class of property restrictions.
	Restriction_Class = Base + "Restriction"

	// The property that determines that two given individuals are equal.
	SameAs_Property = Base + "sameAs"

	// The property that determines the class that an existential property restriction refers to.
	SomeValuesFrom_Property = Base + "someValuesFrom"

	// The property that determines the subject of a negative property assertion.
	SourceIndividual_Property = Base + "sourceIndividual"

	// The class of symmetric properties.
	SymmetricProperty_Class = Base + "SymmetricProperty"

	// The property that determines the object of a negative object property assertion.
	TargetIndividual_Property = Base + "targetIndividual"

	// The property that determines the value of a negative data property assertion.
	TargetValue_Property = Base + "targetValue"

	// The class of OWL individuals.
	Thing_Class = Base + "Thing"

	// The data property that relates every individual to every data value.
	TopDataProperty_DatatypeProperty = Base + "topDataProperty"

	// The object property that relates every two individuals.
	TopObjectProperty_ObjectProperty = Base + "topObjectProperty"

	// The class of transitive properties.
	TransitiveProperty_Class = Base + "TransitiveProperty"

	// The property that determines the collection of classes or data ranges that build a union.
	UnionOf_Property = Base + "unionOf"

	// The property that identifies the version IRI of an ontology.
	VersionIRI_OntologyProperty = Base + "versionIRI"

	// The annotation property that provides version information for an ontology or another OWL construct.
	VersionInfo_AnnotationProperty = Base + "versionInfo"

	// The property that determines the collection of facet-value pairs that define a datatype restriction.
	WithRestrictions_Property = Base + "withRestrictions"
)
